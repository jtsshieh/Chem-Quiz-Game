import {
  defaultTheme_default,
  extendTheme
} from "./chunk-BWQAE6XY.js";
import {
  ThemeProvider_default,
  _extends,
  createStyled,
  init_esm2 as init_esm,
  init_extends,
  useThemeProps,
  useTheme_default
} from "./chunk-N7L2N2LE.js";
import {
  require_jsx_runtime
} from "./chunk-OLZHMS2K.js";
import {
  __toESM,
  require_react
} from "./chunk-KD7XVJGB.js";

// node_modules/@mui/joy/styles/identifier.js
var identifier_default = "$$joy";

// node_modules/@mui/joy/styles/styled.js
init_esm();
var styled = createStyled({
  defaultTheme: defaultTheme_default,
  themeId: identifier_default
});
var styled_default = styled;

// node_modules/@mui/joy/styles/ThemeProvider.js
var React = __toESM(require_react());
init_esm();
var import_jsx_runtime = __toESM(require_jsx_runtime());
var useTheme = () => {
  const theme = useTheme_default(defaultTheme_default);
  if (true) {
    React.useDebugValue(theme);
  }
  return theme[identifier_default] || theme;
};
function ThemeProvider({
  children,
  theme: themeInput
}) {
  let theme = defaultTheme_default;
  if (themeInput) {
    theme = extendTheme(identifier_default in themeInput ? themeInput[identifier_default] : themeInput);
  }
  return (0, import_jsx_runtime.jsx)(ThemeProvider_default, {
    theme,
    themeId: themeInput && identifier_default in themeInput ? identifier_default : void 0,
    children
  });
}

// node_modules/@mui/joy/styles/useThemeProps.js
init_extends();
init_esm();
function useThemeProps2({
  props,
  name
}) {
  return useThemeProps({
    props,
    name,
    defaultTheme: _extends({}, defaultTheme_default, {
      components: {}
    }),
    themeId: identifier_default
  });
}

// node_modules/@mui/joy/styles/ColorInversion.js
var React2 = __toESM(require_react());
var import_jsx_runtime2 = __toESM(require_jsx_runtime());
var ColorInversion = React2.createContext(void 0);
var useColorInversion = (childVariant) => {
  const overridableVariants = React2.useContext(ColorInversion);
  return {
    getColor: (instanceColorProp, defaultColorProp) => {
      if (overridableVariants && childVariant) {
        if (overridableVariants.includes(childVariant)) {
          return instanceColorProp || "context";
        }
      }
      return instanceColorProp || defaultColorProp;
    }
  };
};
function ColorInversionProvider({
  children,
  variant
}) {
  var _theme$colorInversion;
  const theme = useTheme();
  return (0, import_jsx_runtime2.jsx)(ColorInversion.Provider, {
    value: variant ? ((_theme$colorInversion = theme.colorInversionConfig) != null ? _theme$colorInversion : defaultTheme_default.colorInversionConfig)[variant] : void 0,
    children
  });
}
var ColorInversion_default = ColorInversion;

export {
  identifier_default,
  styled_default,
  useTheme,
  ThemeProvider,
  useThemeProps2 as useThemeProps,
  useColorInversion,
  ColorInversionProvider,
  ColorInversion_default
};
//# sourceMappingURL=chunk-A2FCLVE5.js.map
