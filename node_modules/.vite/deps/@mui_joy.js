import {
  TypographyInheritContext,
  TypographyNestedContext,
  Typography_default,
  getTypographyUtilityClass,
  typographyClasses_default
} from "./chunk-7OOL34RW.js";
import {
  Button_default,
  CircularProgress_default,
  buttonClasses_default,
  circularProgressClasses_default,
  getButtonUtilityClass,
  getCircularProgressUtilityClass
} from "./chunk-R7RRQV3D.js";
import {
  MenuProvider,
  Popper_default,
  SelectActionTypes,
  SelectProvider,
  TabsListProvider,
  TabsProvider,
  TextareaAutosize_default,
  createFilterOptions,
  init_Popper,
  init_Tabs,
  init_TextareaAutosize,
  init_base,
  init_useAutocomplete,
  init_useButton,
  init_useMenu,
  init_useMenuItem,
  init_useOption,
  init_useSelect,
  init_useSlider,
  init_useSwitch,
  init_useTab,
  init_useTabPanel,
  init_useTabs,
  init_useTabsList,
  useAutocomplete,
  useButton,
  useMenu,
  useMenuItem,
  useOption,
  useSelect_default,
  useSlider,
  useSwitch,
  useTabPanel_default,
  useTab_default,
  useTabsContext,
  useTabsList_default,
  useTabs_default,
  valueToPercent
} from "./chunk-ET4UYJF4.js";
import {
  CssBaseline_default
} from "./chunk-26LY4O7B.js";
import {
  FormControlContext_default,
  Input_default,
  StyledInputEndDecorator,
  StyledInputHtml,
  StyledInputRoot,
  StyledInputStartDecorator,
  getInputUtilityClass,
  inputClasses_default,
  useForwardedInput
} from "./chunk-ZOJMYTDQ.js";
import "./chunk-KGPEE52O.js";
import {
  CloseModalContext_default,
  Modal_default,
  getModalUtilityClass,
  modalClasses_default
} from "./chunk-D5OWT62B.js";
import "./chunk-YKOLXYKH.js";
import "./chunk-WMNN7CXD.js";
import {
  CssVarsProvider,
  getInitColorSchemeScript,
  useColorScheme
} from "./chunk-XC4IGXA3.js";
import {
  useSlot
} from "./chunk-YGIFPDTP.js";
import {
  ColorInversionProvider,
  ColorInversion_default,
  ThemeProvider,
  identifier_default,
  styled_default,
  useColorInversion,
  useTheme,
  useThemeProps
} from "./chunk-A2FCLVE5.js";
import "./chunk-K3OEAX2S.js";
import {
  init_composeClasses,
  init_utils,
  isHostComponent,
  useSlotProps
} from "./chunk-2MTMRG2U.js";
import {
  colors_default,
  createGetCssVar,
  defaultTheme_default,
  extendTheme,
  generateUtilityClass as generateUtilityClass2,
  generateUtilityClasses as generateUtilityClasses2,
  shouldSkipGeneratingVar
} from "./chunk-BWQAE6XY.js";
import {
  ClassNameGenerator_default,
  GlobalStyles_default,
  HTMLElementType,
  StyledEngineProvider,
  _extends,
  _objectWithoutPropertiesLoose,
  capitalize,
  chainPropTypes,
  clsx_m_default,
  composeClasses,
  createBox,
  createContainer,
  createGrid,
  createStack,
  css,
  extendSxProp,
  generateUtilityClass,
  generateUtilityClasses,
  getPath,
  init_Unstable_Grid,
  init_clsx_m,
  init_esm,
  init_esm2,
  init_extends,
  init_objectWithoutPropertiesLoose,
  integerPropType_default,
  isMuiElement,
  keyframes,
  refType_default,
  require_prop_types,
  useControlled,
  useEventCallback,
  useForkRef,
  useId,
  useIsFocusVisible,
  usePreviousProps_default
} from "./chunk-N7L2N2LE.js";
import {
  require_jsx_runtime
} from "./chunk-OLZHMS2K.js";
import {
  __toESM,
  require_react
} from "./chunk-KD7XVJGB.js";

// node_modules/@mui/joy/GlobalStyles/index.js
init_extends();
var React = __toESM(require_react());
init_esm2();
var import_jsx_runtime = __toESM(require_jsx_runtime());
function GlobalStyles(props) {
  return (0, import_jsx_runtime.jsx)(GlobalStyles_default, _extends({}, props, {
    defaultTheme: defaultTheme_default,
    themeId: identifier_default
  }));
}
var GlobalStyles_default2 = GlobalStyles;

// node_modules/@mui/joy/Alert/Alert.js
init_objectWithoutPropertiesLoose();
init_extends();
var React2 = __toESM(require_react());
var import_prop_types = __toESM(require_prop_types());
init_clsx_m();
init_base();
init_esm();

// node_modules/@mui/joy/Alert/alertClasses.js
function getAlertUtilityClass(slot) {
  return generateUtilityClass2("MuiAlert", slot);
}
var alertClasses = generateUtilityClasses2("MuiAlert", ["root", "startDecorator", "endDecorator", "colorPrimary", "colorDanger", "colorInfo", "colorNeutral", "colorSuccess", "colorWarning", "colorContext", "sizeSm", "sizeMd", "sizeLg", "variantPlain", "variantOutlined", "variantSoft", "variantSolid"]);
var alertClasses_default = alertClasses;

// node_modules/@mui/joy/Alert/Alert.js
var import_jsx_runtime2 = __toESM(require_jsx_runtime());
var import_jsx_runtime3 = __toESM(require_jsx_runtime());
var _excluded = ["children", "className", "color", "invertedColors", "role", "variant", "size", "startDecorator", "endDecorator", "component", "slots", "slotProps"];
var useUtilityClasses = (ownerState) => {
  const {
    variant,
    color,
    size
  } = ownerState;
  const slots = {
    root: ["root", size && `size${capitalize(size)}`, color && `color${capitalize(color)}`, variant && `variant${capitalize(variant)}`],
    startDecorator: ["startDecorator"],
    endDecorator: ["endDecorator"]
  };
  return composeClasses(slots, getAlertUtilityClass, {});
};
var AlertRoot = styled_default("div", {
  name: "JoyAlert",
  slot: "Root",
  overridesResolver: (props, styles) => styles.root
})(({
  theme,
  ownerState
}) => {
  var _theme$variants, _theme$colorInversion;
  return [_extends({
    "--Alert-radius": theme.vars.radius.sm,
    "--Alert-decoratorChildRadius": "max((var(--Alert-radius) - var(--variant-borderWidth, 0px)) - var(--Alert-padding), min(var(--Alert-padding) + var(--variant-borderWidth, 0px), var(--Alert-radius) / 2))",
    "--Button-minHeight": "var(--Alert-decoratorChildHeight)",
    "--IconButton-size": "var(--Alert-decoratorChildHeight)",
    "--Button-radius": "var(--Alert-decoratorChildRadius)",
    "--IconButton-radius": "var(--Alert-decoratorChildRadius)"
  }, ownerState.size === "sm" && {
    "--Alert-padding": "0.5rem",
    "--Alert-gap": "0.375rem",
    "--Alert-decoratorChildHeight": "1.5rem",
    "--Icon-fontSize": "1.125rem",
    fontSize: theme.vars.fontSize.sm
  }, ownerState.size === "md" && {
    "--Alert-padding": "0.75rem",
    "--Alert-gap": "0.5rem",
    "--Alert-decoratorChildHeight": "2rem",
    "--Icon-fontSize": "1.25rem",
    fontSize: theme.vars.fontSize.sm,
    fontWeight: theme.vars.fontWeight.md
  }, ownerState.size === "lg" && {
    "--Alert-padding": "1rem",
    "--Alert-gap": "0.75rem",
    "--Alert-decoratorChildHeight": "2.375rem",
    "--Icon-fontSize": "1.5rem",
    fontSize: theme.vars.fontSize.md,
    fontWeight: theme.vars.fontWeight.md
  }, {
    fontFamily: theme.vars.fontFamily.body,
    lineHeight: theme.vars.lineHeight.md,
    backgroundColor: "transparent",
    display: "flex",
    position: "relative",
    alignItems: "center",
    padding: `var(--Alert-padding)`,
    borderRadius: "var(--Alert-radius)"
  }, (_theme$variants = theme.variants[ownerState.variant]) == null ? void 0 : _theme$variants[ownerState.color]), ownerState.color !== "context" && ownerState.invertedColors && ((_theme$colorInversion = theme.colorInversion[ownerState.variant]) == null ? void 0 : _theme$colorInversion[ownerState.color])];
});
var AlertStartDecorator = styled_default("span", {
  name: "JoyAlert",
  slot: "StartDecorator",
  overridesResolver: (props, styles) => styles.startDecorator
})(({
  theme,
  ownerState
}) => {
  var _theme$vars$palette;
  return _extends({
    display: "inherit",
    flex: "none",
    marginInlineEnd: "var(--Alert-gap)"
  }, ownerState.color !== "context" && {
    color: (_theme$vars$palette = theme.vars.palette[ownerState.color]) == null ? void 0 : _theme$vars$palette[`${ownerState.variant}Color`]
  });
});
var AlertEndDecorator = styled_default("span", {
  name: "JoyAlert",
  slot: "EndDecorator",
  overridesResolver: (props, styles) => styles.endDecorator
})(({
  theme,
  ownerState
}) => {
  var _theme$vars$palette2;
  return _extends({
    display: "inherit",
    flex: "none",
    marginInlineStart: "var(--Alert-gap)",
    marginLeft: "auto"
  }, ownerState.color !== "context" && {
    color: (_theme$vars$palette2 = theme.vars.palette[ownerState.color]) == null ? void 0 : _theme$vars$palette2[`${ownerState.variant}Color`]
  });
});
var Alert = React2.forwardRef(function Alert2(inProps, ref) {
  const props = useThemeProps({
    props: inProps,
    name: "JoyAlert"
  });
  const {
    children,
    className,
    color: colorProp = "primary",
    invertedColors = false,
    role = "alert",
    variant = "soft",
    size = "md",
    startDecorator,
    endDecorator,
    component,
    slots = {},
    slotProps = {}
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded);
  const {
    getColor
  } = useColorInversion(variant);
  const color = getColor(inProps.color, colorProp);
  const ownerState = _extends({}, props, {
    color,
    variant,
    size
  });
  const classes = useUtilityClasses(ownerState);
  const externalForwardedProps = _extends({}, other, {
    component,
    slots,
    slotProps
  });
  const [SlotRoot, rootProps] = useSlot("root", {
    ref,
    className: clsx_m_default(classes.root, className),
    elementType: AlertRoot,
    externalForwardedProps,
    ownerState,
    additionalProps: {
      role
    }
  });
  const [SlotStartDecorator, startDecoratorProps] = useSlot("startDecorator", {
    className: classes.startDecorator,
    elementType: AlertStartDecorator,
    externalForwardedProps,
    ownerState
  });
  const [SlotEndDecorator, endDecoratorProps] = useSlot("endDecorator", {
    className: classes.endDecorator,
    elementType: AlertEndDecorator,
    externalForwardedProps,
    ownerState
  });
  const result = (0, import_jsx_runtime3.jsxs)(React2.Fragment, {
    children: [startDecorator && (0, import_jsx_runtime2.jsx)(SlotStartDecorator, _extends({}, startDecoratorProps, {
      children: startDecorator
    })), children, endDecorator && (0, import_jsx_runtime2.jsx)(SlotEndDecorator, _extends({}, endDecoratorProps, {
      children: endDecorator
    }))]
  });
  return (0, import_jsx_runtime2.jsx)(SlotRoot, _extends({}, rootProps, {
    children: invertedColors ? (0, import_jsx_runtime2.jsx)(ColorInversionProvider, {
      variant,
      children: result
    }) : result
  }));
});
true ? Alert.propTypes = {
  children: import_prop_types.default.node,
  className: import_prop_types.default.string,
  color: import_prop_types.default.oneOfType([import_prop_types.default.oneOf(["danger", "info", "neutral", "primary", "success", "warning"]), import_prop_types.default.string]),
  component: import_prop_types.default.elementType,
  endDecorator: import_prop_types.default.node,
  invertedColors: import_prop_types.default.bool,
  role: import_prop_types.default.string,
  size: import_prop_types.default.oneOfType([import_prop_types.default.oneOf(["sm", "md", "lg"]), import_prop_types.default.string]),
  slotProps: import_prop_types.default.shape({
    endDecorator: import_prop_types.default.oneOfType([import_prop_types.default.func, import_prop_types.default.object]),
    root: import_prop_types.default.oneOfType([import_prop_types.default.func, import_prop_types.default.object]),
    startDecorator: import_prop_types.default.oneOfType([import_prop_types.default.func, import_prop_types.default.object])
  }),
  slots: import_prop_types.default.shape({
    endDecorator: import_prop_types.default.elementType,
    root: import_prop_types.default.elementType,
    startDecorator: import_prop_types.default.elementType
  }),
  startDecorator: import_prop_types.default.node,
  sx: import_prop_types.default.oneOfType([import_prop_types.default.arrayOf(import_prop_types.default.oneOfType([import_prop_types.default.func, import_prop_types.default.object, import_prop_types.default.bool])), import_prop_types.default.func, import_prop_types.default.object]),
  variant: import_prop_types.default.oneOfType([import_prop_types.default.oneOf(["outlined", "plain", "soft", "solid"]), import_prop_types.default.string])
} : void 0;
var Alert_default = Alert;

// node_modules/@mui/joy/AspectRatio/AspectRatio.js
init_extends();
init_objectWithoutPropertiesLoose();
var React3 = __toESM(require_react());
var import_prop_types2 = __toESM(require_prop_types());
init_base();
init_esm();

// node_modules/@mui/joy/AspectRatio/aspectRatioClasses.js
function getAspectRatioUtilityClass(slot) {
  return generateUtilityClass2("MuiAspectRatio", slot);
}
var aspectRatioClasses = generateUtilityClasses2("MuiAspectRatio", ["root", "content", "colorPrimary", "colorNeutral", "colorDanger", "colorInfo", "colorSuccess", "colorWarning", "colorContext", "variantPlain", "variantOutlined", "variantSoft", "variantSolid"]);
var aspectRatioClasses_default = aspectRatioClasses;

// node_modules/@mui/joy/AspectRatio/AspectRatio.js
var import_jsx_runtime4 = __toESM(require_jsx_runtime());
var _excluded2 = ["children", "ratio", "minHeight", "maxHeight", "objectFit", "color", "variant", "component", "slots", "slotProps"];
var useUtilityClasses2 = (ownerState) => {
  const {
    variant,
    color
  } = ownerState;
  const slots = {
    root: ["root"],
    content: ["content", variant && `variant${capitalize(variant)}`, color && `color${capitalize(color)}`]
  };
  return composeClasses(slots, getAspectRatioUtilityClass, {});
};
var AspectRatioRoot = styled_default("div", {
  name: "JoyAspectRatio",
  slot: "Root",
  overridesResolver: (props, styles) => styles.root
})(({
  ownerState
}) => {
  const minHeight = typeof ownerState.minHeight === "number" ? `${ownerState.minHeight}px` : ownerState.minHeight;
  const maxHeight = typeof ownerState.maxHeight === "number" ? `${ownerState.maxHeight}px` : ownerState.maxHeight;
  return {
    "--AspectRatio-paddingBottom": minHeight || maxHeight ? `clamp(${minHeight || "0px"}, calc(100% / (${ownerState.ratio})), ${maxHeight || "9999px"})` : `calc(100% / (${ownerState.ratio}))`,
    borderRadius: "var(--AspectRatio-radius)",
    flexDirection: "column",
    margin: "var(--AspectRatio-margin)"
  };
});
var AspectRatioContent = styled_default("div", {
  name: "JoyAspectRatio",
  slot: "Content",
  overridesResolver: (props, styles) => styles.content
})(({
  theme,
  ownerState
}) => {
  var _theme$variants;
  return [{
    flex: 1,
    position: "relative",
    borderRadius: "inherit",
    height: 0,
    paddingBottom: "calc(var(--AspectRatio-paddingBottom) - 2 * var(--variant-borderWidth, 0px))",
    overflow: "hidden",
    "& [data-first-child]": {
      display: "flex",
      justifyContent: "center",
      alignItems: "center",
      boxSizing: "border-box",
      position: "absolute",
      width: "100%",
      height: "100%",
      objectFit: ownerState.objectFit,
      margin: 0,
      padding: 0,
      "& > img": {
        width: "100%",
        height: "100%",
        objectFit: ownerState.objectFit
      }
    }
  }, (_theme$variants = theme.variants[ownerState.variant]) == null ? void 0 : _theme$variants[ownerState.color]];
});
var AspectRatio = React3.forwardRef(function AspectRatio2(inProps, ref) {
  const props = useThemeProps({
    props: inProps,
    name: "JoyAspectRatio"
  });
  const {
    children,
    ratio = "16 / 9",
    minHeight,
    maxHeight,
    objectFit = "cover",
    color: colorProp = "neutral",
    variant = "soft",
    component,
    slots = {},
    slotProps = {}
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded2);
  const {
    getColor
  } = useColorInversion(variant);
  const color = getColor(inProps.color, colorProp);
  const ownerState = _extends({}, props, {
    minHeight,
    maxHeight,
    objectFit,
    ratio,
    color,
    variant
  });
  const classes = useUtilityClasses2(ownerState);
  const externalForwardedProps = _extends({}, other, {
    component,
    slots,
    slotProps
  });
  const [SlotRoot, rootProps] = useSlot("root", {
    ref,
    className: classes.root,
    elementType: AspectRatioRoot,
    externalForwardedProps,
    ownerState
  });
  const [SlotContent, contentProps] = useSlot("content", {
    className: classes.content,
    elementType: AspectRatioContent,
    externalForwardedProps,
    ownerState
  });
  return (0, import_jsx_runtime4.jsx)(SlotRoot, _extends({}, rootProps, {
    children: (0, import_jsx_runtime4.jsx)(SlotContent, _extends({}, contentProps, {
      children: React3.Children.map(children, (child, index) => index === 0 && React3.isValidElement(child) ? React3.cloneElement(child, {
        "data-first-child": ""
      }) : child)
    }))
  }));
});
true ? AspectRatio.propTypes = {
  children: import_prop_types2.default.node,
  color: import_prop_types2.default.oneOf(["danger", "info", "neutral", "primary", "success", "warning"]),
  component: import_prop_types2.default.elementType,
  maxHeight: import_prop_types2.default.oneOfType([import_prop_types2.default.number, import_prop_types2.default.string]),
  minHeight: import_prop_types2.default.oneOfType([import_prop_types2.default.number, import_prop_types2.default.string]),
  objectFit: import_prop_types2.default.oneOf(["-moz-initial", "contain", "cover", "fill", "inherit", "initial", "none", "revert-layer", "revert", "scale-down", "unset"]),
  ratio: import_prop_types2.default.oneOfType([import_prop_types2.default.number, import_prop_types2.default.string]),
  slotProps: import_prop_types2.default.shape({
    content: import_prop_types2.default.oneOfType([import_prop_types2.default.func, import_prop_types2.default.object]),
    root: import_prop_types2.default.oneOfType([import_prop_types2.default.func, import_prop_types2.default.object])
  }),
  slots: import_prop_types2.default.shape({
    content: import_prop_types2.default.elementType,
    root: import_prop_types2.default.elementType
  }),
  sx: import_prop_types2.default.oneOfType([import_prop_types2.default.arrayOf(import_prop_types2.default.oneOfType([import_prop_types2.default.func, import_prop_types2.default.object, import_prop_types2.default.bool])), import_prop_types2.default.func, import_prop_types2.default.object]),
  variant: import_prop_types2.default.oneOfType([import_prop_types2.default.oneOf(["outlined", "plain", "soft", "solid"]), import_prop_types2.default.string])
} : void 0;
var AspectRatio_default = AspectRatio;

// node_modules/@mui/joy/Autocomplete/index.js
init_useAutocomplete();

// node_modules/@mui/joy/Autocomplete/Autocomplete.js
init_objectWithoutPropertiesLoose();
init_extends();
var React28 = __toESM(require_react());
var import_prop_types13 = __toESM(require_prop_types());
init_clsx_m();
init_esm();
init_composeClasses();
init_useAutocomplete();
init_Popper();

// node_modules/@mui/joy/internal/svg-icons/Close.js
var React6 = __toESM(require_react());

// node_modules/@mui/joy/utils/createSvgIcon.js
init_extends();
var React5 = __toESM(require_react());

// node_modules/@mui/joy/SvgIcon/SvgIcon.js
init_objectWithoutPropertiesLoose();
init_extends();
init_base();
init_esm();
init_clsx_m();
var import_prop_types3 = __toESM(require_prop_types());
var React4 = __toESM(require_react());

// node_modules/@mui/joy/SvgIcon/svgIconClasses.js
function getSvgIconUtilityClass(slot) {
  return generateUtilityClass2("MuiSvgIcon", slot);
}
var svgIconClasses = generateUtilityClasses2("MuiSvgIcon", ["root", "colorInherit", "colorPrimary", "colorNeutral", "colorDanger", "colorInfo", "colorSuccess", "colorWarning", "fontSizeInherit", "fontSizeXs", "fontSizeSm", "fontSizeMd", "fontSizeLg", "fontSizeXl", "fontSizeXl2", "fontSizeXl3", "fontSizeXl4", "fontSizeXl5", "fontSizeXl6"]);
var svgIconClasses_default = svgIconClasses;

// node_modules/@mui/joy/SvgIcon/SvgIcon.js
var import_jsx_runtime5 = __toESM(require_jsx_runtime());
var import_jsx_runtime6 = __toESM(require_jsx_runtime());
var _excluded3 = ["children", "className", "color", "component", "fontSize", "htmlColor", "inheritViewBox", "titleAccess", "viewBox", "slots", "slotProps"];
var useUtilityClasses3 = (ownerState) => {
  const {
    color,
    fontSize
  } = ownerState;
  const slots = {
    root: ["root", color && `color${capitalize(color)}`, fontSize && `fontSize${capitalize(fontSize)}`]
  };
  return composeClasses(slots, getSvgIconUtilityClass, {});
};
var SvgIconRoot = styled_default("svg", {
  name: "JoySvgIcon",
  slot: "Root",
  overridesResolver: (props, styles) => styles.root
})(({
  theme,
  ownerState
}) => {
  var _theme$variants$plain, _theme$variants$plain2;
  return _extends({}, ownerState.instanceFontSize && ownerState.instanceFontSize !== "inherit" && {
    "--Icon-fontSize": theme.vars.fontSize[ownerState.instanceFontSize]
  }, {
    userSelect: "none",
    margin: "var(--Icon-margin)",
    width: "1em",
    height: "1em",
    display: "inline-block",
    fill: "currentColor",
    flexShrink: 0
  }, ownerState.fontSize && ownerState.fontSize !== "inherit" && {
    fontSize: `var(--Icon-fontSize, ${theme.fontSize[ownerState.fontSize]})`
  }, {
    color: "var(--Icon-color)"
  }, ownerState.color !== "inherit" && ownerState.color !== "context" && theme.vars.palette[ownerState.color] && {
    color: theme.vars.palette[ownerState.color].plainColor
  }, ownerState.color === "context" && {
    color: (_theme$variants$plain = theme.variants.plain) == null ? void 0 : (_theme$variants$plain2 = _theme$variants$plain[ownerState.color]) == null ? void 0 : _theme$variants$plain2.color
  });
});
var SvgIcon = React4.forwardRef(function SvgIcon2(inProps, ref) {
  const props = useThemeProps({
    props: inProps,
    name: "JoySvgIcon"
  });
  const {
    children,
    className,
    color = "inherit",
    component = "svg",
    fontSize = "xl",
    htmlColor,
    inheritViewBox = false,
    titleAccess,
    viewBox = "0 0 24 24",
    slots = {},
    slotProps = {}
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded3);
  const ownerState = _extends({}, props, {
    color,
    component,
    fontSize,
    instanceFontSize: inProps.fontSize,
    inheritViewBox,
    viewBox
  });
  const classes = useUtilityClasses3(ownerState);
  const externalForwardedProps = _extends({}, other, {
    component,
    slots,
    slotProps
  });
  const [SlotRoot, rootProps] = useSlot("root", {
    ref,
    className: clsx_m_default(classes.root, className),
    elementType: SvgIconRoot,
    externalForwardedProps,
    ownerState,
    additionalProps: _extends({
      color: htmlColor,
      focusable: false
    }, titleAccess && {
      role: "img"
    }, !titleAccess && {
      "aria-hidden": true
    }, !inheritViewBox && {
      viewBox
    })
  });
  return (0, import_jsx_runtime6.jsxs)(SlotRoot, _extends({}, rootProps, {
    children: [children, titleAccess ? (0, import_jsx_runtime5.jsx)("title", {
      children: titleAccess
    }) : null]
  }));
});
true ? SvgIcon.propTypes = {
  children: import_prop_types3.default.node,
  className: import_prop_types3.default.string,
  color: import_prop_types3.default.oneOfType([import_prop_types3.default.oneOf(["danger", "info", "inherit", "neutral", "primary", "success", "warning"]), import_prop_types3.default.string]),
  component: import_prop_types3.default.elementType,
  fontSize: import_prop_types3.default.oneOf(["inherit", "lg", "md", "sm", "xl", "xl2", "xl3", "xl4", "xl5", "xl6", "xl7", "xs", "xs2", "xs3"]),
  htmlColor: import_prop_types3.default.string,
  inheritViewBox: import_prop_types3.default.bool,
  shapeRendering: import_prop_types3.default.string,
  slotProps: import_prop_types3.default.shape({
    root: import_prop_types3.default.oneOfType([import_prop_types3.default.func, import_prop_types3.default.object])
  }),
  slots: import_prop_types3.default.shape({
    root: import_prop_types3.default.elementType
  }),
  sx: import_prop_types3.default.oneOfType([import_prop_types3.default.arrayOf(import_prop_types3.default.oneOfType([import_prop_types3.default.func, import_prop_types3.default.object, import_prop_types3.default.bool])), import_prop_types3.default.func, import_prop_types3.default.object]),
  titleAccess: import_prop_types3.default.string,
  viewBox: import_prop_types3.default.string
} : void 0;
var SvgIcon_default = SvgIcon;

// node_modules/@mui/joy/utils/createSvgIcon.js
var import_jsx_runtime7 = __toESM(require_jsx_runtime());
function createSvgIcon(path, displayName) {
  function Component(props, ref) {
    return (0, import_jsx_runtime7.jsx)(SvgIcon_default, _extends({
      "data-testid": `${displayName}Icon`,
      ref
    }, props, {
      children: path
    }));
  }
  if (true) {
    Component.displayName = `${displayName}Icon`;
  }
  Component.muiName = SvgIcon_default.muiName;
  return React5.memo(React5.forwardRef(Component));
}

// node_modules/@mui/joy/internal/svg-icons/Close.js
var import_jsx_runtime8 = __toESM(require_jsx_runtime());
var Close_default = createSvgIcon((0, import_jsx_runtime8.jsx)("path", {
  d: "M19 6.41 17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z"
}), "Close");

// node_modules/@mui/joy/internal/svg-icons/ArrowDropDown.js
var React7 = __toESM(require_react());
var import_jsx_runtime9 = __toESM(require_jsx_runtime());
var ArrowDropDown_default = createSvgIcon((0, import_jsx_runtime9.jsx)("path", {
  d: "M7 10l5 5 5-5z"
}), "ArrowDropDown");

// node_modules/@mui/joy/IconButton/IconButton.js
init_objectWithoutPropertiesLoose();
init_extends();
var React8 = __toESM(require_react());
var import_prop_types4 = __toESM(require_prop_types());
init_esm();
init_useButton();
init_composeClasses();

// node_modules/@mui/joy/IconButton/iconButtonClasses.js
function getIconButtonUtilityClass(slot) {
  return generateUtilityClass2("MuiIconButton", slot);
}
var iconButtonClasses = generateUtilityClasses2("MuiIconButton", ["root", "colorPrimary", "colorNeutral", "colorDanger", "colorInfo", "colorSuccess", "colorWarning", "colorContext", "variantPlain", "variantOutlined", "variantSoft", "variantSolid", "focusVisible", "disabled", "sizeSm", "sizeMd", "sizeLg"]);
var iconButtonClasses_default = iconButtonClasses;

// node_modules/@mui/joy/IconButton/IconButton.js
var import_jsx_runtime10 = __toESM(require_jsx_runtime());
var _excluded4 = ["children", "action", "component", "color", "variant", "size", "slots", "slotProps"];
var useUtilityClasses4 = (ownerState) => {
  const {
    color,
    disabled,
    focusVisible,
    focusVisibleClassName,
    size,
    variant
  } = ownerState;
  const slots = {
    root: ["root", disabled && "disabled", focusVisible && "focusVisible", variant && `variant${capitalize(variant)}`, color && `color${capitalize(color)}`, size && `size${capitalize(size)}`]
  };
  const composedClasses = composeClasses(slots, getIconButtonUtilityClass, {});
  if (focusVisible && focusVisibleClassName) {
    composedClasses.root += ` ${focusVisibleClassName}`;
  }
  return composedClasses;
};
var StyledIconButton = styled_default("button")(({
  theme,
  ownerState
}) => {
  var _theme$variants, _theme$variants2, _theme$variants3, _theme$variants4;
  return [_extends({
    "--Icon-margin": "initial"
  }, ownerState.instanceSize && {
    "--IconButton-size": {
      sm: "2rem",
      md: "2.5rem",
      lg: "3rem"
    }[ownerState.instanceSize]
  }, ownerState.size === "sm" && {
    "--Icon-fontSize": "calc(var(--IconButton-size, 2rem) / 1.6)",
    "--CircularProgress-size": "20px",
    minWidth: "var(--IconButton-size, 2rem)",
    minHeight: "var(--IconButton-size, 2rem)",
    fontSize: theme.vars.fontSize.sm,
    paddingInline: "2px"
  }, ownerState.size === "md" && {
    "--Icon-fontSize": "calc(var(--IconButton-size, 2.5rem) / 1.667)",
    "--CircularProgress-size": "24px",
    minWidth: "var(--IconButton-size, 2.5rem)",
    minHeight: "var(--IconButton-size, 2.5rem)",
    fontSize: theme.vars.fontSize.md,
    paddingInline: "0.25rem"
  }, ownerState.size === "lg" && {
    "--Icon-fontSize": "calc(var(--IconButton-size, 3rem) / 1.714)",
    "--CircularProgress-size": "28px",
    minWidth: "var(--IconButton-size, 3rem)",
    minHeight: "var(--IconButton-size, 3rem)",
    fontSize: theme.vars.fontSize.lg,
    paddingInline: "0.375rem"
  }, {
    WebkitTapHighlightColor: "transparent",
    paddingBlock: 0,
    fontFamily: theme.vars.fontFamily.body,
    fontWeight: theme.vars.fontWeight.md,
    margin: `var(--IconButton-margin)`,
    borderRadius: `var(--IconButton-radius, ${theme.vars.radius.sm})`,
    border: "none",
    boxSizing: "border-box",
    backgroundColor: "transparent",
    cursor: "pointer",
    display: "inline-flex",
    alignItems: "center",
    justifyContent: "center",
    position: "relative",
    [theme.focus.selector]: theme.focus.default
  }), (_theme$variants = theme.variants[ownerState.variant]) == null ? void 0 : _theme$variants[ownerState.color], {
    "&:hover": (_theme$variants2 = theme.variants[`${ownerState.variant}Hover`]) == null ? void 0 : _theme$variants2[ownerState.color]
  }, {
    "&:active": (_theme$variants3 = theme.variants[`${ownerState.variant}Active`]) == null ? void 0 : _theme$variants3[ownerState.color]
  }, {
    [`&.${iconButtonClasses_default.disabled}`]: (_theme$variants4 = theme.variants[`${ownerState.variant}Disabled`]) == null ? void 0 : _theme$variants4[ownerState.color]
  }];
});
var IconButtonRoot = styled_default(StyledIconButton, {
  name: "JoyIconButton",
  slot: "Root",
  overridesResolver: (props, styles) => styles.root
})({});
var IconButton = React8.forwardRef(function IconButton2(inProps, ref) {
  const props = useThemeProps({
    props: inProps,
    name: "JoyIconButton"
  });
  const {
    children,
    action,
    component = "button",
    color: colorProp = "primary",
    variant = "soft",
    size = "md",
    slots = {},
    slotProps = {}
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded4);
  const {
    getColor
  } = useColorInversion(variant);
  const color = getColor(inProps.color, colorProp);
  const buttonRef = React8.useRef(null);
  const handleRef = useForkRef(buttonRef, ref);
  const {
    focusVisible,
    setFocusVisible,
    getRootProps
  } = useButton(_extends({}, props, {
    rootRef: handleRef
  }));
  React8.useImperativeHandle(action, () => ({
    focusVisible: () => {
      var _buttonRef$current;
      setFocusVisible(true);
      (_buttonRef$current = buttonRef.current) == null ? void 0 : _buttonRef$current.focus();
    }
  }), [setFocusVisible]);
  const ownerState = _extends({}, props, {
    component,
    color,
    variant,
    size,
    focusVisible,
    instanceSize: inProps.size
  });
  const classes = useUtilityClasses4(ownerState);
  const externalForwardedProps = _extends({}, other, {
    component,
    slots,
    slotProps
  });
  const [SlotRoot, rootProps] = useSlot("root", {
    ref,
    className: classes.root,
    elementType: IconButtonRoot,
    getSlotProps: getRootProps,
    externalForwardedProps,
    ownerState
  });
  return (0, import_jsx_runtime10.jsx)(SlotRoot, _extends({}, rootProps, {
    children
  }));
});
true ? IconButton.propTypes = {
  action: import_prop_types4.default.oneOfType([import_prop_types4.default.func, import_prop_types4.default.shape({
    current: import_prop_types4.default.shape({
      focusVisible: import_prop_types4.default.func.isRequired
    })
  })]),
  children: import_prop_types4.default.node,
  color: import_prop_types4.default.oneOfType([import_prop_types4.default.oneOf(["danger", "info", "neutral", "primary", "success", "warning"]), import_prop_types4.default.string]),
  component: import_prop_types4.default.elementType,
  disabled: import_prop_types4.default.bool,
  focusVisibleClassName: import_prop_types4.default.string,
  size: import_prop_types4.default.oneOfType([import_prop_types4.default.oneOf(["sm", "md", "lg"]), import_prop_types4.default.string]),
  slotProps: import_prop_types4.default.shape({
    root: import_prop_types4.default.oneOfType([import_prop_types4.default.func, import_prop_types4.default.object])
  }),
  slots: import_prop_types4.default.shape({
    root: import_prop_types4.default.elementType
  }),
  sx: import_prop_types4.default.oneOfType([import_prop_types4.default.arrayOf(import_prop_types4.default.oneOfType([import_prop_types4.default.func, import_prop_types4.default.object, import_prop_types4.default.bool])), import_prop_types4.default.func, import_prop_types4.default.object]),
  tabIndex: import_prop_types4.default.number,
  variant: import_prop_types4.default.oneOfType([import_prop_types4.default.oneOf(["outlined", "plain", "soft", "solid"]), import_prop_types4.default.string])
} : void 0;
var IconButton_default = IconButton;

// node_modules/@mui/joy/Chip/Chip.js
init_objectWithoutPropertiesLoose();
init_extends();
var React10 = __toESM(require_react());
init_clsx_m();
var import_prop_types5 = __toESM(require_prop_types());
init_base();
init_useButton();
init_esm();

// node_modules/@mui/joy/Chip/chipClasses.js
function getChipUtilityClass(slot) {
  return generateUtilityClass2("MuiChip", slot);
}
var chipClasses = generateUtilityClasses2("MuiChip", ["root", "clickable", "colorPrimary", "colorNeutral", "colorDanger", "colorInfo", "colorSuccess", "colorWarning", "colorContext", "disabled", "endDecorator", "focusVisible", "label", "labelSm", "labelMd", "labelLg", "sizeSm", "sizeMd", "sizeLg", "startDecorator", "variantPlain", "variantSolid", "variantSoft", "variantOutlined"]);
var chipClasses_default = chipClasses;

// node_modules/@mui/joy/Chip/ChipContext.js
var React9 = __toESM(require_react());
var ChipColorContext = React9.createContext({
  disabled: void 0,
  variant: void 0,
  color: void 0
});
var ChipContext_default = ChipColorContext;

// node_modules/@mui/joy/Chip/Chip.js
var import_jsx_runtime11 = __toESM(require_jsx_runtime());
var import_jsx_runtime12 = __toESM(require_jsx_runtime());
var _excluded5 = ["children", "className", "color", "onClick", "disabled", "size", "variant", "startDecorator", "endDecorator", "component", "slots", "slotProps"];
var useUtilityClasses5 = (ownerState) => {
  const {
    disabled,
    size,
    color,
    clickable,
    variant,
    focusVisible
  } = ownerState;
  const slots = {
    root: ["root", disabled && "disabled", color && `color${capitalize(color)}`, size && `size${capitalize(size)}`, variant && `variant${capitalize(variant)}`, clickable && "clickable"],
    action: ["action", disabled && "disabled", focusVisible && "focusVisible"],
    label: ["label", size && `label${capitalize(size)}`],
    startDecorator: ["startDecorator"],
    endDecorator: ["endDecorator"]
  };
  return composeClasses(slots, getChipUtilityClass, {});
};
var ChipRoot = styled_default("div", {
  name: "JoyChip",
  slot: "Root",
  overridesResolver: (props, styles) => styles.root
})(({
  theme,
  ownerState
}) => {
  var _theme$variants, _theme$variants2, _theme$variants3, _theme$variants4, _theme$variants5, _theme$variants6;
  return [_extends({
    "--Chip-decoratorChildOffset": "min(calc(var(--Chip-paddingInline) - (var(--_Chip-minHeight) - 2 * var(--variant-borderWidth, 0px) - var(--Chip-decoratorChildHeight)) / 2), var(--Chip-paddingInline))",
    "--Chip-decoratorChildRadius": "max(var(--_Chip-radius) - var(--variant-borderWidth, 0px) - var(--_Chip-paddingBlock), min(var(--_Chip-paddingBlock) + var(--variant-borderWidth, 0px), var(--_Chip-radius) / 2))",
    "--Chip-deleteRadius": "var(--Chip-decoratorChildRadius)",
    "--Chip-deleteSize": "var(--Chip-decoratorChildHeight)",
    "--Avatar-radius": "var(--Chip-decoratorChildRadius)",
    "--Avatar-size": "var(--Chip-decoratorChildHeight)",
    "--Icon-margin": "initial",
    "--unstable_actionRadius": "var(--_Chip-radius)"
  }, ownerState.size === "sm" && {
    "--Chip-gap": "0.25rem",
    "--Chip-paddingInline": "0.5rem",
    "--Chip-decoratorChildHeight": "calc(min(1.125rem, var(--_Chip-minHeight)) - 2 * var(--variant-borderWidth, 0px))",
    "--Icon-fontSize": "calc(var(--_Chip-minHeight) / 1.714)",
    "--_Chip-minHeight": "var(--Chip-minHeight, 1.5rem)",
    fontSize: theme.vars.fontSize.xs
  }, ownerState.size === "md" && {
    "--Chip-gap": "0.375rem",
    "--Chip-paddingInline": "0.75rem",
    "--Chip-decoratorChildHeight": "min(1.375rem, var(--_Chip-minHeight))",
    "--Icon-fontSize": "calc(var(--_Chip-minHeight) / 1.778)",
    "--_Chip-minHeight": "var(--Chip-minHeight, 2rem)",
    fontSize: theme.vars.fontSize.sm
  }, ownerState.size === "lg" && {
    "--Chip-gap": "0.5rem",
    "--Chip-paddingInline": "1rem",
    "--Chip-decoratorChildHeight": "min(1.75rem, var(--_Chip-minHeight))",
    "--Icon-fontSize": "calc(var(--_Chip-minHeight) / 2)",
    "--_Chip-minHeight": "var(--Chip-minHeight, 2.5rem)",
    fontSize: theme.vars.fontSize.md
  }, {
    "--_Chip-radius": "var(--Chip-radius, 1.5rem)",
    "--_Chip-paddingBlock": "max((var(--_Chip-minHeight) - 2 * var(--variant-borderWidth, 0px) - var(--Chip-decoratorChildHeight)) / 2, 0px)",
    minHeight: "var(--_Chip-minHeight)",
    paddingInline: "var(--Chip-paddingInline)",
    borderRadius: "var(--_Chip-radius)",
    position: "relative",
    fontWeight: theme.vars.fontWeight.md,
    fontFamily: theme.vars.fontFamily.body,
    display: "inline-flex",
    alignItems: "center",
    justifyContent: "center",
    whiteSpace: "nowrap",
    textDecoration: "none",
    verticalAlign: "middle",
    boxSizing: "border-box",
    [`&.${chipClasses_default.disabled}`]: {
      color: (_theme$variants = theme.variants[`${ownerState.variant}Disabled`]) == null ? void 0 : (_theme$variants2 = _theme$variants[ownerState.color]) == null ? void 0 : _theme$variants2.color
    }
  }), ...!ownerState.clickable ? [(_theme$variants3 = theme.variants[ownerState.variant]) == null ? void 0 : _theme$variants3[ownerState.color], {
    [`&.${chipClasses_default.disabled}`]: (_theme$variants4 = theme.variants[`${ownerState.variant}Disabled`]) == null ? void 0 : _theme$variants4[ownerState.color]
  }] : [{
    "--variant-borderWidth": "0px",
    color: (_theme$variants5 = theme.variants[ownerState.variant]) == null ? void 0 : (_theme$variants6 = _theme$variants5[ownerState.color]) == null ? void 0 : _theme$variants6.color
  }]];
});
var ChipLabel = styled_default("span", {
  name: "JoyChip",
  slot: "Label",
  overridesResolver: (props, styles) => styles.label
})(({
  ownerState
}) => _extends({
  display: "inline-block",
  overflow: "hidden",
  textOverflow: "ellipsis",
  order: 1,
  minInlineSize: 0,
  flexGrow: 1
}, ownerState.clickable && {
  zIndex: 1,
  pointerEvents: "none"
}));
var ChipAction = styled_default("button", {
  name: "JoyChip",
  slot: "Action",
  overridesResolver: (props, styles) => styles.action
})(({
  theme,
  ownerState
}) => {
  var _theme$variants7, _theme$variants8, _theme$variants9, _theme$variants10;
  return [{
    position: "absolute",
    zIndex: 0,
    top: 0,
    left: 0,
    bottom: 0,
    right: 0,
    width: "100%",
    border: "none",
    cursor: "pointer",
    padding: "initial",
    margin: "initial",
    backgroundColor: "initial",
    textDecoration: "none",
    borderRadius: "inherit",
    [theme.focus.selector]: theme.focus.default
  }, (_theme$variants7 = theme.variants[ownerState.variant]) == null ? void 0 : _theme$variants7[ownerState.color], {
    "&:hover": (_theme$variants8 = theme.variants[`${ownerState.variant}Hover`]) == null ? void 0 : _theme$variants8[ownerState.color]
  }, {
    "&:active": (_theme$variants9 = theme.variants[`${ownerState.variant}Active`]) == null ? void 0 : _theme$variants9[ownerState.color]
  }, {
    [`&.${chipClasses_default.disabled}`]: (_theme$variants10 = theme.variants[`${ownerState.variant}Disabled`]) == null ? void 0 : _theme$variants10[ownerState.color]
  }];
});
var ChipStartDecorator = styled_default("span", {
  name: "JoyChip",
  slot: "StartDecorator",
  overridesResolver: (props, styles) => styles.startDecorator
})({
  "--Avatar-marginInlineStart": "calc(var(--Chip-decoratorChildOffset) * -1)",
  "--Chip-deleteMargin": "0 0 0 calc(var(--Chip-decoratorChildOffset) * -1)",
  "--Icon-margin": "0 0 0 calc(var(--Chip-paddingInline) / -4)",
  display: "inherit",
  marginInlineEnd: "var(--Chip-gap)",
  order: 0,
  zIndex: 1,
  pointerEvents: "none"
});
var ChipEndDecorator = styled_default("span", {
  name: "JoyChip",
  slot: "EndDecorator",
  overridesResolver: (props, styles) => styles.endDecorator
})({
  "--Chip-deleteMargin": "0 calc(var(--Chip-decoratorChildOffset) * -1) 0 0",
  "--Icon-margin": "0 calc(var(--Chip-paddingInline) / -4) 0 0",
  display: "inherit",
  marginInlineStart: "var(--Chip-gap)",
  order: 2,
  zIndex: 1,
  pointerEvents: "none"
});
var Chip = React10.forwardRef(function Chip2(inProps, ref) {
  const props = useThemeProps({
    props: inProps,
    name: "JoyChip"
  });
  const {
    children,
    className,
    color: colorProp = "primary",
    onClick,
    disabled = false,
    size = "md",
    variant = "solid",
    startDecorator,
    endDecorator,
    component,
    slots = {},
    slotProps = {}
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded5);
  const {
    getColor
  } = useColorInversion(variant);
  const color = getColor(inProps.color, colorProp);
  const clickable = !!onClick || !!slotProps.action;
  const ownerState = _extends({}, props, {
    disabled,
    size,
    color,
    variant,
    clickable,
    focusVisible: false
  });
  const resolvedActionProps = typeof slotProps.action === "function" ? slotProps.action(ownerState) : slotProps.action;
  const actionRef = React10.useRef(null);
  const {
    focusVisible,
    getRootProps
  } = useButton(_extends({}, resolvedActionProps, {
    disabled,
    rootRef: actionRef
  }));
  ownerState.focusVisible = focusVisible;
  const classes = useUtilityClasses5(ownerState);
  const externalForwardedProps = _extends({}, other, {
    component,
    slots,
    slotProps
  });
  const [SlotRoot, rootProps] = useSlot("root", {
    ref,
    className: clsx_m_default(classes.root, className),
    elementType: ChipRoot,
    externalForwardedProps,
    ownerState
  });
  const [SlotLabel, labelProps] = useSlot("label", {
    className: classes.label,
    elementType: ChipLabel,
    externalForwardedProps,
    ownerState
  });
  const id = useId(labelProps.id);
  const [SlotAction, actionProps] = useSlot("action", {
    className: classes.action,
    elementType: ChipAction,
    externalForwardedProps,
    ownerState,
    getSlotProps: getRootProps,
    additionalProps: {
      "aria-labelledby": id,
      as: resolvedActionProps == null ? void 0 : resolvedActionProps.component,
      onClick
    }
  });
  const [SlotStartDecorator, startDecoratorProps] = useSlot("startDecorator", {
    className: classes.startDecorator,
    elementType: ChipStartDecorator,
    externalForwardedProps,
    ownerState
  });
  const [SlotEndDecorator, endDecoratorProps] = useSlot("endDecorator", {
    className: classes.endDecorator,
    elementType: ChipEndDecorator,
    externalForwardedProps,
    ownerState
  });
  const chipContextValue = React10.useMemo(() => ({
    disabled,
    variant,
    color: color === "context" ? void 0 : color
  }), [color, disabled, variant]);
  return (0, import_jsx_runtime11.jsx)(ChipContext_default.Provider, {
    value: chipContextValue,
    children: (0, import_jsx_runtime12.jsxs)(SlotRoot, _extends({}, rootProps, {
      children: [clickable && (0, import_jsx_runtime11.jsx)(SlotAction, _extends({}, actionProps)), (0, import_jsx_runtime11.jsx)(SlotLabel, _extends({}, labelProps, {
        id,
        children
      })), startDecorator && (0, import_jsx_runtime11.jsx)(SlotStartDecorator, _extends({}, startDecoratorProps, {
        children: startDecorator
      })), endDecorator && (0, import_jsx_runtime11.jsx)(SlotEndDecorator, _extends({}, endDecoratorProps, {
        children: endDecorator
      }))]
    }))
  });
});
true ? Chip.propTypes = {
  children: import_prop_types5.default.node,
  className: import_prop_types5.default.string,
  color: import_prop_types5.default.oneOfType([import_prop_types5.default.oneOf(["danger", "info", "neutral", "primary", "success", "warning"]), import_prop_types5.default.string]),
  component: import_prop_types5.default.elementType,
  disabled: import_prop_types5.default.bool,
  endDecorator: import_prop_types5.default.node,
  onClick: import_prop_types5.default.func,
  size: import_prop_types5.default.oneOfType([import_prop_types5.default.oneOf(["lg", "md", "sm"]), import_prop_types5.default.string]),
  slotProps: import_prop_types5.default.shape({
    action: import_prop_types5.default.oneOfType([import_prop_types5.default.func, import_prop_types5.default.object]),
    endDecorator: import_prop_types5.default.oneOfType([import_prop_types5.default.func, import_prop_types5.default.object]),
    label: import_prop_types5.default.oneOfType([import_prop_types5.default.func, import_prop_types5.default.object]),
    root: import_prop_types5.default.oneOfType([import_prop_types5.default.func, import_prop_types5.default.object]),
    startDecorator: import_prop_types5.default.oneOfType([import_prop_types5.default.func, import_prop_types5.default.object])
  }),
  slots: import_prop_types5.default.shape({
    action: import_prop_types5.default.elementType,
    endDecorator: import_prop_types5.default.elementType,
    label: import_prop_types5.default.elementType,
    root: import_prop_types5.default.elementType,
    startDecorator: import_prop_types5.default.elementType
  }),
  startDecorator: import_prop_types5.default.node,
  sx: import_prop_types5.default.oneOfType([import_prop_types5.default.arrayOf(import_prop_types5.default.oneOfType([import_prop_types5.default.func, import_prop_types5.default.object, import_prop_types5.default.bool])), import_prop_types5.default.func, import_prop_types5.default.object]),
  variant: import_prop_types5.default.oneOfType([import_prop_types5.default.oneOf(["outlined", "plain", "soft", "solid"]), import_prop_types5.default.string])
} : void 0;
var Chip_default = Chip;

// node_modules/@mui/joy/ChipDelete/ChipDelete.js
init_extends();
init_objectWithoutPropertiesLoose();
var React12 = __toESM(require_react());
var import_prop_types6 = __toESM(require_prop_types());
init_esm();
init_base();
init_useButton();

// node_modules/@mui/joy/internal/svg-icons/Cancel.js
var React11 = __toESM(require_react());
var import_jsx_runtime13 = __toESM(require_jsx_runtime());
var Cancel_default = createSvgIcon((0, import_jsx_runtime13.jsx)("path", {
  d: "M19 6.41 17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z"
}), "Cancel");

// node_modules/@mui/joy/ChipDelete/chipDeleteClasses.js
function getChipDeleteUtilityClass(slot) {
  return generateUtilityClass2("MuiChipDelete", slot);
}
var chipDeleteClasses = generateUtilityClasses2("MuiChipDelete", ["root", "disabled", "focusVisible", "colorPrimary", "colorNeutral", "colorDanger", "colorInfo", "colorSuccess", "colorWarning", "colorContext", "variantPlain", "variantSolid", "variantSoft", "variantOutlined"]);
var chipDeleteClasses_default = chipDeleteClasses;

// node_modules/@mui/joy/ChipDelete/ChipDelete.js
var import_jsx_runtime14 = __toESM(require_jsx_runtime());
var _Cancel;
var _excluded6 = ["children", "variant", "color", "disabled", "onKeyDown", "onDelete", "onClick", "component", "slots", "slotProps"];
var _excluded22 = ["onDelete"];
var useUtilityClasses6 = (ownerState) => {
  const {
    focusVisible,
    variant,
    color,
    disabled
  } = ownerState;
  const slots = {
    root: ["root", disabled && "disabled", focusVisible && "focusVisible", variant && `variant${capitalize(variant)}`, color && `color${capitalize(color)}`]
  };
  return composeClasses(slots, getChipDeleteUtilityClass, {});
};
var ChipDeleteRoot = styled_default("button", {
  name: "JoyChipDelete",
  slot: "Root",
  overridesResolver: (props, styles) => styles.root
})(({
  theme,
  ownerState
}) => {
  var _theme$variants, _theme$variants2, _theme$variants3, _theme$variants4;
  return [{
    "--Icon-margin": "initial",
    pointerEvents: "visible",
    cursor: "pointer",
    width: "var(--Chip-deleteSize, 2rem)",
    height: "var(--Chip-deleteSize, 2rem)",
    borderRadius: "var(--Chip-deleteRadius, 50%)",
    margin: "var(--Chip-deleteMargin)",
    display: "inline-flex",
    justifyContent: "center",
    alignItems: "center",
    zIndex: 1,
    border: "none",
    background: "none",
    padding: "0px",
    [theme.focus.selector]: theme.focus.default
  }, (_theme$variants = theme.variants[ownerState.variant]) == null ? void 0 : _theme$variants[ownerState.color], {
    "&:hover": (_theme$variants2 = theme.variants[`${ownerState.variant}Hover`]) == null ? void 0 : _theme$variants2[ownerState.color]
  }, {
    "&:active": (_theme$variants3 = theme.variants[`${ownerState.variant}Active`]) == null ? void 0 : _theme$variants3[ownerState.color]
  }, {
    [`&.${chipDeleteClasses_default.disabled}`]: (_theme$variants4 = theme.variants[`${ownerState.variant}Disabled`]) == null ? void 0 : _theme$variants4[ownerState.color]
  }];
});
var chipVariantMapping = {
  plain: "outlined",
  outlined: "soft",
  soft: "solid",
  solid: "solid"
};
var ChipDelete = React12.forwardRef(function ChipDelete2(inProps, ref) {
  const props = useThemeProps({
    props: inProps,
    name: "JoyChipDelete"
  });
  const {
    children,
    variant: variantProp,
    color: colorProp,
    disabled: disabledProp,
    onKeyDown,
    onDelete,
    onClick,
    component,
    slots = {},
    slotProps = {}
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded6);
  const chipContext = React12.useContext(ChipContext_default);
  const variant = variantProp || chipVariantMapping[chipContext.variant] || "solid";
  const {
    getColor
  } = useColorInversion(variant);
  const color = getColor(inProps.color, colorProp || chipContext.color || "primary");
  const disabled = disabledProp != null ? disabledProp : chipContext.disabled;
  const buttonRef = React12.useRef(null);
  const handleRef = useForkRef(buttonRef, ref);
  const {
    focusVisible,
    getRootProps
  } = useButton(_extends({}, props, {
    disabled,
    rootRef: handleRef
  }));
  const ownerState = _extends({}, props, {
    disabled,
    variant,
    color,
    focusVisible
  });
  const classes = useUtilityClasses6(ownerState);
  const externalForwardedProps = _extends({}, other, {
    component,
    slots,
    slotProps
  });
  const handleClickDelete = (event) => {
    if (!disabled && onDelete) {
      onDelete(event);
    }
    if (onClick) {
      onClick(event);
    }
  };
  const handleKeyDelete = (event) => {
    if (["Backspace", "Enter", "Delete"].includes(event.key)) {
      event.preventDefault();
      if (!disabled && onDelete) {
        onDelete(event);
      }
    }
    if (onKeyDown) {
      onKeyDown(event);
    }
  };
  const [SlotRoot, rootProps] = useSlot("root", {
    ref,
    elementType: ChipDeleteRoot,
    getSlotProps: getRootProps,
    externalForwardedProps,
    ownerState,
    additionalProps: {
      as: component,
      onKeyDown: handleKeyDelete,
      onClick: handleClickDelete
    },
    className: classes.root
  });
  const restOfRootProps = _objectWithoutPropertiesLoose(rootProps, _excluded22);
  return (0, import_jsx_runtime14.jsx)(SlotRoot, _extends({}, restOfRootProps, {
    children: children != null ? children : _Cancel || (_Cancel = (0, import_jsx_runtime14.jsx)(Cancel_default, {}))
  }));
});
true ? ChipDelete.propTypes = {
  children: import_prop_types6.default.node,
  color: import_prop_types6.default.oneOfType([import_prop_types6.default.oneOf(["danger", "info", "neutral", "primary", "success", "warning"]), import_prop_types6.default.string]),
  component: import_prop_types6.default.elementType,
  disabled: import_prop_types6.default.bool,
  onClick: import_prop_types6.default.func,
  onDelete: import_prop_types6.default.func,
  onKeyDown: import_prop_types6.default.func,
  slotProps: import_prop_types6.default.shape({
    root: import_prop_types6.default.oneOfType([import_prop_types6.default.func, import_prop_types6.default.object])
  }),
  slots: import_prop_types6.default.shape({
    root: import_prop_types6.default.elementType
  }),
  sx: import_prop_types6.default.oneOfType([import_prop_types6.default.arrayOf(import_prop_types6.default.oneOfType([import_prop_types6.default.func, import_prop_types6.default.object, import_prop_types6.default.bool])), import_prop_types6.default.func, import_prop_types6.default.object]),
  variant: import_prop_types6.default.oneOfType([import_prop_types6.default.oneOf(["outlined", "plain", "soft", "solid"]), import_prop_types6.default.string])
} : void 0;
var ChipDelete_default = ChipDelete;

// node_modules/@mui/joy/List/List.js
init_objectWithoutPropertiesLoose();
init_extends();
var React20 = __toESM(require_react());
var import_prop_types7 = __toESM(require_prop_types());
init_clsx_m();
init_esm();
init_composeClasses();

// node_modules/@mui/joy/List/listClasses.js
function getListUtilityClass(slot) {
  return generateUtilityClass2("MuiList", slot);
}
var listClasses = generateUtilityClasses2("MuiList", ["root", "nesting", "scoped", "sizeSm", "sizeMd", "sizeLg", "colorPrimary", "colorNeutral", "colorDanger", "colorInfo", "colorSuccess", "colorWarning", "colorContext", "variantPlain", "variantOutlined", "variantSoft", "variantSolid", "horizontal", "vertical"]);
var listClasses_default = listClasses;

// node_modules/@mui/joy/List/NestedListContext.js
var React13 = __toESM(require_react());
var NestedListContext = React13.createContext(false);
var NestedListContext_default = NestedListContext;

// node_modules/@mui/joy/List/ComponentListContext.js
var React14 = __toESM(require_react());
var ComponentListContext = React14.createContext(void 0);
var ComponentListContext_default = ComponentListContext;

// node_modules/@mui/joy/List/GroupListContext.js
var React15 = __toESM(require_react());
var GroupListContext = React15.createContext(void 0);
var GroupListContext_default = GroupListContext;

// node_modules/@mui/joy/List/ListProvider.js
init_extends();
var React18 = __toESM(require_react());

// node_modules/@mui/joy/List/RowListContext.js
var React16 = __toESM(require_react());
var RowListContext = React16.createContext(false);
var RowListContext_default = RowListContext;

// node_modules/@mui/joy/List/WrapListContext.js
var React17 = __toESM(require_react());
var WrapListContext = React17.createContext(false);
var WrapListContext_default = WrapListContext;

// node_modules/@mui/joy/List/ListProvider.js
var import_jsx_runtime15 = __toESM(require_jsx_runtime());
var scopedVariables = {
  "--NestedList-marginRight": "0px",
  "--NestedList-marginLeft": "0px",
  "--NestedListItem-paddingLeft": "var(--ListItem-paddingX)",
  "--ListItemButton-marginBlock": "0px",
  "--ListItemButton-marginInline": "0px",
  "--ListItem-marginBlock": "0px",
  "--ListItem-marginInline": "0px"
};
function ListProvider(props) {
  const {
    children,
    nested,
    row = false,
    wrap = false
  } = props;
  const baseProviders = (0, import_jsx_runtime15.jsx)(RowListContext_default.Provider, {
    value: row,
    children: (0, import_jsx_runtime15.jsx)(WrapListContext_default.Provider, {
      value: wrap,
      children: React18.Children.map(children, (child, index) => React18.isValidElement(child) ? React18.cloneElement(child, _extends({}, index === 0 && {
        "data-first-child": ""
      })) : child)
    })
  });
  if (nested === void 0) {
    return baseProviders;
  }
  return (0, import_jsx_runtime15.jsx)(NestedListContext_default.Provider, {
    value: nested,
    children: baseProviders
  });
}
var ListProvider_default = ListProvider;

// node_modules/@mui/joy/RadioGroup/RadioGroupContext.js
var React19 = __toESM(require_react());
var RadioGroupContext = React19.createContext(void 0);
if (true) {
  RadioGroupContext.displayName = "RadioGroupContext";
}
var RadioGroupContext_default = RadioGroupContext;

// node_modules/@mui/joy/List/List.js
var import_jsx_runtime16 = __toESM(require_jsx_runtime());
var _excluded7 = ["component", "className", "children", "size", "orientation", "wrap", "variant", "color", "role", "slots", "slotProps"];
var useUtilityClasses7 = (ownerState) => {
  const {
    variant,
    color,
    size,
    nesting,
    orientation,
    instanceSize
  } = ownerState;
  const slots = {
    root: ["root", orientation, variant && `variant${capitalize(variant)}`, color && `color${capitalize(color)}`, !instanceSize && !nesting && size && `size${capitalize(size)}`, instanceSize && `size${capitalize(instanceSize)}`, nesting && "nesting"]
  };
  return composeClasses(slots, getListUtilityClass, {});
};
var StyledList = styled_default("ul")(({
  theme,
  ownerState
}) => {
  var _theme$variants;
  function applySizeVars(size) {
    if (size === "sm") {
      return {
        "--ListDivider-gap": "0.25rem",
        "--ListItem-minHeight": "2rem",
        "--ListItem-paddingY": "0.25rem",
        "--ListItem-paddingX": "0.5rem",
        "--ListItem-fontSize": theme.vars.fontSize.sm,
        "--ListItemDecorator-size": ownerState.orientation === "horizontal" ? "1.5rem" : "2rem",
        "--Icon-fontSize": "1.125rem"
      };
    }
    if (size === "md") {
      return {
        "--ListDivider-gap": "0.375rem",
        "--ListItem-minHeight": "2.5rem",
        "--ListItem-paddingY": "0.375rem",
        "--ListItem-paddingX": "0.75rem",
        "--ListItem-fontSize": theme.vars.fontSize.md,
        "--ListItemDecorator-size": ownerState.orientation === "horizontal" ? "1.75rem" : "2.5rem",
        "--Icon-fontSize": "1.25rem"
      };
    }
    if (size === "lg") {
      return {
        "--ListDivider-gap": "0.5rem",
        "--ListItem-minHeight": "3rem",
        "--ListItem-paddingY": "0.5rem",
        "--ListItem-paddingX": "1rem",
        "--ListItem-fontSize": theme.vars.fontSize.md,
        "--ListItemDecorator-size": ownerState.orientation === "horizontal" ? "2.25rem" : "3rem",
        "--Icon-fontSize": "1.5rem"
      };
    }
    return {};
  }
  return [ownerState.nesting && _extends({}, applySizeVars(ownerState.instanceSize), {
    "--ListItem-paddingRight": "var(--ListItem-paddingX)",
    "--ListItem-paddingLeft": "var(--NestedListItem-paddingLeft)",
    "--ListItemButton-marginBlock": "0px",
    "--ListItemButton-marginInline": "0px",
    "--ListItem-marginBlock": "0px",
    "--ListItem-marginInline": "0px",
    padding: 0,
    marginInlineStart: "var(--NestedList-marginLeft)",
    marginInlineEnd: "var(--NestedList-marginRight)",
    marginBlockStart: "var(--List-gap)",
    marginBlockEnd: "initial"
  }), !ownerState.nesting && _extends({}, applySizeVars(ownerState.size), {
    "--List-gap": "0px",
    "--ListItemDecorator-color": theme.vars.palette.text.tertiary,
    "--List-nestedInsetStart": "0px",
    "--ListItem-paddingLeft": "var(--ListItem-paddingX)",
    "--ListItem-paddingRight": "var(--ListItem-paddingX)",
    "--unstable_List-childRadius": "calc(max(var(--List-radius) - var(--List-padding), min(var(--List-padding) / 2, var(--List-radius) / 2)) - var(--variant-borderWidth, 0px))",
    "--ListItem-radius": "var(--unstable_List-childRadius)",
    "--ListItem-startActionTranslateX": "calc(0.5 * var(--ListItem-paddingLeft))",
    "--ListItem-endActionTranslateX": "calc(-0.5 * var(--ListItem-paddingRight))",
    margin: "initial"
  }, ownerState.orientation === "horizontal" ? _extends({}, ownerState.wrap ? {
    padding: "var(--List-padding)",
    marginInlineStart: "calc(-1 * var(--List-gap))",
    marginBlockStart: "calc(-1 * var(--List-gap))"
  } : {
    paddingInline: "var(--List-padding, var(--ListDivider-gap))",
    paddingBlock: "var(--List-padding)"
  }) : {
    paddingBlock: "var(--List-padding, var(--ListDivider-gap))",
    paddingInline: "var(--List-padding)"
  }), _extends({
    boxSizing: "border-box",
    borderRadius: "var(--List-radius)",
    listStyle: "none",
    display: "flex",
    flexDirection: ownerState.orientation === "horizontal" ? "row" : "column"
  }, ownerState.wrap && {
    flexWrap: "wrap"
  }, {
    flexGrow: 1,
    position: "relative"
  }, (_theme$variants = theme.variants[ownerState.variant]) == null ? void 0 : _theme$variants[ownerState.color], {
    "--unstable_List-borderWidth": "var(--variant-borderWidth, 0px)"
  })];
});
var ListRoot = styled_default(StyledList, {
  name: "JoyList",
  slot: "Root",
  overridesResolver: (props, styles) => styles.root
})({});
var List = React20.forwardRef(function List2(inProps, ref) {
  var _inProps$size;
  const nesting = React20.useContext(NestedListContext_default);
  const group = React20.useContext(GroupListContext_default);
  const radioGroupContext = React20.useContext(RadioGroupContext_default);
  const props = useThemeProps({
    props: inProps,
    name: "JoyList"
  });
  const {
    component,
    className,
    children,
    size: sizeProp,
    orientation = "vertical",
    wrap = false,
    variant = "plain",
    color: colorProp = "neutral",
    role: roleProp,
    slots = {},
    slotProps = {}
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded7);
  const {
    getColor
  } = useColorInversion(variant);
  const color = getColor(inProps.color, colorProp);
  const size = sizeProp || ((_inProps$size = inProps.size) != null ? _inProps$size : "md");
  let role;
  if (group) {
    role = "group";
  }
  if (radioGroupContext) {
    role = "presentation";
  }
  if (roleProp) {
    role = roleProp;
  }
  const ownerState = _extends({}, props, {
    instanceSize: inProps.size,
    size,
    nesting,
    orientation,
    wrap,
    variant,
    color,
    role
  });
  const classes = useUtilityClasses7(ownerState);
  const externalForwardedProps = _extends({}, other, {
    component,
    slots,
    slotProps
  });
  const [SlotRoot, rootProps] = useSlot("root", {
    ref,
    className: clsx_m_default(classes.root, className),
    elementType: ListRoot,
    externalForwardedProps,
    ownerState,
    additionalProps: {
      as: component,
      role,
      "aria-labelledby": typeof nesting === "string" ? nesting : void 0
    }
  });
  return (0, import_jsx_runtime16.jsx)(SlotRoot, _extends({}, rootProps, {
    children: (0, import_jsx_runtime16.jsx)(ComponentListContext_default.Provider, {
      value: `${typeof component === "string" ? component : ""}:${role || ""}`,
      children: (0, import_jsx_runtime16.jsx)(ListProvider_default, {
        row: orientation === "horizontal",
        wrap,
        children
      })
    })
  }));
});
true ? List.propTypes = {
  children: import_prop_types7.default.node,
  className: import_prop_types7.default.string,
  color: import_prop_types7.default.oneOfType([import_prop_types7.default.oneOf(["danger", "info", "neutral", "primary", "success", "warning"]), import_prop_types7.default.string]),
  component: import_prop_types7.default.elementType,
  orientation: import_prop_types7.default.oneOf(["horizontal", "vertical"]),
  role: import_prop_types7.default.string,
  size: import_prop_types7.default.oneOfType([import_prop_types7.default.oneOf(["sm", "md", "lg"]), import_prop_types7.default.string]),
  slotProps: import_prop_types7.default.shape({
    root: import_prop_types7.default.oneOfType([import_prop_types7.default.func, import_prop_types7.default.object])
  }),
  slots: import_prop_types7.default.shape({
    root: import_prop_types7.default.elementType
  }),
  sx: import_prop_types7.default.oneOfType([import_prop_types7.default.arrayOf(import_prop_types7.default.oneOfType([import_prop_types7.default.func, import_prop_types7.default.object, import_prop_types7.default.bool])), import_prop_types7.default.func, import_prop_types7.default.object]),
  variant: import_prop_types7.default.oneOfType([import_prop_types7.default.oneOf(["outlined", "plain", "soft", "solid"]), import_prop_types7.default.string]),
  wrap: import_prop_types7.default.bool
} : void 0;
var List_default = List;

// node_modules/@mui/joy/ListSubheader/ListSubheader.js
init_objectWithoutPropertiesLoose();
init_extends();
var React22 = __toESM(require_react());
var import_prop_types8 = __toESM(require_prop_types());
init_clsx_m();
init_esm();
init_composeClasses();

// node_modules/@mui/joy/ListSubheader/listSubheaderClasses.js
function getListSubheaderUtilityClass(slot) {
  return generateUtilityClass2("MuiListSubheader", slot);
}
var listSubheaderClasses = generateUtilityClasses2("MuiListSubheader", ["root", "sticky", "colorPrimary", "colorNeutral", "colorDanger", "colorInfo", "colorSuccess", "colorWarning", "colorContext", "variantPlain", "variantSoft", "variantOutlined", "variantSolid"]);
var listSubheaderClasses_default = listSubheaderClasses;

// node_modules/@mui/joy/ListSubheader/ListSubheaderContext.js
var React21 = __toESM(require_react());
var ListSubheaderDispatch = React21.createContext(void 0);
var ListSubheaderContext_default = ListSubheaderDispatch;

// node_modules/@mui/joy/ListSubheader/ListSubheader.js
var import_jsx_runtime17 = __toESM(require_jsx_runtime());
var _excluded8 = ["component", "className", "children", "id", "sticky", "variant", "color", "slots", "slotProps"];
var useUtilityClasses8 = (ownerState) => {
  const {
    variant,
    color,
    sticky
  } = ownerState;
  const slots = {
    root: ["root", sticky && "sticky", color && `color${capitalize(color)}`, variant && `variant${capitalize(variant)}`]
  };
  return composeClasses(slots, getListSubheaderUtilityClass, {});
};
var ListSubheaderRoot = styled_default("div", {
  name: "JoyListSubheader",
  slot: "Root",
  overridesResolver: (props, styles) => styles.root
})(({
  theme,
  ownerState
}) => {
  var _theme$vars$palette, _theme$variants;
  return _extends({
    boxSizing: "border-box",
    display: "flex",
    alignItems: "center",
    marginInline: "var(--ListItem-marginInline)",
    paddingBlock: "var(--ListItem-paddingY)",
    paddingInlineStart: "var(--ListItem-paddingLeft)",
    paddingInlineEnd: "var(--ListItem-paddingRight)",
    minBlockSize: "var(--ListItem-minHeight)",
    fontSize: "calc(var(--ListItem-fontSize) * 0.75)",
    fontWeight: theme.vars.fontWeight.lg,
    fontFamily: theme.vars.fontFamily.body,
    letterSpacing: theme.vars.letterSpacing.md,
    textTransform: "uppercase"
  }, ownerState.sticky && {
    position: "sticky",
    top: "var(--ListItem-stickyTop, 0px)",
    zIndex: 1,
    background: "var(--ListItem-stickyBackground)"
  }, {
    color: ownerState.color && ownerState.color !== "context" ? `rgba(${(_theme$vars$palette = theme.vars.palette[ownerState.color]) == null ? void 0 : _theme$vars$palette.mainChannel} / 1)` : theme.vars.palette.text.tertiary
  }, (_theme$variants = theme.variants[ownerState.variant]) == null ? void 0 : _theme$variants[ownerState.color]);
});
var ListSubheader = React22.forwardRef(function ListSubheader2(inProps, ref) {
  const props = useThemeProps({
    props: inProps,
    name: "JoyListSubheader"
  });
  const {
    component,
    className,
    children,
    id: idOverride,
    sticky = false,
    variant,
    color: colorProp,
    slots = {},
    slotProps = {}
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded8);
  const {
    getColor
  } = useColorInversion(variant);
  const color = getColor(inProps.color, colorProp);
  const id = useId(idOverride);
  const setSubheaderId = React22.useContext(ListSubheaderContext_default);
  React22.useEffect(() => {
    if (setSubheaderId) {
      setSubheaderId(id || "");
    }
  }, [setSubheaderId, id]);
  const ownerState = _extends({}, props, {
    id,
    sticky,
    variant,
    color: variant ? color != null ? color : "neutral" : color
  });
  const classes = useUtilityClasses8(ownerState);
  const externalForwardedProps = _extends({}, other, {
    component,
    slots,
    slotProps
  });
  const [SlotRoot, rootProps] = useSlot("root", {
    ref,
    className: clsx_m_default(classes.root, className),
    elementType: ListSubheaderRoot,
    externalForwardedProps,
    ownerState,
    additionalProps: {
      as: component,
      id
    }
  });
  return (0, import_jsx_runtime17.jsx)(SlotRoot, _extends({}, rootProps, {
    children
  }));
});
true ? ListSubheader.propTypes = {
  children: import_prop_types8.default.node,
  className: import_prop_types8.default.string,
  color: import_prop_types8.default.oneOfType([import_prop_types8.default.oneOf(["danger", "info", "neutral", "primary", "success", "warning"]), import_prop_types8.default.string]),
  component: import_prop_types8.default.elementType,
  id: import_prop_types8.default.string,
  slotProps: import_prop_types8.default.shape({
    root: import_prop_types8.default.oneOfType([import_prop_types8.default.func, import_prop_types8.default.object])
  }),
  slots: import_prop_types8.default.shape({
    root: import_prop_types8.default.elementType
  }),
  sticky: import_prop_types8.default.bool,
  sx: import_prop_types8.default.oneOfType([import_prop_types8.default.arrayOf(import_prop_types8.default.oneOfType([import_prop_types8.default.func, import_prop_types8.default.object, import_prop_types8.default.bool])), import_prop_types8.default.func, import_prop_types8.default.object]),
  variant: import_prop_types8.default.oneOfType([import_prop_types8.default.oneOf(["outlined", "plain", "soft", "solid"]), import_prop_types8.default.string])
} : void 0;
var ListSubheader_default = ListSubheader;

// node_modules/@mui/joy/ListItem/ListItem.js
init_objectWithoutPropertiesLoose();
init_extends();
var React23 = __toESM(require_react());
var import_prop_types9 = __toESM(require_prop_types());
init_clsx_m();
init_esm();
init_composeClasses();

// node_modules/@mui/joy/ListItem/listItemClasses.js
function getListItemUtilityClass(slot) {
  return generateUtilityClass2("MuiListItem", slot);
}
var listItemClasses = generateUtilityClasses2("MuiListItem", ["root", "startAction", "endAction", "nested", "nesting", "sticky", "colorPrimary", "colorNeutral", "colorDanger", "colorInfo", "colorSuccess", "colorWarning", "colorContext", "variantPlain", "variantSoft", "variantOutlined", "variantSolid"]);
var listItemClasses_default = listItemClasses;

// node_modules/@mui/joy/ListItem/ListItem.js
var import_jsx_runtime18 = __toESM(require_jsx_runtime());
var import_jsx_runtime19 = __toESM(require_jsx_runtime());
var _excluded9 = ["component", "className", "children", "nested", "sticky", "variant", "color", "startAction", "endAction", "role", "slots", "slotProps"];
var useUtilityClasses9 = (ownerState) => {
  const {
    sticky,
    nested,
    nesting,
    variant,
    color
  } = ownerState;
  const slots = {
    root: ["root", nested && "nested", nesting && "nesting", sticky && "sticky", color && `color${capitalize(color)}`, variant && `variant${capitalize(variant)}`],
    startAction: ["startAction"],
    endAction: ["endAction"]
  };
  return composeClasses(slots, getListItemUtilityClass, {});
};
var ListItemRoot = styled_default("li", {
  name: "JoyListItem",
  slot: "Root",
  overridesResolver: (props, styles) => styles.root
})(({
  theme,
  ownerState
}) => {
  var _theme$variants;
  return [
    !ownerState.nested && {
      "--ListItemButton-marginInline": `calc(-1 * var(--ListItem-paddingLeft)) calc(-1 * var(--ListItem-paddingRight))`,
      "--ListItemButton-marginBlock": "calc(-1 * var(--ListItem-paddingY))",
      alignItems: "center",
      marginInline: "var(--ListItem-marginInline)"
    },
    ownerState.nested && {
      "--NestedList-marginRight": "calc(-1 * var(--ListItem-paddingRight))",
      "--NestedList-marginLeft": "calc(-1 * var(--ListItem-paddingLeft))",
      "--NestedListItem-paddingLeft": `calc(var(--ListItem-paddingLeft) + var(--List-nestedInsetStart))`,
      "--ListItemButton-marginBlock": "0px",
      "--ListItemButton-marginInline": "calc(-1 * var(--ListItem-paddingLeft)) calc(-1 * var(--ListItem-paddingRight))",
      "--ListItem-marginInline": "calc(-1 * var(--ListItem-paddingLeft)) calc(-1 * var(--ListItem-paddingRight))",
      flexDirection: "column"
    },
    _extends({
      "--unstable_actionRadius": "calc(var(--ListItem-radius) - var(--variant-borderWidth, 0px))"
    }, ownerState.startAction && {
      "--unstable_startActionWidth": "2rem"
    }, ownerState.endAction && {
      "--unstable_endActionWidth": "2.5rem"
    }, {
      boxSizing: "border-box",
      borderRadius: "var(--ListItem-radius)",
      display: "flex",
      flex: "none",
      position: "relative",
      paddingBlockStart: ownerState.nested ? 0 : "var(--ListItem-paddingY)",
      paddingBlockEnd: ownerState.nested ? 0 : "var(--ListItem-paddingY)",
      paddingInlineStart: "var(--ListItem-paddingLeft)",
      paddingInlineEnd: "var(--ListItem-paddingRight)"
    }, ownerState["data-first-child"] === void 0 && _extends({}, ownerState.row ? {
      marginInlineStart: "var(--List-gap)"
    } : {
      marginBlockStart: "var(--List-gap)"
    }), ownerState.row && ownerState.wrap && {
      marginInlineStart: "var(--List-gap)",
      marginBlockStart: "var(--List-gap)"
    }, {
      minBlockSize: "var(--ListItem-minHeight)",
      fontSize: "var(--ListItem-fontSize)",
      fontFamily: theme.vars.fontFamily.body
    }, ownerState.sticky && {
      position: "sticky",
      top: "var(--ListItem-stickyTop, 0px)",
      zIndex: 1,
      background: "var(--ListItem-stickyBackground)"
    }),
    (_theme$variants = theme.variants[ownerState.variant]) == null ? void 0 : _theme$variants[ownerState.color]
  ];
});
var ListItemStartAction = styled_default("div", {
  name: "JoyListItem",
  slot: "StartAction",
  overridesResolver: (props, styles) => styles.startAction
})(({
  ownerState
}) => ({
  display: "inherit",
  position: "absolute",
  top: ownerState.nested ? "calc(var(--ListItem-minHeight) / 2)" : "50%",
  left: 0,
  transform: "translate(var(--ListItem-startActionTranslateX), -50%)",
  zIndex: 1
}));
var ListItemEndAction = styled_default("div", {
  name: "JoyListItem",
  slot: "StartAction",
  overridesResolver: (props, styles) => styles.startAction
})(({
  ownerState
}) => ({
  display: "inherit",
  position: "absolute",
  top: ownerState.nested ? "calc(var(--ListItem-minHeight) / 2)" : "50%",
  right: 0,
  transform: "translate(var(--ListItem-endActionTranslateX), -50%)"
}));
var ListItem = React23.forwardRef(function ListItem2(inProps, ref) {
  const props = useThemeProps({
    props: inProps,
    name: "JoyListItem"
  });
  const group = React23.useContext(GroupListContext_default);
  const listComponent = React23.useContext(ComponentListContext_default);
  const row = React23.useContext(RowListContext_default);
  const wrap = React23.useContext(WrapListContext_default);
  const nesting = React23.useContext(NestedListContext_default);
  const {
    component: componentProp,
    className,
    children,
    nested = false,
    sticky = false,
    variant = "plain",
    color: colorProp = "neutral",
    startAction,
    endAction,
    role: roleProp,
    slots = {},
    slotProps = {}
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded9);
  const {
    getColor
  } = useColorInversion(variant);
  const color = getColor(inProps.color, colorProp);
  const [subheaderId, setSubheaderId] = React23.useState("");
  const [listElement, listRole] = (listComponent == null ? void 0 : listComponent.split(":")) || ["", ""];
  const component = componentProp || (listElement && !listElement.match(/^(ul|ol|menu)$/) ? "div" : void 0);
  let role = group === "menu" ? "none" : void 0;
  if (listComponent) {
    role = {
      menu: "none",
      menubar: "none",
      group: "presentation"
    }[listRole];
  }
  if (roleProp) {
    role = roleProp;
  }
  const ownerState = _extends({}, props, {
    sticky,
    startAction,
    endAction,
    row,
    wrap,
    variant,
    color,
    nesting,
    nested,
    component,
    role
  });
  const classes = useUtilityClasses9(ownerState);
  const externalForwardedProps = _extends({}, other, {
    component,
    slots,
    slotProps
  });
  const [SlotRoot, rootProps] = useSlot("root", {
    additionalProps: {
      role
    },
    ref,
    className: clsx_m_default(classes.root, className),
    elementType: ListItemRoot,
    externalForwardedProps,
    ownerState
  });
  const [SlotStartAction, startActionProps] = useSlot("startAction", {
    className: classes.startAction,
    elementType: ListItemStartAction,
    externalForwardedProps,
    ownerState
  });
  const [SlotEndAction, endActionProps] = useSlot("endAction", {
    className: classes.endAction,
    elementType: ListItemEndAction,
    externalForwardedProps,
    ownerState
  });
  return (0, import_jsx_runtime18.jsx)(ListSubheaderContext_default.Provider, {
    value: setSubheaderId,
    children: (0, import_jsx_runtime18.jsx)(NestedListContext_default.Provider, {
      value: nested ? subheaderId || true : false,
      children: (0, import_jsx_runtime19.jsxs)(SlotRoot, _extends({}, rootProps, {
        children: [startAction && (0, import_jsx_runtime18.jsx)(SlotStartAction, _extends({}, startActionProps, {
          children: startAction
        })), React23.Children.map(children, (child, index) => React23.isValidElement(child) ? React23.cloneElement(child, _extends({}, index === 0 && {
          "data-first-child": ""
        }, isMuiElement(child, ["ListItem"]) && {
          component: child.props.component || "div"
        })) : child), endAction && (0, import_jsx_runtime18.jsx)(SlotEndAction, _extends({}, endActionProps, {
          children: endAction
        }))]
      }))
    })
  });
});
true ? ListItem.propTypes = {
  children: import_prop_types9.default.node,
  className: import_prop_types9.default.string,
  color: import_prop_types9.default.oneOfType([import_prop_types9.default.oneOf(["danger", "info", "neutral", "primary", "success", "warning"]), import_prop_types9.default.string]),
  component: import_prop_types9.default.elementType,
  endAction: import_prop_types9.default.node,
  nested: import_prop_types9.default.bool,
  role: import_prop_types9.default.string,
  slotProps: import_prop_types9.default.shape({
    endAction: import_prop_types9.default.oneOfType([import_prop_types9.default.func, import_prop_types9.default.object]),
    root: import_prop_types9.default.oneOfType([import_prop_types9.default.func, import_prop_types9.default.object]),
    startAction: import_prop_types9.default.oneOfType([import_prop_types9.default.func, import_prop_types9.default.object])
  }),
  slots: import_prop_types9.default.shape({
    endAction: import_prop_types9.default.elementType,
    root: import_prop_types9.default.elementType,
    startAction: import_prop_types9.default.elementType
  }),
  startAction: import_prop_types9.default.node,
  sticky: import_prop_types9.default.bool,
  sx: import_prop_types9.default.oneOfType([import_prop_types9.default.arrayOf(import_prop_types9.default.oneOfType([import_prop_types9.default.func, import_prop_types9.default.object, import_prop_types9.default.bool])), import_prop_types9.default.func, import_prop_types9.default.object]),
  variant: import_prop_types9.default.oneOfType([import_prop_types9.default.oneOf(["outlined", "plain", "soft", "solid"]), import_prop_types9.default.string])
} : void 0;
ListItem.muiName = "ListItem";
var ListItem_default = ListItem;

// node_modules/@mui/joy/Autocomplete/autocompleteClasses.js
function getAutocompleteUtilityClass(slot) {
  return generateUtilityClass2("MuiAutocomplete", slot);
}
var autocompleteClasses = generateUtilityClasses2("MuiAutocomplete", ["root", "wrapper", "input", "startDecorator", "endDecorator", "formControl", "focused", "disabled", "error", "multiple", "limitTag", "hasPopupIcon", "hasClearIcon", "clearIndicator", "popupIndicator", "popupIndicatorOpen", "listbox", "option", "loading", "noOptions", "colorPrimary", "colorNeutral", "colorDanger", "colorInfo", "colorSuccess", "colorWarning", "colorContext", "sizeSm", "sizeMd", "sizeLg", "variantPlain", "variantOutlined", "variantSoft", "variantSolid"]);
var autocompleteClasses_default = autocompleteClasses;

// node_modules/@mui/joy/AutocompleteListbox/AutocompleteListbox.js
init_extends();
init_objectWithoutPropertiesLoose();
var React24 = __toESM(require_react());
init_clsx_m();
var import_prop_types10 = __toESM(require_prop_types());
init_esm();
init_composeClasses();

// node_modules/@mui/joy/AutocompleteListbox/autocompleteListboxClasses.js
function getAutocompleteListboxUtilityClass(slot) {
  return generateUtilityClass2("MuiAutocompleteListbox", slot);
}
var autocompleteListboxClasses = generateUtilityClasses2("MuiAutocompleteListbox", ["root", "sizeSm", "sizeMd", "sizeLg", "colorPrimary", "colorNeutral", "colorDanger", "colorInfo", "colorSuccess", "colorWarning", "colorContext", "variantPlain", "variantOutlined", "variantSoft", "variantSolid"]);
var autocompleteListboxClasses_default = autocompleteListboxClasses;

// node_modules/@mui/joy/AutocompleteListbox/AutocompleteListbox.js
var import_jsx_runtime20 = __toESM(require_jsx_runtime());
var _excluded10 = ["anchorEl", "direction", "disablePortal", "modifiers", "open", "placement", "popperOptions", "popperRef", "TransitionProps"];
var _excluded23 = ["children", "className", "component", "color", "variant", "size", "slots", "slotProps"];
var useUtilityClasses10 = (ownerState) => {
  const {
    variant,
    color,
    size
  } = ownerState;
  const slots = {
    root: ["root", variant && `variant${capitalize(variant)}`, color && `color${capitalize(color)}`, size && `size${capitalize(size)}`]
  };
  return composeClasses(slots, getAutocompleteListboxUtilityClass, {});
};
var excludePopperProps = (_ref) => {
  let other = _objectWithoutPropertiesLoose(_ref, _excluded10);
  return other;
};
var StyledAutocompleteListbox = styled_default(StyledList)(({
  theme,
  ownerState
}) => {
  var _theme$variants;
  const variantStyle = (_theme$variants = theme.variants[ownerState.variant]) == null ? void 0 : _theme$variants[ownerState.color];
  return _extends({
    "--focus-outline-offset": `calc(${theme.vars.focus.thickness} * -1)`,
    "--List-radius": theme.vars.radius.sm,
    "--ListItem-stickyBackground": (variantStyle == null ? void 0 : variantStyle.backgroundColor) || (variantStyle == null ? void 0 : variantStyle.background) || theme.vars.palette.background.popup,
    "--ListItem-stickyTop": "calc(var(--List-padding, var(--ListDivider-gap)) * -1)"
  }, scopedVariables, {
    boxShadow: theme.shadow.md
  }, !(variantStyle != null && variantStyle.backgroundColor) && {
    backgroundColor: theme.vars.palette.background.popup
  }, {
    zIndex: theme.vars.zIndex.popup,
    overflow: "auto",
    maxHeight: "40vh",
    position: "relative",
    "&:empty": {
      visibility: "hidden"
    },
    [`& .${listItemClasses_default.nested}, & .${listItemClasses_default.nested} .${listClasses_default.root}`]: {
      position: "initial"
    }
  });
});
var AutocompleteListboxRoot = styled_default(StyledAutocompleteListbox, {
  name: "JoyAutocompleteListbox",
  slot: "Root",
  overridesResolver: (props, styles) => styles.root
})({});
var AutocompleteListbox = React24.forwardRef(function AutocompleteListbox2(inProps, ref) {
  const props = useThemeProps({
    props: inProps,
    name: "JoyAutocompleteListbox"
  });
  const {
    children,
    className,
    component,
    color: colorProp = "neutral",
    variant = "outlined",
    size = "md",
    slots = {},
    slotProps = {}
  } = props, otherProps = _objectWithoutPropertiesLoose(props, _excluded23);
  const {
    getColor
  } = useColorInversion(variant);
  const color = getColor(inProps.color, colorProp);
  const ownerState = _extends({}, props, {
    size,
    color,
    variant,
    nesting: false,
    row: false,
    wrap: false
  });
  const other = excludePopperProps(otherProps);
  const classes = useUtilityClasses10(ownerState);
  const externalForwardedProps = _extends({}, other, {
    component,
    slots,
    slotProps
  });
  const [SlotRoot, rootProps] = useSlot("root", {
    ref,
    className: clsx_m_default(classes.root, className),
    elementType: AutocompleteListboxRoot,
    externalForwardedProps,
    ownerState,
    additionalProps: {
      role: "listbox"
    }
  });
  return (0, import_jsx_runtime20.jsx)(SlotRoot, _extends({}, rootProps, {
    children
  }));
});
true ? AutocompleteListbox.propTypes = {
  children: import_prop_types10.default.node,
  className: import_prop_types10.default.string,
  color: import_prop_types10.default.oneOfType([import_prop_types10.default.oneOf(["danger", "info", "neutral", "primary", "success", "warning"]), import_prop_types10.default.string]),
  component: import_prop_types10.default.elementType,
  size: import_prop_types10.default.oneOf(["sm", "md", "lg"]),
  slotProps: import_prop_types10.default.shape({
    root: import_prop_types10.default.oneOfType([import_prop_types10.default.func, import_prop_types10.default.object])
  }),
  slots: import_prop_types10.default.shape({
    root: import_prop_types10.default.elementType
  }),
  sx: import_prop_types10.default.oneOfType([import_prop_types10.default.arrayOf(import_prop_types10.default.oneOfType([import_prop_types10.default.func, import_prop_types10.default.object, import_prop_types10.default.bool])), import_prop_types10.default.func, import_prop_types10.default.object]),
  variant: import_prop_types10.default.oneOfType([import_prop_types10.default.oneOf(["contained", "light", "outlined", "text"]), import_prop_types10.default.string])
} : void 0;
var AutocompleteListbox_default = AutocompleteListbox;

// node_modules/@mui/joy/AutocompleteOption/AutocompleteOption.js
init_extends();
init_objectWithoutPropertiesLoose();
var React27 = __toESM(require_react());
init_clsx_m();
var import_prop_types12 = __toESM(require_prop_types());
init_esm();
init_composeClasses();

// node_modules/@mui/joy/ListItemButton/ListItemButton.js
init_objectWithoutPropertiesLoose();
init_extends();
var React26 = __toESM(require_react());
var import_prop_types11 = __toESM(require_prop_types());
init_clsx_m();
init_esm();
init_composeClasses();
init_useButton();

// node_modules/@mui/joy/ListItemButton/listItemButtonClasses.js
function getListItemButtonUtilityClass(slot) {
  return generateUtilityClass2("MuiListItemButton", slot);
}
var listItemButtonClasses = generateUtilityClasses2("MuiListItemButton", ["root", "horizontal", "vertical", "colorPrimary", "colorNeutral", "colorDanger", "colorInfo", "colorSuccess", "colorWarning", "colorContext", "focusVisible", "disabled", "selected", "variantPlain", "variantSoft", "variantOutlined", "variantSolid"]);
var listItemButtonClasses_default = listItemButtonClasses;

// node_modules/@mui/joy/ListItemButton/ListItemButtonOrientationContext.js
var React25 = __toESM(require_react());
var ListItemButtonOrientationContext = React25.createContext("horizontal");
var ListItemButtonOrientationContext_default = ListItemButtonOrientationContext;

// node_modules/@mui/joy/ListItemButton/ListItemButton.js
var import_jsx_runtime21 = __toESM(require_jsx_runtime());
var _excluded11 = ["children", "className", "action", "component", "orientation", "role", "selected", "color", "variant", "slots", "slotProps"];
var useUtilityClasses11 = (ownerState) => {
  const {
    color,
    disabled,
    focusVisible,
    focusVisibleClassName,
    selected,
    variant
  } = ownerState;
  const slots = {
    root: ["root", disabled && "disabled", focusVisible && "focusVisible", color && `color${capitalize(color)}`, selected && "selected", variant && `variant${capitalize(variant)}`]
  };
  const composedClasses = composeClasses(slots, getListItemButtonUtilityClass, {});
  if (focusVisible && focusVisibleClassName) {
    composedClasses.root += ` ${focusVisibleClassName}`;
  }
  return composedClasses;
};
var StyledListItemButton = styled_default("div")(({
  theme,
  ownerState
}) => {
  var _theme$variants, _theme$variants2, _theme$variants3, _theme$variants4, _theme$variants5, _theme$variants6, _theme$variants7;
  return [_extends({}, ownerState.selected && {
    "--ListItemDecorator-color": "initial"
  }, ownerState.disabled && {
    "--ListItemDecorator-color": (_theme$variants = theme.variants) == null ? void 0 : (_theme$variants2 = _theme$variants[`${ownerState.variant}Disabled`]) == null ? void 0 : (_theme$variants3 = _theme$variants2[ownerState.color]) == null ? void 0 : _theme$variants3.color
  }, {
    WebkitTapHighlightColor: "transparent",
    boxSizing: "border-box",
    position: "relative",
    display: "flex",
    flexDirection: "row",
    alignItems: "center",
    alignSelf: "stretch"
  }, ownerState.orientation === "vertical" && {
    flexDirection: "column",
    justifyContent: "center"
  }, {
    textAlign: "initial",
    textDecoration: "initial",
    backgroundColor: "initial",
    cursor: "pointer",
    marginInline: "var(--ListItemButton-marginInline)",
    marginBlock: "var(--ListItemButton-marginBlock)"
  }, ownerState["data-first-child"] === void 0 && {
    marginInlineStart: ownerState.row ? "var(--List-gap)" : void 0,
    marginBlockStart: ownerState.row ? void 0 : "var(--List-gap)"
  }, {
    paddingBlock: "calc(var(--ListItem-paddingY) - var(--variant-borderWidth, 0px))",
    paddingInlineStart: "calc(var(--ListItem-paddingLeft) + var(--ListItem-startActionWidth, var(--unstable_startActionWidth, 0px)))",
    paddingInlineEnd: "calc(var(--ListItem-paddingRight) + var(--ListItem-endActionWidth, var(--unstable_endActionWidth, 0px)))",
    minBlockSize: "var(--ListItem-minHeight)",
    border: "none",
    borderRadius: "var(--ListItem-radius)",
    flexGrow: ownerState.row ? 0 : 1,
    flexBasis: ownerState.row ? "auto" : "0%",
    flexShrink: 0,
    minInlineSize: 0,
    fontSize: "var(--ListItem-fontSize)",
    fontFamily: theme.vars.fontFamily.body
  }, ownerState.selected && {
    fontWeight: theme.vars.fontWeight.md
  }, {
    [theme.focus.selector]: theme.focus.default
  }), _extends({}, (_theme$variants4 = theme.variants[ownerState.variant]) == null ? void 0 : _theme$variants4[ownerState.color], !ownerState.selected && {
    "&:hover": (_theme$variants5 = theme.variants[`${ownerState.variant}Hover`]) == null ? void 0 : _theme$variants5[ownerState.color],
    "&:active": (_theme$variants6 = theme.variants[`${ownerState.variant}Active`]) == null ? void 0 : _theme$variants6[ownerState.color]
  }), {
    [`&.${listItemButtonClasses_default.disabled}`]: (_theme$variants7 = theme.variants[`${ownerState.variant}Disabled`]) == null ? void 0 : _theme$variants7[ownerState.color]
  }];
});
var ListItemButtonRoot = styled_default(StyledListItemButton, {
  name: "JoyListItemButton",
  slot: "Root",
  overridesResolver: (props, styles) => styles.root
})({});
var ListItemButton = React26.forwardRef(function ListItemButton2(inProps, ref) {
  const props = useThemeProps({
    props: inProps,
    name: "JoyListItemButton"
  });
  const row = React26.useContext(RowListContext_default);
  const {
    children,
    className,
    action,
    component = "div",
    orientation = "horizontal",
    role,
    selected = false,
    color: colorProp = selected ? "primary" : "neutral",
    variant = "plain",
    slots = {},
    slotProps = {}
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded11);
  const {
    getColor
  } = useColorInversion(variant);
  const color = getColor(inProps.color, colorProp);
  const buttonRef = React26.useRef(null);
  const handleRef = useForkRef(buttonRef, ref);
  const {
    focusVisible,
    setFocusVisible,
    getRootProps
  } = useButton(_extends({}, props, {
    rootRef: handleRef
  }));
  React26.useImperativeHandle(action, () => ({
    focusVisible: () => {
      var _buttonRef$current;
      setFocusVisible(true);
      (_buttonRef$current = buttonRef.current) == null ? void 0 : _buttonRef$current.focus();
    }
  }), [setFocusVisible]);
  const ownerState = _extends({}, props, {
    component,
    color,
    focusVisible,
    orientation,
    row,
    selected,
    variant
  });
  const classes = useUtilityClasses11(ownerState);
  const externalForwardedProps = _extends({}, other, {
    component,
    slots,
    slotProps
  });
  const [SlotRoot, rootProps] = useSlot("root", {
    ref,
    className: clsx_m_default(classes.root, className),
    elementType: ListItemButtonRoot,
    externalForwardedProps,
    ownerState,
    getSlotProps: getRootProps
  });
  return (0, import_jsx_runtime21.jsx)(ListItemButtonOrientationContext_default.Provider, {
    value: orientation,
    children: (0, import_jsx_runtime21.jsx)(SlotRoot, _extends({}, rootProps, {
      role: role != null ? role : rootProps.role,
      children
    }))
  });
});
true ? ListItemButton.propTypes = {
  action: import_prop_types11.default.oneOfType([import_prop_types11.default.func, import_prop_types11.default.shape({
    current: import_prop_types11.default.shape({
      focusVisible: import_prop_types11.default.func.isRequired
    })
  })]),
  autoFocus: import_prop_types11.default.bool,
  children: import_prop_types11.default.node,
  className: import_prop_types11.default.string,
  color: import_prop_types11.default.oneOfType([import_prop_types11.default.oneOf(["danger", "info", "neutral", "primary", "success", "warning"]), import_prop_types11.default.string]),
  component: import_prop_types11.default.elementType,
  disabled: import_prop_types11.default.bool,
  focusVisibleClassName: import_prop_types11.default.string,
  orientation: import_prop_types11.default.oneOf(["horizontal", "vertical"]),
  role: import_prop_types11.default.string,
  selected: import_prop_types11.default.bool,
  slotProps: import_prop_types11.default.shape({
    root: import_prop_types11.default.oneOfType([import_prop_types11.default.func, import_prop_types11.default.object])
  }),
  slots: import_prop_types11.default.shape({
    root: import_prop_types11.default.elementType
  }),
  sx: import_prop_types11.default.oneOfType([import_prop_types11.default.arrayOf(import_prop_types11.default.oneOfType([import_prop_types11.default.func, import_prop_types11.default.object, import_prop_types11.default.bool])), import_prop_types11.default.func, import_prop_types11.default.object]),
  tabIndex: import_prop_types11.default.number,
  variant: import_prop_types11.default.oneOfType([import_prop_types11.default.oneOf(["outlined", "plain", "soft", "solid"]), import_prop_types11.default.string])
} : void 0;
var ListItemButton_default = ListItemButton;

// node_modules/@mui/joy/AutocompleteOption/autocompleteOptionClasses.js
function getAutocompleteOptionUtilityClass(slot) {
  return generateUtilityClass2("MuiAutocompleteOption", slot);
}
var autocompleteOptionClasses = generateUtilityClasses2("MuiAutocompleteOption", ["root", "focused", "focusVisible", "colorPrimary", "colorNeutral", "colorDanger", "colorInfo", "colorSuccess", "colorWarning", "colorContext", "variantPlain", "variantSoft", "variantOutlined", "variantSolid"]);
var autocompleteOptionClasses_default = autocompleteOptionClasses;

// node_modules/@mui/joy/AutocompleteOption/AutocompleteOption.js
var import_jsx_runtime22 = __toESM(require_jsx_runtime());
var _excluded12 = ["children", "component", "color", "variant", "className", "slots", "slotProps"];
var useUtilityClasses12 = (ownerState) => {
  const {
    color,
    variant
  } = ownerState;
  const slots = {
    root: ["root", color && `color${capitalize(color)}`, variant && `variant${capitalize(variant)}`]
  };
  return composeClasses(slots, getAutocompleteOptionUtilityClass, {});
};
var StyledAutocompleteOption = styled_default(StyledListItemButton)(({
  theme,
  ownerState
}) => {
  var _theme$variants, _theme$variants$soft, _theme$variants$soft2, _theme$variants$soft3, _theme$variants$soft4, _theme$variants2, _theme$variants3;
  return {
    '&[aria-disabled="true"]': (_theme$variants = theme.variants[`${ownerState.variant}Disabled`]) == null ? void 0 : _theme$variants[ownerState.color],
    '&[aria-selected="true"]': {
      color: (_theme$variants$soft = theme.variants.soft) == null ? void 0 : (_theme$variants$soft2 = _theme$variants$soft[ownerState.color === "context" ? "context" : "primary"]) == null ? void 0 : _theme$variants$soft2.color,
      backgroundColor: (_theme$variants$soft3 = theme.variants.soft) == null ? void 0 : (_theme$variants$soft4 = _theme$variants$soft3[ownerState.color === "context" ? "context" : "primary"]) == null ? void 0 : _theme$variants$soft4.backgroundColor,
      fontWeight: theme.vars.fontWeight.md
    },
    [`&.${autocompleteOptionClasses_default.focused}:not([aria-selected="true"]):not(:hover)`]: {
      backgroundColor: (_theme$variants2 = theme.variants[`${ownerState.variant}Hover`]) == null ? void 0 : (_theme$variants3 = _theme$variants2[ownerState.color]) == null ? void 0 : _theme$variants3.backgroundColor
    }
  };
});
var AutocompleteOptionRoot = styled_default(StyledAutocompleteOption, {
  name: "JoyAutocompleteOption",
  slot: "Root",
  overridesResolver: (props, styles) => styles.root
})({});
var AutocompleteOption = React27.forwardRef(function AutocompleteOption2(inProps, ref) {
  const props = useThemeProps({
    props: inProps,
    name: "JoyAutocompleteOption"
  });
  const {
    children,
    component = "li",
    color: colorProp = "neutral",
    variant = "plain",
    className,
    slots = {},
    slotProps = {}
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded12);
  const {
    getColor
  } = useColorInversion(variant);
  const color = getColor(inProps.color, colorProp);
  const ownerState = _extends({}, props, {
    component,
    color,
    variant
  });
  const classes = useUtilityClasses12(ownerState);
  const externalForwardedProps = _extends({}, other, {
    component,
    slots,
    slotProps
  });
  const [SlotRoot, rootProps] = useSlot("root", {
    ref,
    className: clsx_m_default(classes.root, className),
    elementType: AutocompleteOptionRoot,
    externalForwardedProps,
    ownerState,
    additionalProps: {
      as: component,
      role: "option"
    }
  });
  return (0, import_jsx_runtime22.jsx)(SlotRoot, _extends({}, rootProps, {
    children
  }));
});
true ? AutocompleteOption.propTypes = {
  children: import_prop_types12.default.node,
  className: import_prop_types12.default.string,
  color: import_prop_types12.default.oneOfType([import_prop_types12.default.oneOf(["danger", "info", "neutral", "primary", "success", "warning"]), import_prop_types12.default.string]),
  component: import_prop_types12.default.elementType,
  slotProps: import_prop_types12.default.shape({
    root: import_prop_types12.default.oneOfType([import_prop_types12.default.func, import_prop_types12.default.object])
  }),
  slots: import_prop_types12.default.shape({
    root: import_prop_types12.default.elementType
  }),
  sx: import_prop_types12.default.oneOfType([import_prop_types12.default.arrayOf(import_prop_types12.default.oneOfType([import_prop_types12.default.func, import_prop_types12.default.object, import_prop_types12.default.bool])), import_prop_types12.default.func, import_prop_types12.default.object]),
  variant: import_prop_types12.default.oneOfType([import_prop_types12.default.oneOf(["contained", "light", "outlined", "text"]), import_prop_types12.default.string])
} : void 0;
var AutocompleteOption_default = AutocompleteOption;

// node_modules/@mui/joy/Autocomplete/Autocomplete.js
var import_jsx_runtime23 = __toESM(require_jsx_runtime());
var import_jsx_runtime24 = __toESM(require_jsx_runtime());
var _ClearIcon;
var _ArrowDropDownIcon;
var _excluded13 = ["autoComplete", "autoHighlight", "autoSelect", "blurOnSelect", "clearOnBlur", "clearOnEscape", "defaultValue", "disableCloseOnSelect", "disabledItemsFocusable", "disableListWrap", "filterSelectedOptions", "handleHomeEndKeys", "includeInputInList", "openOnFocus", "selectOnFocus"];
var _excluded24 = ["aria-describedby", "aria-label", "aria-labelledby", "autoFocus", "clearIcon", "clearText", "closeText", "disableClearable", "disabled", "endDecorator", "error", "filterOptions", "forcePopupIcon", "freeSolo", "getLimitTagsText", "getOptionDisabled", "getOptionLabel", "isOptionEqualToValue", "groupBy", "id", "inputValue", "limitTags", "loading", "loadingText", "multiple", "name", "noOptionsText", "onChange", "onClose", "onHighlightChange", "onInputChange", "onOpen", "open", "openText", "options", "placeholder", "popupIcon", "readOnly", "renderGroup", "renderOption", "renderTags", "required", "type", "startDecorator", "size", "color", "variant", "value", "component", "slots", "slotProps"];
var _excluded32 = ["onDelete"];
var _excluded42 = ["onBlur", "onFocus", "onMouseDown"];
var defaultIsActiveElementInListbox = (listboxRef) => listboxRef.current !== null && listboxRef.current.contains(document.activeElement);
var defaultGetOptionLabel = (option) => {
  var _option$label;
  return (_option$label = option.label) != null ? _option$label : option;
};
var defaultLimitTagsText = (more) => `+${more}`;
var defaultRenderGroup = (params) => (0, import_jsx_runtime24.jsxs)(ListItem_default, {
  nested: true,
  children: [(0, import_jsx_runtime23.jsx)(ListSubheader_default, {
    sticky: true,
    children: params.group
  }), (0, import_jsx_runtime23.jsx)(List_default, {
    children: params.children
  })]
}, params.key);
var defaultVariantMapping = {
  plain: "plain",
  outlined: "plain",
  soft: "soft",
  solid: "solid"
};
var useUtilityClasses13 = (ownerState) => {
  const {
    disabled,
    focused,
    hasClearIcon,
    hasPopupIcon,
    popupOpen,
    variant,
    color,
    size,
    multiple
  } = ownerState;
  const slots = {
    root: ["root", focused && "focused", hasClearIcon && "hasClearIcon", hasPopupIcon && "hasPopupIcon", variant && `variant${capitalize(variant)}`, color && `color${capitalize(color)}`, size && `size${capitalize(size)}`],
    wrapper: ["wrapper", multiple && "multiple"],
    input: ["input"],
    startDecorator: ["startDecorator"],
    endDecorator: ["endDecorator"],
    clearIndicator: ["clearIndicator"],
    popupIndicator: ["popupIndicator", popupOpen && "popupIndicatorOpen", disabled && "disabled"],
    listbox: ["listbox"],
    option: ["option"],
    loading: ["loading"],
    noOptions: ["noOptions"],
    limitTag: ["limitTag"]
  };
  return composeClasses(slots, getAutocompleteUtilityClass, {});
};
var AutocompleteRoot = styled_default(StyledInputRoot, {
  name: "JoyAutocomplete",
  slot: "Root",
  overridesResolver: (props, styles) => styles.root
})(({
  ownerState
}) => _extends({
  "--Autocomplete-wrapperGap": "3px"
}, ownerState.size === "lg" && {
  "--Autocomplete-wrapperGap": "4px"
}, {
  "@media (pointer: fine)": {
    [`&:hover .${autocompleteClasses_default.clearIndicator}`]: {
      visibility: "visible"
    }
  }
}, ownerState.multiple && !ownerState.startDecorator && {
  paddingInlineStart: 0
}));
var AutocompleteWrapper = styled_default("div", {
  name: "JoyAutocomplete",
  slot: "Wrapper",
  overridesResolver: (props, styles) => styles.wrapper
})(({
  ownerState
}) => ({
  flex: 1,
  minWidth: 0,
  display: "flex",
  alignItems: "center",
  flexWrap: "wrap",
  [`&.${autocompleteClasses_default.multiple}`]: _extends({
    paddingBlockEnd: "min(var(--_Input-paddingBlock), var(--Autocomplete-wrapperGap))"
  }, ownerState.startDecorator && Array.isArray(ownerState.value) && ownerState.value.length > 0 && {
    marginBlockStart: "min(var(--_Input-paddingBlock) - var(--Autocomplete-wrapperGap), 0px)",
    marginInlineStart: "calc(-1 * var(--Autocomplete-wrapperGap))",
    [`& .${autocompleteClasses_default.input}`]: {
      marginInlineStart: "max(var(--Autocomplete-wrapperGap), var(--Input-gap))"
    }
  }),
  [`& .${chipClasses_default.root}`]: {
    minWidth: 0,
    marginInlineStart: "var(--Autocomplete-wrapperGap)",
    marginBlockStart: "var(--Autocomplete-wrapperGap)"
  }
}));
var AutocompleteInput = styled_default(StyledInputHtml, {
  name: "JoyAutocomplete",
  slot: "Input",
  overridesResolver: (props, styles) => styles.input
})(({
  ownerState
}) => _extends({
  minWidth: 30,
  minHeight: "var(--Chip-minHeight)"
}, ownerState.multiple && _extends({
  marginBlockStart: "var(--Autocomplete-wrapperGap)"
}, !ownerState.startDecorator && {
  marginInlineStart: "var(--Input-paddingInline)"
})));
var AutocompleteStartDecorator = styled_default(StyledInputStartDecorator, {
  name: "JoyAutocomplete",
  slot: "StartDecorator",
  overridesResolver: (props, styles) => styles.startDecorator
})({});
var AutocompleteEndDecorator = styled_default(StyledInputEndDecorator, {
  name: "JoyAutocomplete",
  slot: "EndDecorator",
  overridesResolver: (props, styles) => styles.endDecorator
})(({
  ownerState
}) => _extends({}, (ownerState.hasClearIcon || ownerState.hasPopupIcon) && {
  "--Button-margin": "0px",
  "--IconButton-margin": "0px",
  "--Icon-margin": "0px"
}));
var AutocompleteClearIndicator = styled_default(StyledIconButton, {
  name: "JoyAutocomplete",
  slot: "ClearIndicator",
  overridesResolver: (props, styles) => styles.clearIndicator
})(({
  ownerState
}) => _extends({}, !ownerState.hasPopupIcon && {
  marginInlineEnd: "calc(var(--Input-decoratorChildOffset) * -1)"
}, {
  marginInlineStart: "calc(var(--_Input-paddingBlock) / 2)",
  visibility: ownerState.focused ? "visible" : "hidden"
}));
var AutocompletePopupIndicator = styled_default(StyledIconButton, {
  name: "JoyAutocomplete",
  slot: "PopupIndicator",
  overridesResolver: (props, styles) => styles.popupIndicator
})(({
  ownerState
}) => _extends({
  marginInlineStart: "calc(var(--_Input-paddingBlock) / 2)",
  marginInlineEnd: "calc(var(--Input-decoratorChildOffset) * -1)"
}, ownerState.popupOpen && {
  transform: "rotate(180deg)"
}));
var AutocompleteListbox3 = styled_default(StyledAutocompleteListbox, {
  name: "JoyAutocomplete",
  slot: "Listbox",
  overridesResolver: (props, styles) => styles.listbox
})({});
var AutocompleteOption3 = styled_default(StyledAutocompleteOption, {
  name: "JoyAutocomplete",
  slot: "Option",
  overridesResolver: (props, styles) => styles.option
})({});
var AutocompleteLoading = styled_default(ListItem_default, {
  name: "JoyAutocomplete",
  slot: "Loading",
  overridesResolver: (props, styles) => styles.loading
})(({
  theme
}) => ({
  color: (theme.vars || theme).palette.text.secondary
}));
var AutocompleteNoOptions = styled_default(ListItem_default, {
  name: "JoyAutocomplete",
  slot: "NoOptions",
  overridesResolver: (props, styles) => styles.noOptions
})(({
  theme
}) => ({
  color: (theme.vars || theme).palette.text.secondary
}));
var AutocompleteLimitTag = styled_default("span", {
  name: "JoyAutocomplete",
  slot: "NoOptions",
  overridesResolver: (props, styles) => styles.noOptions
})({
  marginInlineStart: "calc(var(--Input-paddingInline) / 2)",
  marginBlockStart: "var(--_Input-paddingBlock)"
});
var excludeUseAutocompleteParams = (_ref) => {
  let other = _objectWithoutPropertiesLoose(_ref, _excluded13);
  return other;
};
var Autocomplete = React28.forwardRef(function Autocomplete2(inProps, ref) {
  var _ref2, _inProps$error, _ref3, _inProps$size, _formControl$color, _ref4;
  const props = useThemeProps({
    props: inProps,
    name: "JoyAutocomplete"
  });
  const {
    "aria-describedby": ariaDescribedby,
    "aria-label": ariaLabel,
    "aria-labelledby": ariaLabelledby,
    autoFocus,
    clearIcon = _ClearIcon || (_ClearIcon = (0, import_jsx_runtime23.jsx)(Close_default, {
      fontSize: "md"
    })),
    clearText = "Clear",
    closeText = "Close",
    disableClearable = false,
    disabled: disabledProp,
    endDecorator,
    error: errorProp = false,
    forcePopupIcon = "auto",
    freeSolo = false,
    getLimitTagsText = defaultLimitTagsText,
    getOptionLabel = defaultGetOptionLabel,
    groupBy,
    id,
    limitTags = -1,
    loading = false,
    loadingText = "Loading\u2026",
    multiple = false,
    name,
    noOptionsText = "No options",
    openText = "Open",
    placeholder,
    popupIcon = _ArrowDropDownIcon || (_ArrowDropDownIcon = (0, import_jsx_runtime23.jsx)(ArrowDropDown_default, {})),
    readOnly = false,
    renderGroup = defaultRenderGroup,
    renderOption: renderOptionProp,
    renderTags,
    required,
    type,
    startDecorator,
    size: sizeProp = "md",
    color: colorProp = "neutral",
    variant = "outlined",
    component,
    slots = {},
    slotProps = {}
  } = props, otherProps = _objectWithoutPropertiesLoose(props, _excluded24);
  const other = excludeUseAutocompleteParams(otherProps);
  const {
    getColor
  } = useColorInversion(variant);
  const formControl = React28.useContext(FormControlContext_default);
  const error = (_ref2 = (_inProps$error = inProps.error) != null ? _inProps$error : formControl == null ? void 0 : formControl.error) != null ? _ref2 : errorProp;
  const size = (_ref3 = (_inProps$size = inProps.size) != null ? _inProps$size : formControl == null ? void 0 : formControl.size) != null ? _ref3 : sizeProp;
  const color = getColor(inProps.color, error ? "danger" : (_formControl$color = formControl == null ? void 0 : formControl.color) != null ? _formControl$color : colorProp);
  const disabled = (_ref4 = disabledProp != null ? disabledProp : formControl == null ? void 0 : formControl.disabled) != null ? _ref4 : false;
  const {
    getRootProps,
    getInputProps,
    getPopupIndicatorProps,
    getClearProps,
    getTagProps,
    getListboxProps,
    getOptionProps,
    value,
    dirty,
    popupOpen,
    focused,
    focusedTag,
    anchorEl,
    setAnchorEl,
    inputValue,
    groupedOptions
  } = useAutocomplete(_extends({}, props, {
    id: id != null ? id : formControl == null ? void 0 : formControl.htmlFor,
    componentName: "Autocomplete",
    unstable_classNamePrefix: "Joy",
    unstable_isActiveElementInListbox: defaultIsActiveElementInListbox
  }));
  const {
    onMouseDown: handleInputMouseDown
  } = getInputProps();
  const {
    onClick: handleRootOnClick
  } = getRootProps();
  const hasClearIcon = !disableClearable && !disabled && dirty && !readOnly;
  const hasPopupIcon = (!freeSolo || forcePopupIcon === true) && forcePopupIcon !== false;
  const ownerState = _extends({}, props, {
    value,
    disabled,
    focused,
    hasOptions: !!groupedOptions.length,
    hasClearIcon,
    hasPopupIcon,
    inputFocused: focusedTag === -1,
    popupOpen,
    size,
    color,
    variant
  });
  const classes = useUtilityClasses13(ownerState);
  const externalForwardedProps = _extends({}, other, {
    component,
    slots,
    slotProps
  });
  let selectedOptions;
  if (multiple && value.length > 0) {
    const getCustomizedTagProps = (params) => {
      const _getTagProps = getTagProps(params), {
        onDelete
      } = _getTagProps, tagProps = _objectWithoutPropertiesLoose(_getTagProps, _excluded32);
      return _extends({
        disabled,
        size,
        onClick: onDelete
      }, tagProps);
    };
    if (renderTags) {
      selectedOptions = renderTags(value, getCustomizedTagProps, ownerState);
    } else {
      selectedOptions = value.map((option, index) => {
        return (0, import_jsx_runtime23.jsx)(Chip_default, {
          size,
          variant: "soft",
          color: color === "context" ? void 0 : "neutral",
          endDecorator: (0, import_jsx_runtime23.jsx)(ChipDelete_default, _extends({}, getCustomizedTagProps({
            index
          }))),
          children: getOptionLabel(option)
        }, index);
      });
    }
  }
  const rootRef = useForkRef(ref, setAnchorEl);
  const rootStateClasses = {
    [autocompleteClasses_default.disabled]: disabled,
    [autocompleteClasses_default.error]: error,
    [autocompleteClasses_default.focused]: focused,
    [autocompleteClasses_default.formControl]: Boolean(formControl)
  };
  const [SlotRoot, rootProps] = useSlot("root", {
    ref: rootRef,
    className: [classes.root, rootStateClasses],
    elementType: AutocompleteRoot,
    externalForwardedProps,
    ownerState,
    getSlotProps: getRootProps,
    additionalProps: {
      onClick: (event) => {
        if (handleRootOnClick) {
          handleRootOnClick(event);
        }
        if (event.currentTarget === event.target && handleInputMouseDown) {
          handleInputMouseDown(event);
        }
      }
    }
  });
  const [SlotWrapper, wrapperProps] = useSlot("wrapper", {
    className: classes.wrapper,
    elementType: AutocompleteWrapper,
    externalForwardedProps,
    ownerState
  });
  const inputStateClasses = {
    [autocompleteClasses_default.disabled]: disabled
  };
  const [SlotInput, inputProps] = useSlot("input", {
    className: [classes.input, inputStateClasses],
    elementType: AutocompleteInput,
    getSlotProps: (handlers) => {
      const _getInputProps = getInputProps(), {
        onBlur,
        onFocus,
        onMouseDown
      } = _getInputProps, inputSlotProps = _objectWithoutPropertiesLoose(_getInputProps, _excluded42);
      return _extends({}, inputSlotProps, {
        onBlur: (event) => {
          var _handlers$onBlur;
          onBlur == null ? void 0 : onBlur(event);
          (_handlers$onBlur = handlers.onBlur) == null ? void 0 : _handlers$onBlur.call(handlers, event);
        },
        onFocus: (event) => {
          var _handlers$onFocus;
          onFocus == null ? void 0 : onFocus(event);
          (_handlers$onFocus = handlers.onFocus) == null ? void 0 : _handlers$onFocus.call(handlers, event);
        },
        onMouseDown: (event) => {
          var _handlers$onMouseDown;
          onMouseDown == null ? void 0 : onMouseDown(event);
          (_handlers$onMouseDown = handlers.onMouseDown) == null ? void 0 : _handlers$onMouseDown.call(handlers, event);
        }
      });
    },
    externalForwardedProps,
    ownerState,
    additionalProps: {
      autoFocus,
      placeholder,
      name,
      readOnly,
      disabled,
      required: required != null ? required : formControl == null ? void 0 : formControl.required,
      type,
      "aria-invalid": error || void 0,
      "aria-label": ariaLabel,
      "aria-labelledby": ariaLabelledby,
      "aria-describedby": ariaDescribedby != null ? ariaDescribedby : formControl == null ? void 0 : formControl["aria-describedby"]
    }
  });
  const [SlotStartDecorator, startDecoratorProps] = useSlot("startDecorator", {
    className: classes.startDecorator,
    elementType: AutocompleteStartDecorator,
    externalForwardedProps,
    ownerState
  });
  const [SlotEndDecorator, endDecoratorProps] = useSlot("endDecorator", {
    className: classes.endDecorator,
    elementType: AutocompleteEndDecorator,
    externalForwardedProps,
    ownerState
  });
  const [SlotClearIndicator, clearIndicatorProps] = useSlot("clearIndicator", {
    className: classes.clearIndicator,
    elementType: AutocompleteClearIndicator,
    getSlotProps: getClearProps,
    externalForwardedProps,
    ownerState,
    getSlotOwnerState: (mergedProps) => ({
      size: mergedProps.size || size,
      variant: mergedProps.variant || defaultVariantMapping[variant] || "plain",
      color: mergedProps.color || "neutral"
    }),
    additionalProps: {
      "aria-label": clearText,
      title: clearText
    }
  });
  const [SlotPopupIndicator, popupIndicatorProps] = useSlot("popupIndicator", {
    className: classes.popupIndicator,
    elementType: AutocompletePopupIndicator,
    getSlotProps: getPopupIndicatorProps,
    externalForwardedProps,
    ownerState,
    getSlotOwnerState: (mergedProps) => ({
      size: mergedProps.size || size,
      variant: mergedProps.variant || defaultVariantMapping[variant] || "plain",
      color: mergedProps.color || "neutral"
    }),
    additionalProps: {
      disabled,
      "aria-label": popupOpen ? closeText : openText,
      title: popupOpen ? closeText : openText,
      type: "button"
    }
  });
  const [SlotListbox, listboxProps] = useSlot("listbox", {
    className: classes.listbox,
    elementType: AutocompleteListbox3,
    getSlotProps: getListboxProps,
    externalForwardedProps,
    ownerState,
    getSlotOwnerState: (mergedProps) => ({
      size: mergedProps.size || size,
      variant: mergedProps.variant || "outlined",
      color: mergedProps.color || "neutral",
      disableColorInversion: !mergedProps.disablePortal
    }),
    additionalProps: {
      anchorEl,
      open: popupOpen,
      style: anchorEl ? {
        width: anchorEl.clientWidth
      } : {}
    }
  });
  const [SlotLoading, loadingProps] = useSlot("loading", {
    className: classes.loading,
    elementType: AutocompleteLoading,
    externalForwardedProps,
    ownerState
  });
  const [SlotNoOptions, noOptionsProps] = useSlot("noOptions", {
    className: classes.noOptions,
    elementType: AutocompleteNoOptions,
    externalForwardedProps,
    ownerState,
    additionalProps: {
      role: "presentation",
      onMouseDown: (event) => {
        event.preventDefault();
      }
    }
  });
  const [SlotLimitTag, limitTagProps] = useSlot("limitTag", {
    className: classes.limitTag,
    elementType: AutocompleteLimitTag,
    externalForwardedProps,
    ownerState
  });
  if (limitTags > -1 && Array.isArray(selectedOptions)) {
    const more = selectedOptions.length - limitTags;
    if (!focused && more > 0) {
      selectedOptions = selectedOptions.splice(0, limitTags);
      selectedOptions.push((0, import_jsx_runtime23.jsx)(SlotLimitTag, _extends({}, limitTagProps, {
        children: getLimitTagsText(more)
      }), selectedOptions.length));
    }
  }
  const [SlotOption, baseOptionProps] = useSlot("option", {
    className: classes.option,
    elementType: AutocompleteOption3,
    externalForwardedProps,
    ownerState,
    getSlotOwnerState: (mergedProps) => ({
      variant: mergedProps.variant || "plain",
      color: mergedProps.color || "neutral",
      disableColorInversion: !listboxProps.disablePortal
    }),
    additionalProps: {
      as: "li"
    }
  });
  const defaultRenderOption = (optionProps, option) => (0, import_jsx_runtime23.jsx)(SlotOption, _extends({}, optionProps, {
    children: getOptionLabel(option)
  }));
  const renderOption = renderOptionProp || defaultRenderOption;
  const renderListOption = (option, index) => {
    const optionProps = getOptionProps({
      option,
      index
    });
    return renderOption(_extends({}, baseOptionProps, optionProps), option, {
      selected: !!optionProps["aria-selected"],
      inputValue,
      ownerState
    });
  };
  const modifiers = React28.useMemo(() => [{
    name: "offset",
    options: {
      offset: [0, 4]
    }
  }, ...listboxProps.modifiers || []], [listboxProps.modifiers]);
  let popup = null;
  if (anchorEl) {
    var _listboxProps$ownerSt, _props$slots;
    popup = (0, import_jsx_runtime23.jsx)(ListProvider_default, {
      nested: true,
      children: (0, import_jsx_runtime24.jsxs)(SlotListbox, _extends({}, listboxProps, {
        className: clsx_m_default(listboxProps.className, ((_listboxProps$ownerSt = listboxProps.ownerState) == null ? void 0 : _listboxProps$ownerSt.color) === "context" && autocompleteClasses_default.colorContext),
        modifiers
      }, !((_props$slots = props.slots) != null && _props$slots.listbox) && {
        as: Popper_default,
        slots: {
          root: listboxProps.as || "ul"
        }
      }, {
        children: [groupedOptions.map((option, index) => {
          if (groupBy) {
            const typedOption = option;
            return renderGroup({
              key: String(typedOption.key),
              group: typedOption.group,
              children: typedOption.options.map((option2, index2) => renderListOption(option2, typedOption.index + index2))
            });
          }
          return renderListOption(option, index);
        }), loading && groupedOptions.length === 0 ? (0, import_jsx_runtime23.jsx)(SlotLoading, _extends({}, loadingProps, {
          children: loadingText
        })) : null, groupedOptions.length === 0 && !freeSolo && !loading ? (0, import_jsx_runtime23.jsx)(SlotNoOptions, _extends({}, noOptionsProps, {
          children: noOptionsText
        })) : null]
      }))
    });
    if (!listboxProps.disablePortal) {
      popup = (0, import_jsx_runtime23.jsx)(ColorInversion_default.Provider, {
        value: void 0,
        children: popup
      });
    }
  }
  return (0, import_jsx_runtime24.jsxs)(React28.Fragment, {
    children: [(0, import_jsx_runtime24.jsxs)(SlotRoot, _extends({}, rootProps, {
      children: [startDecorator && (0, import_jsx_runtime23.jsx)(SlotStartDecorator, _extends({}, startDecoratorProps, {
        children: startDecorator
      })), (0, import_jsx_runtime24.jsxs)(SlotWrapper, _extends({}, wrapperProps, {
        children: [selectedOptions, (0, import_jsx_runtime23.jsx)(SlotInput, _extends({}, inputProps))]
      })), endDecorator && (0, import_jsx_runtime23.jsx)(SlotEndDecorator, _extends({}, endDecoratorProps, {
        children: endDecorator
      })), hasClearIcon ? (0, import_jsx_runtime23.jsx)(SlotClearIndicator, _extends({}, clearIndicatorProps, {
        children: clearIcon
      })) : null, hasPopupIcon ? (0, import_jsx_runtime23.jsx)(SlotPopupIndicator, _extends({}, popupIndicatorProps, {
        children: popupIcon
      })) : null]
    })), popup]
  });
});
true ? Autocomplete.propTypes = {
  "aria-describedby": import_prop_types13.default.string,
  "aria-label": import_prop_types13.default.string,
  "aria-labelledby": import_prop_types13.default.string,
  autoFocus: import_prop_types13.default.bool,
  clearIcon: import_prop_types13.default.node,
  clearText: import_prop_types13.default.string,
  closeText: import_prop_types13.default.string,
  color: import_prop_types13.default.oneOf(["danger", "info", "neutral", "primary", "success", "warning"]),
  defaultValue: chainPropTypes(import_prop_types13.default.any, (props) => {
    if (props.multiple && props.defaultValue !== void 0 && !Array.isArray(props.defaultValue)) {
      return new Error(["MUI: The Autocomplete expects the `defaultValue` prop to be an array when `multiple={true}` or undefined.", `However, ${props.defaultValue} was provided.`].join("\n"));
    }
    return null;
  }),
  disableClearable: import_prop_types13.default.bool,
  disabled: import_prop_types13.default.bool,
  endDecorator: import_prop_types13.default.node,
  error: import_prop_types13.default.bool,
  filterOptions: import_prop_types13.default.func,
  forcePopupIcon: import_prop_types13.default.oneOfType([import_prop_types13.default.oneOf(["auto"]), import_prop_types13.default.bool]),
  freeSolo: import_prop_types13.default.bool,
  getLimitTagsText: import_prop_types13.default.func,
  getOptionDisabled: import_prop_types13.default.func,
  getOptionLabel: import_prop_types13.default.func,
  groupBy: import_prop_types13.default.func,
  id: import_prop_types13.default.string,
  inputValue: import_prop_types13.default.string,
  isOptionEqualToValue: import_prop_types13.default.func,
  limitTags: integerPropType_default,
  loading: import_prop_types13.default.bool,
  loadingText: import_prop_types13.default.node,
  multiple: import_prop_types13.default.bool,
  name: import_prop_types13.default.string,
  noOptionsText: import_prop_types13.default.node,
  onChange: import_prop_types13.default.func,
  onClose: import_prop_types13.default.func,
  onHighlightChange: import_prop_types13.default.func,
  onInputChange: import_prop_types13.default.func,
  onKeyDown: import_prop_types13.default.func,
  onOpen: import_prop_types13.default.func,
  open: import_prop_types13.default.bool,
  openText: import_prop_types13.default.string,
  options: import_prop_types13.default.array.isRequired,
  placeholder: import_prop_types13.default.string,
  popupIcon: import_prop_types13.default.node,
  readOnly: import_prop_types13.default.bool,
  renderGroup: import_prop_types13.default.func,
  renderOption: import_prop_types13.default.func,
  renderTags: import_prop_types13.default.func,
  required: import_prop_types13.default.bool,
  size: import_prop_types13.default.oneOfType([import_prop_types13.default.oneOf(["sm", "md", "lg"]), import_prop_types13.default.string]),
  slotProps: import_prop_types13.default.shape({
    clearIndicator: import_prop_types13.default.oneOfType([import_prop_types13.default.func, import_prop_types13.default.object]),
    endDecorator: import_prop_types13.default.oneOfType([import_prop_types13.default.func, import_prop_types13.default.object]),
    input: import_prop_types13.default.oneOfType([import_prop_types13.default.func, import_prop_types13.default.object]),
    limitTag: import_prop_types13.default.oneOfType([import_prop_types13.default.func, import_prop_types13.default.object]),
    listbox: import_prop_types13.default.oneOfType([import_prop_types13.default.func, import_prop_types13.default.object]),
    loading: import_prop_types13.default.oneOfType([import_prop_types13.default.func, import_prop_types13.default.object]),
    noOptions: import_prop_types13.default.oneOfType([import_prop_types13.default.func, import_prop_types13.default.object]),
    option: import_prop_types13.default.oneOfType([import_prop_types13.default.func, import_prop_types13.default.object]),
    popupIndicator: import_prop_types13.default.oneOfType([import_prop_types13.default.func, import_prop_types13.default.object]),
    root: import_prop_types13.default.oneOfType([import_prop_types13.default.func, import_prop_types13.default.object]),
    startDecorator: import_prop_types13.default.oneOfType([import_prop_types13.default.func, import_prop_types13.default.object]),
    wrapper: import_prop_types13.default.oneOfType([import_prop_types13.default.func, import_prop_types13.default.object])
  }),
  slots: import_prop_types13.default.shape({
    clearIndicator: import_prop_types13.default.elementType,
    endDecorator: import_prop_types13.default.elementType,
    input: import_prop_types13.default.elementType,
    limitTag: import_prop_types13.default.elementType,
    listbox: import_prop_types13.default.elementType,
    loading: import_prop_types13.default.elementType,
    noOptions: import_prop_types13.default.elementType,
    option: import_prop_types13.default.elementType,
    popupIndicator: import_prop_types13.default.elementType,
    root: import_prop_types13.default.elementType,
    startDecorator: import_prop_types13.default.elementType,
    wrapper: import_prop_types13.default.elementType
  }),
  startDecorator: import_prop_types13.default.node,
  sx: import_prop_types13.default.oneOfType([import_prop_types13.default.arrayOf(import_prop_types13.default.oneOfType([import_prop_types13.default.func, import_prop_types13.default.object, import_prop_types13.default.bool])), import_prop_types13.default.func, import_prop_types13.default.object]),
  type: import_prop_types13.default.string,
  value: chainPropTypes(import_prop_types13.default.any, (props) => {
    if (props.multiple && props.value !== void 0 && !Array.isArray(props.value)) {
      return new Error(["MUI: The Autocomplete expects the `value` prop to be an array when `multiple={true}` or undefined.", `However, ${props.value} was provided.`].join("\n"));
    }
    return null;
  }),
  variant: import_prop_types13.default.oneOf(["outlined", "plain", "soft", "solid"])
} : void 0;
var Autocomplete_default = Autocomplete;

// node_modules/@mui/joy/Avatar/Avatar.js
init_objectWithoutPropertiesLoose();
init_extends();
var React31 = __toESM(require_react());
var import_prop_types15 = __toESM(require_prop_types());
init_base();
init_esm();

// node_modules/@mui/joy/internal/svg-icons/Person.js
var React29 = __toESM(require_react());
var import_jsx_runtime25 = __toESM(require_jsx_runtime());
var Person_default = createSvgIcon((0, import_jsx_runtime25.jsx)("path", {
  d: "M12 12c2.21 0 4-1.79 4-4s-1.79-4-4-4-4 1.79-4 4 1.79 4 4 4zm0 2c-2.67 0-8 1.34-8 4v2h16v-2c0-2.66-5.33-4-8-4z"
}), "Person");

// node_modules/@mui/joy/Avatar/avatarClasses.js
function getAvatarUtilityClass(slot) {
  return generateUtilityClass2("MuiAvatar", slot);
}
var avatarClasses = generateUtilityClasses2("MuiAvatar", ["root", "colorPrimary", "colorNeutral", "colorDanger", "colorInfo", "colorSuccess", "colorWarning", "colorContext", "fallback", "sizeSm", "sizeMd", "sizeLg", "img", "variantOutlined", "variantSoft", "variantSolid"]);
var avatarClasses_default = avatarClasses;

// node_modules/@mui/joy/AvatarGroup/AvatarGroup.js
init_objectWithoutPropertiesLoose();
init_extends();
var React30 = __toESM(require_react());
init_clsx_m();
var import_prop_types14 = __toESM(require_prop_types());
init_base();

// node_modules/@mui/joy/AvatarGroup/avatarGroupClasses.js
function getAvatarGroupUtilityClass(slot) {
  return generateUtilityClass2("MuiAvatarGroup", slot);
}
var avatarGroupClasses = generateUtilityClasses2("MuiAvatarGroup", ["root"]);
var avatarGroupClasses_default = avatarGroupClasses;

// node_modules/@mui/joy/AvatarGroup/AvatarGroup.js
var import_jsx_runtime26 = __toESM(require_jsx_runtime());
var _excluded14 = ["className", "color", "component", "size", "variant", "children", "slots", "slotProps"];
var AvatarGroupContext = React30.createContext(void 0);
var useUtilityClasses14 = () => {
  const slots = {
    root: ["root"]
  };
  return composeClasses(slots, getAvatarGroupUtilityClass, {});
};
var AvatarGroupGroupRoot = styled_default("div", {
  name: "JoyAvatarGroup",
  slot: "Root",
  overridesResolver: (props, styles) => styles.root
})(({
  ownerState,
  theme
}) => _extends({}, ownerState.size === "sm" && {
  "--AvatarGroup-gap": "-0.375rem",
  "--Avatar-ringSize": "2px"
}, ownerState.size === "md" && {
  "--AvatarGroup-gap": "-0.5rem",
  "--Avatar-ringSize": "2px"
}, ownerState.size === "lg" && {
  "--AvatarGroup-gap": "-0.625rem",
  "--Avatar-ringSize": "4px"
}, {
  "--Avatar-ring": `0 0 0 var(--Avatar-ringSize) var(--Avatar-ringColor, ${theme.vars.palette.background.surface})`,
  "--Avatar-marginInlineStart": "var(--AvatarGroup-gap)",
  display: "flex",
  marginInlineStart: "calc(-1 * var(--AvatarGroup-gap))"
}));
var AvatarGroup = React30.forwardRef(function AvatarGroup2(inProps, ref) {
  const props = useThemeProps({
    props: inProps,
    name: "JoyAvatarGroup"
  });
  const {
    className,
    color,
    component = "div",
    size = "md",
    variant,
    children,
    slots = {},
    slotProps = {}
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded14);
  const ownerState = React30.useMemo(() => _extends({}, props, {
    color,
    component,
    size,
    variant
  }), [color, component, props, size, variant]);
  const classes = useUtilityClasses14();
  const [SlotRoot, rootProps] = useSlot("root", {
    ref,
    className: clsx_m_default(classes.root, className),
    elementType: AvatarGroupGroupRoot,
    externalForwardedProps: _extends({}, other, {
      component,
      slots,
      slotProps
    }),
    ownerState
  });
  return (0, import_jsx_runtime26.jsx)(AvatarGroupContext.Provider, {
    value: ownerState,
    children: (0, import_jsx_runtime26.jsx)(SlotRoot, _extends({}, rootProps, {
      children
    }))
  });
});
true ? AvatarGroup.propTypes = {
  children: import_prop_types14.default.node,
  className: import_prop_types14.default.string,
  color: import_prop_types14.default.oneOfType([import_prop_types14.default.oneOf(["danger", "info", "neutral", "primary", "success", "warning"]), import_prop_types14.default.string]),
  component: import_prop_types14.default.elementType,
  size: import_prop_types14.default.oneOfType([import_prop_types14.default.oneOf(["lg", "md", "sm"]), import_prop_types14.default.string]),
  slotProps: import_prop_types14.default.shape({
    root: import_prop_types14.default.oneOfType([import_prop_types14.default.func, import_prop_types14.default.object])
  }),
  slots: import_prop_types14.default.shape({
    root: import_prop_types14.default.elementType
  }),
  sx: import_prop_types14.default.oneOfType([import_prop_types14.default.arrayOf(import_prop_types14.default.oneOfType([import_prop_types14.default.func, import_prop_types14.default.object, import_prop_types14.default.bool])), import_prop_types14.default.func, import_prop_types14.default.object]),
  variant: import_prop_types14.default.oneOfType([import_prop_types14.default.oneOf(["outlined", "plain", "soft", "solid"]), import_prop_types14.default.string])
} : void 0;
var AvatarGroup_default = AvatarGroup;

// node_modules/@mui/joy/Avatar/Avatar.js
var import_jsx_runtime27 = __toESM(require_jsx_runtime());
var _excluded15 = ["alt", "color", "size", "variant", "src", "srcSet", "children", "component", "slots", "slotProps"];
var useUtilityClasses15 = (ownerState) => {
  const {
    size,
    variant,
    color,
    src,
    srcSet
  } = ownerState;
  const slots = {
    root: ["root", variant && `variant${capitalize(variant)}`, color && `color${capitalize(color)}`, size && `size${capitalize(size)}`],
    img: [(src || srcSet) && "img"],
    fallback: ["fallback"]
  };
  return composeClasses(slots, getAvatarUtilityClass, {});
};
var AvatarRoot = styled_default("div", {
  name: "JoyAvatar",
  slot: "Root",
  overridesResolver: (props, styles) => styles.root
})(({
  theme,
  ownerState
}) => {
  var _theme$variants;
  return [_extends({}, ownerState.size === "sm" && {
    width: `var(--Avatar-size, 2rem)`,
    height: `var(--Avatar-size, 2rem)`,
    fontSize: theme.vars.fontSize.sm
  }, ownerState.size === "md" && {
    width: `var(--Avatar-size, 2.5rem)`,
    height: `var(--Avatar-size, 2.5rem)`,
    fontSize: theme.vars.fontSize.md
  }, ownerState.size === "lg" && {
    width: `var(--Avatar-size, 3rem)`,
    height: `var(--Avatar-size, 3rem)`,
    fontSize: theme.vars.fontSize.lg
  }, {
    marginInlineStart: "var(--Avatar-marginInlineStart)",
    boxShadow: `var(--Avatar-ring)`,
    fontFamily: theme.vars.fontFamily.body,
    fontWeight: theme.vars.fontWeight.md,
    position: "relative",
    display: "flex",
    alignItems: "center",
    justifyContent: "center",
    flexShrink: 0,
    lineHeight: 1,
    overflow: "hidden",
    borderRadius: "var(--Avatar-radius, 50%)",
    userSelect: "none"
  }), (_theme$variants = theme.variants[ownerState.variant]) == null ? void 0 : _theme$variants[ownerState.color]];
});
var AvatarImg = styled_default("img", {
  name: "JoyAvatar",
  slot: "Img",
  overridesResolver: (props, styles) => styles.img
})({
  width: "100%",
  height: "100%",
  textAlign: "center",
  objectFit: "cover",
  color: "transparent",
  textIndent: 1e4
});
var AvatarFallback = styled_default(Person_default, {
  name: "JoyAvatar",
  slot: "Fallback",
  overridesResolver: (props, styles) => styles.fallback
})({
  width: "64%",
  height: "64%"
});
function useLoaded({
  crossOrigin,
  referrerPolicy,
  src,
  srcSet
}) {
  const [loaded, setLoaded] = React31.useState(false);
  React31.useEffect(() => {
    if (!src && !srcSet) {
      return void 0;
    }
    setLoaded(false);
    let active = true;
    const image = new Image();
    image.onload = () => {
      if (!active) {
        return;
      }
      setLoaded("loaded");
    };
    image.onerror = () => {
      if (!active) {
        return;
      }
      setLoaded("error");
    };
    image.crossOrigin = crossOrigin;
    image.referrerPolicy = referrerPolicy;
    if (src) {
      image.src = src;
    }
    if (srcSet) {
      image.srcset = srcSet;
    }
    return () => {
      active = false;
    };
  }, [crossOrigin, referrerPolicy, src, srcSet]);
  return loaded;
}
var Avatar = React31.forwardRef(function Avatar2(inProps, ref) {
  const props = useThemeProps({
    props: inProps,
    name: "JoyAvatar"
  });
  const groupContext = React31.useContext(AvatarGroupContext);
  const {
    alt,
    color: colorProp = "neutral",
    size: sizeProp = "md",
    variant: variantProp = "soft",
    src,
    srcSet,
    children: childrenProp,
    component,
    slots = {},
    slotProps = {}
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded15);
  const variant = inProps.variant || (groupContext == null ? void 0 : groupContext.variant) || variantProp;
  const {
    getColor
  } = useColorInversion(variant);
  const colorFromContext = inProps.color || (groupContext == null ? void 0 : groupContext.color);
  const color = colorFromContext !== "context" ? getColor(colorFromContext, colorProp) : colorProp;
  const size = inProps.size || (groupContext == null ? void 0 : groupContext.size) || sizeProp;
  let children = null;
  const ownerState = _extends({}, props, {
    color,
    size,
    variant,
    grouped: !!groupContext
  });
  const classes = useUtilityClasses15(ownerState);
  const externalForwardedProps = _extends({}, other, {
    component,
    slots,
    slotProps
  });
  const [SlotRoot, rootProps] = useSlot("root", {
    ref,
    className: classes.root,
    elementType: AvatarRoot,
    externalForwardedProps,
    ownerState
  });
  const [SlotImg, imageProps] = useSlot("img", {
    additionalProps: {
      alt,
      src,
      srcSet
    },
    className: classes.img,
    elementType: AvatarImg,
    externalForwardedProps,
    ownerState
  });
  const [SlotFallback, fallbackProps] = useSlot("fallback", {
    className: classes.fallback,
    elementType: AvatarFallback,
    externalForwardedProps,
    ownerState
  });
  const loaded = useLoaded(_extends({}, imageProps, {
    src,
    srcSet
  }));
  const hasImg = src || srcSet;
  const hasImgNotFailing = hasImg && loaded !== "error";
  if (hasImgNotFailing) {
    children = (0, import_jsx_runtime27.jsx)(SlotImg, _extends({}, imageProps));
  } else if (childrenProp != null) {
    children = childrenProp;
  } else if (hasImg && alt) {
    children = alt[0];
  } else {
    children = (0, import_jsx_runtime27.jsx)(SlotFallback, _extends({}, fallbackProps));
  }
  return (0, import_jsx_runtime27.jsx)(SlotRoot, _extends({}, rootProps, {
    children
  }));
});
true ? Avatar.propTypes = {
  alt: import_prop_types15.default.string,
  children: import_prop_types15.default.node,
  color: import_prop_types15.default.oneOfType([import_prop_types15.default.oneOf(["danger", "info", "neutral", "primary", "success", "warning"]), import_prop_types15.default.string]),
  component: import_prop_types15.default.elementType,
  size: import_prop_types15.default.oneOfType([import_prop_types15.default.oneOf(["lg", "md", "sm"]), import_prop_types15.default.string]),
  slotProps: import_prop_types15.default.shape({
    fallback: import_prop_types15.default.oneOfType([import_prop_types15.default.func, import_prop_types15.default.object]),
    img: import_prop_types15.default.oneOfType([import_prop_types15.default.func, import_prop_types15.default.object]),
    root: import_prop_types15.default.oneOfType([import_prop_types15.default.func, import_prop_types15.default.object])
  }),
  slots: import_prop_types15.default.shape({
    fallback: import_prop_types15.default.elementType,
    img: import_prop_types15.default.elementType,
    root: import_prop_types15.default.elementType
  }),
  src: import_prop_types15.default.string,
  srcSet: import_prop_types15.default.string,
  sx: import_prop_types15.default.oneOfType([import_prop_types15.default.arrayOf(import_prop_types15.default.oneOfType([import_prop_types15.default.func, import_prop_types15.default.object, import_prop_types15.default.bool])), import_prop_types15.default.func, import_prop_types15.default.object]),
  variant: import_prop_types15.default.oneOfType([import_prop_types15.default.oneOf(["outlined", "plain", "soft", "solid"]), import_prop_types15.default.string])
} : void 0;
var Avatar_default = Avatar;

// node_modules/@mui/joy/Badge/Badge.js
init_objectWithoutPropertiesLoose();
init_extends();
var React32 = __toESM(require_react());
var import_prop_types16 = __toESM(require_prop_types());
init_esm();
init_base();

// node_modules/@mui/joy/Badge/badgeClasses.js
function getBadgeUtilityClass(slot) {
  return generateUtilityClass2("MuiBadge", slot);
}
var badgeClasses = generateUtilityClasses2("MuiBadge", ["root", "badge", "anchorOriginTopRight", "anchorOriginBottomRight", "anchorOriginTopLeft", "anchorOriginBottomLeft", "colorPrimary", "colorDanger", "colorInfo", "colorNeutral", "colorSuccess", "colorWarning", "colorContext", "invisible", "locationInside", "locationOutside", "sizeSm", "sizeMd", "sizeLg", "variantPlain", "variantOutlined", "variantSoft", "variantSolid"]);
var badgeClasses_default = badgeClasses;

// node_modules/@mui/joy/Badge/Badge.js
var import_jsx_runtime28 = __toESM(require_jsx_runtime());
var import_jsx_runtime29 = __toESM(require_jsx_runtime());
var _excluded16 = ["anchorOrigin", "badgeInset", "children", "size", "color", "invisible", "max", "badgeContent", "showZero", "variant", "component", "slots", "slotProps"];
var useUtilityClasses16 = (ownerState) => {
  const {
    color,
    variant,
    size,
    anchorOrigin,
    invisible
  } = ownerState;
  const slots = {
    root: ["root"],
    badge: ["badge", invisible && "invisible", anchorOrigin && `anchorOrigin${capitalize(anchorOrigin.vertical)}${capitalize(anchorOrigin.horizontal)}`, variant && `variant${capitalize(variant)}`, color && `color${capitalize(color)}`, size && `size${capitalize(size)}`]
  };
  return composeClasses(slots, getBadgeUtilityClass, {});
};
var BadgeRoot = styled_default("span", {
  name: "JoyBadge",
  slot: "Root",
  overridesResolver: (props, styles) => styles.root
})(({
  theme,
  ownerState
}) => _extends({}, ownerState.size === "sm" && _extends({
  "--Badge-minHeight": "0.5rem"
}, ownerState.badgeContent && {
  "--Badge-minHeight": "1rem"
}, {
  "--Badge-paddingX": "0.25rem",
  fontSize: theme.vars.fontSize.xs
}), ownerState.size === "md" && _extends({
  "--Badge-minHeight": "0.75rem"
}, ownerState.badgeContent && {
  "--Badge-minHeight": "1.25rem"
}, {
  "--Badge-paddingX": "0.375rem",
  fontSize: theme.vars.fontSize.sm
}), ownerState.size === "lg" && _extends({
  "--Badge-minHeight": "1rem"
}, ownerState.badgeContent && {
  "--Badge-minHeight": "1.5rem"
}, {
  "--Badge-paddingX": "0.5rem",
  fontSize: theme.vars.fontSize.md
}), {
  "--Badge-ringSize": "2px",
  "--Badge-ring": `0 0 0 var(--Badge-ringSize) var(--Badge-ringColor, ${theme.vars.palette.background.surface})`,
  position: "relative",
  display: "inline-flex",
  verticalAlign: "middle",
  flexShrink: 0
}));
var BadgeBadge = styled_default("span", {
  name: "JoyBadge",
  slot: "Badge",
  overridesResolver: (props, styles) => styles.badge
})(({
  theme,
  ownerState
}) => {
  var _ownerState$anchorOri, _ownerState$anchorOri2, _ownerState$anchorOri3, _ownerState$anchorOri4, _theme$variants;
  const inset = {
    top: ownerState.badgeInset,
    left: ownerState.badgeInset,
    bottom: ownerState.badgeInset,
    right: ownerState.badgeInset
  };
  if (typeof ownerState.badgeInset === "string") {
    const insetValues = ownerState.badgeInset.split(" ");
    if (insetValues.length > 1) {
      inset.top = insetValues[0];
      inset.right = insetValues[1];
      if (insetValues.length === 2) {
        inset.bottom = insetValues[0];
        inset.left = insetValues[1];
      }
      if (insetValues.length === 3) {
        inset.left = insetValues[1];
        inset.bottom = insetValues[2];
      }
      if (insetValues.length === 4) {
        inset.bottom = insetValues[2];
        inset.left = insetValues[3];
      }
    }
  }
  const translateY = ((_ownerState$anchorOri = ownerState.anchorOrigin) == null ? void 0 : _ownerState$anchorOri.vertical) === "top" ? "translateY(-50%)" : "translateY(50%)";
  const translateX = ((_ownerState$anchorOri2 = ownerState.anchorOrigin) == null ? void 0 : _ownerState$anchorOri2.horizontal) === "left" ? "translateX(-50%)" : "translateX(50%)";
  const transformOriginY = ((_ownerState$anchorOri3 = ownerState.anchorOrigin) == null ? void 0 : _ownerState$anchorOri3.vertical) === "top" ? "0%" : "100%";
  const transformOriginX = ((_ownerState$anchorOri4 = ownerState.anchorOrigin) == null ? void 0 : _ownerState$anchorOri4.horizontal) === "left" ? "0%" : "100%";
  return _extends({
    display: "inline-flex",
    flexWrap: "wrap",
    justifyContent: "center",
    alignContent: "center",
    alignItems: "center",
    position: "absolute",
    boxSizing: "border-box",
    boxShadow: "var(--Badge-ring)",
    fontFamily: theme.vars.fontFamily.body,
    fontWeight: theme.vars.fontWeight.md,
    lineHeight: 1,
    padding: "calc(var(--Badge-paddingX) / 2 - var(--variant-borderWidth, 0px)) calc(var(--Badge-paddingX) - var(--variant-borderWidth, 0px))",
    minHeight: "var(--Badge-minHeight)",
    minWidth: "var(--Badge-minHeight)",
    borderRadius: "var(--Badge-radius, var(--Badge-minHeight))",
    zIndex: theme.vars.zIndex.badge,
    backgroundColor: theme.vars.palette.background.surface,
    [ownerState.anchorOrigin.vertical]: inset[ownerState.anchorOrigin.vertical],
    [ownerState.anchorOrigin.horizontal]: inset[ownerState.anchorOrigin.horizontal],
    transform: `scale(1) ${translateX} ${translateY}`,
    transformOrigin: `${transformOriginX} ${transformOriginY}`,
    [`&.${badgeClasses_default.invisible}`]: {
      transform: `scale(0) ${translateX} ${translateY}`
    }
  }, (_theme$variants = theme.variants[ownerState.variant]) == null ? void 0 : _theme$variants[ownerState.color]);
});
var Badge = React32.forwardRef(function Badge2(inProps, ref) {
  const props = useThemeProps({
    props: inProps,
    name: "JoyBadge"
  });
  const {
    anchorOrigin: anchorOriginProp = {
      vertical: "top",
      horizontal: "right"
    },
    badgeInset: badgeInsetProp = 0,
    children,
    size: sizeProp = "md",
    color: colorProp = "primary",
    invisible: invisibleProp = false,
    max = 99,
    badgeContent: badgeContentProp = "",
    showZero = false,
    variant: variantProp = "solid",
    component,
    slots = {},
    slotProps = {}
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded16);
  const prevProps = usePreviousProps_default({
    anchorOrigin: anchorOriginProp,
    size: sizeProp,
    badgeInset: badgeInsetProp,
    color: colorProp,
    variant: variantProp
  });
  let invisible = invisibleProp;
  if (invisibleProp === false && (badgeContentProp === 0 && !showZero || badgeContentProp == null)) {
    invisible = true;
  }
  const {
    color: internalColor = colorProp,
    size = sizeProp,
    anchorOrigin = anchorOriginProp,
    variant = variantProp,
    badgeInset = badgeInsetProp
  } = invisible ? prevProps : props;
  const {
    getColor
  } = useColorInversion(variant);
  const color = getColor(inProps.color, internalColor);
  const ownerState = _extends({}, props, {
    anchorOrigin,
    badgeInset,
    variant,
    invisible,
    color,
    size
  });
  const classes = useUtilityClasses16(ownerState);
  const externalForwardedProps = _extends({}, other, {
    component,
    slots,
    slotProps
  });
  let displayValue = badgeContentProp && Number(badgeContentProp) > max ? `${max}+` : badgeContentProp;
  if (invisible && badgeContentProp === 0) {
    displayValue = "";
  }
  const [SlotRoot, rootProps] = useSlot("root", {
    ref,
    className: classes.root,
    elementType: BadgeRoot,
    externalForwardedProps,
    ownerState
  });
  const [SlotBadge, badgeProps] = useSlot("badge", {
    className: classes.badge,
    elementType: BadgeBadge,
    externalForwardedProps,
    ownerState
  });
  return (0, import_jsx_runtime29.jsxs)(SlotRoot, _extends({}, rootProps, {
    children: [children, (0, import_jsx_runtime28.jsx)(SlotBadge, _extends({}, badgeProps, {
      children: displayValue
    }))]
  }));
});
true ? Badge.propTypes = {
  anchorOrigin: import_prop_types16.default.shape({
    horizontal: import_prop_types16.default.oneOf(["left", "right"]).isRequired,
    vertical: import_prop_types16.default.oneOf(["bottom", "top"]).isRequired
  }),
  badgeContent: import_prop_types16.default.node,
  badgeInset: import_prop_types16.default.oneOfType([import_prop_types16.default.number, import_prop_types16.default.string]),
  children: import_prop_types16.default.node,
  color: import_prop_types16.default.oneOfType([import_prop_types16.default.oneOf(["danger", "info", "neutral", "primary", "success", "warning"]), import_prop_types16.default.string]),
  component: import_prop_types16.default.elementType,
  invisible: import_prop_types16.default.bool,
  max: import_prop_types16.default.number,
  showZero: import_prop_types16.default.bool,
  size: import_prop_types16.default.oneOfType([import_prop_types16.default.oneOf(["sm", "md", "lg"]), import_prop_types16.default.string]),
  slotProps: import_prop_types16.default.shape({
    badge: import_prop_types16.default.oneOfType([import_prop_types16.default.func, import_prop_types16.default.object]),
    root: import_prop_types16.default.oneOfType([import_prop_types16.default.func, import_prop_types16.default.object])
  }),
  slots: import_prop_types16.default.shape({
    badge: import_prop_types16.default.elementType,
    root: import_prop_types16.default.elementType
  }),
  sx: import_prop_types16.default.oneOfType([import_prop_types16.default.arrayOf(import_prop_types16.default.oneOfType([import_prop_types16.default.func, import_prop_types16.default.object, import_prop_types16.default.bool])), import_prop_types16.default.func, import_prop_types16.default.object]),
  variant: import_prop_types16.default.oneOfType([import_prop_types16.default.oneOf(["outlined", "plain", "soft", "solid"]), import_prop_types16.default.string])
} : void 0;
var Badge_default = Badge;

// node_modules/@mui/joy/Box/Box.js
init_esm2();
var import_prop_types17 = __toESM(require_prop_types());
var Box = createBox({
  themeId: identifier_default,
  defaultTheme: defaultTheme_default,
  defaultClassName: "MuiBox-root",
  generateClassName: ClassNameGenerator_default.generate
});
true ? Box.propTypes = {
  children: import_prop_types17.default.node,
  component: import_prop_types17.default.elementType,
  sx: import_prop_types17.default.oneOfType([import_prop_types17.default.arrayOf(import_prop_types17.default.oneOfType([import_prop_types17.default.func, import_prop_types17.default.object, import_prop_types17.default.bool])), import_prop_types17.default.func, import_prop_types17.default.object])
} : void 0;
var Box_default = Box;

// node_modules/@mui/joy/Breadcrumbs/Breadcrumbs.js
init_objectWithoutPropertiesLoose();
init_extends();
var React33 = __toESM(require_react());
var import_prop_types18 = __toESM(require_prop_types());
init_esm();
init_base();
init_clsx_m();

// node_modules/@mui/joy/Breadcrumbs/breadcrumbsClasses.js
init_esm();
function getBreadcrumbsUtilityClass(slot) {
  return generateUtilityClass("MuiBreadcrumbs", slot);
}
var breadcrumbsClasses = generateUtilityClasses("MuiBreadcrumbs", ["root", "ol", "li", "separator", "sizeSm", "sizeMd", "sizeLg"]);
var breadcrumbsClasses_default = breadcrumbsClasses;

// node_modules/@mui/joy/Breadcrumbs/Breadcrumbs.js
var import_jsx_runtime30 = __toESM(require_jsx_runtime());
var _excluded17 = ["children", "className", "size", "separator", "component", "slots", "slotProps"];
var useUtilityClasses17 = (ownerState) => {
  const {
    size
  } = ownerState;
  const slots = {
    root: ["root", size && `size${capitalize(size)}`],
    li: ["li"],
    ol: ["ol"],
    separator: ["separator"]
  };
  return composeClasses(slots, getBreadcrumbsUtilityClass, {});
};
var BreadcrumbsRoot = styled_default("nav", {
  name: "JoyBreadcrumbs",
  slot: "Root",
  overridesResolver: (props, styles) => styles.root
})(({
  theme,
  ownerState
}) => _extends({}, ownerState.size === "sm" && {
  "--Breadcrumbs-gap": "0.25rem",
  fontSize: theme.vars.fontSize.sm,
  padding: "0.5rem"
}, ownerState.size === "md" && {
  "--Breadcrumbs-gap": "0.375rem",
  fontSize: theme.vars.fontSize.md,
  padding: "0.75rem"
}, ownerState.size === "lg" && {
  "--Breadcrumbs-gap": "0.5rem",
  fontSize: theme.vars.fontSize.lg,
  padding: "1rem"
}, {
  lineHeight: 1
}));
var BreadcrumbsOl = styled_default("ol", {
  name: "JoyBreadcrumbs",
  slot: "Ol",
  overridesResolver: (props, styles) => styles.ol
})({
  display: "flex",
  flexWrap: "wrap",
  alignItems: "center",
  padding: 0,
  margin: 0,
  listStyle: "none"
});
var BreadcrumbsLi = styled_default("li", {
  name: "JoyBreadcrumbs",
  slot: "Ol",
  overridesResolver: (props, styles) => styles.ol
})({});
var BreadcrumbsSeparator = styled_default("li", {
  name: "JoyBreadcrumbs",
  slot: "Separator",
  overridesResolver: (props, styles) => styles.separator
})({
  display: "flex",
  userSelect: "none",
  marginInline: "var(--Breadcrumbs-gap)"
});
var Breadcrumbs = React33.forwardRef(function Breadcrumbs2(inProps, ref) {
  const props = useThemeProps({
    props: inProps,
    name: "JoyBreadcrumbs"
  });
  const {
    children,
    className,
    size = "md",
    separator = "/",
    component,
    slots = {},
    slotProps = {}
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded17);
  const ownerState = _extends({}, props, {
    separator,
    size
  });
  const classes = useUtilityClasses17(ownerState);
  const externalForwardedProps = _extends({}, other, {
    component,
    slots,
    slotProps
  });
  const [SlotRoot, rootProps] = useSlot("root", {
    ref,
    className: clsx_m_default(classes.root, className),
    elementType: BreadcrumbsRoot,
    externalForwardedProps,
    ownerState
  });
  const [SlotOl, olProps] = useSlot("ol", {
    className: classes.ol,
    elementType: BreadcrumbsOl,
    externalForwardedProps,
    ownerState
  });
  const [SlotLi, liProps] = useSlot("li", {
    className: classes.li,
    elementType: BreadcrumbsLi,
    externalForwardedProps,
    ownerState
  });
  const [SlotSeparator, separatorProps] = useSlot("separator", {
    additionalProps: {
      "aria-hidden": true
    },
    className: classes.separator,
    elementType: BreadcrumbsSeparator,
    externalForwardedProps,
    ownerState
  });
  const allItems = React33.Children.toArray(children).filter((child) => {
    return React33.isValidElement(child);
  }).map((child, index) => (0, import_jsx_runtime30.jsx)(SlotLi, _extends({}, liProps, {
    children: child
  }), `child-${index}`));
  return (0, import_jsx_runtime30.jsx)(SlotRoot, _extends({}, rootProps, {
    children: (0, import_jsx_runtime30.jsx)(SlotOl, _extends({}, olProps, {
      children: allItems.reduce((acc, current, index) => {
        if (index < allItems.length - 1) {
          acc = acc.concat(current, (0, import_jsx_runtime30.jsx)(SlotSeparator, _extends({}, separatorProps, {
            children: separator
          }), `separator-${index}`));
        } else {
          acc.push(current);
        }
        return acc;
      }, [])
    }))
  }));
});
true ? Breadcrumbs.propTypes = {
  children: import_prop_types18.default.node,
  className: import_prop_types18.default.string,
  component: import_prop_types18.default.elementType,
  separator: import_prop_types18.default.node,
  size: import_prop_types18.default.oneOfType([import_prop_types18.default.oneOf(["sm", "md", "lg"]), import_prop_types18.default.string]),
  slotProps: import_prop_types18.default.shape({
    li: import_prop_types18.default.oneOfType([import_prop_types18.default.func, import_prop_types18.default.object]),
    ol: import_prop_types18.default.oneOfType([import_prop_types18.default.func, import_prop_types18.default.object]),
    root: import_prop_types18.default.oneOfType([import_prop_types18.default.func, import_prop_types18.default.object]),
    separator: import_prop_types18.default.oneOfType([import_prop_types18.default.func, import_prop_types18.default.object])
  }),
  slots: import_prop_types18.default.shape({
    li: import_prop_types18.default.elementType,
    ol: import_prop_types18.default.elementType,
    root: import_prop_types18.default.elementType,
    separator: import_prop_types18.default.elementType
  }),
  sx: import_prop_types18.default.oneOfType([import_prop_types18.default.arrayOf(import_prop_types18.default.oneOfType([import_prop_types18.default.func, import_prop_types18.default.object, import_prop_types18.default.bool])), import_prop_types18.default.func, import_prop_types18.default.object])
} : void 0;
var Breadcrumbs_default = Breadcrumbs;

// node_modules/@mui/joy/Card/Card.js
init_objectWithoutPropertiesLoose();
init_extends();
var React35 = __toESM(require_react());
init_clsx_m();
var import_prop_types19 = __toESM(require_prop_types());
init_base();
init_esm();

// node_modules/@mui/joy/Card/cardClasses.js
function getCardUtilityClass(slot) {
  return generateUtilityClass2("MuiCard", slot);
}
var cardClasses = generateUtilityClasses2("MuiCard", ["root", "colorPrimary", "colorNeutral", "colorDanger", "colorInfo", "colorSuccess", "colorWarning", "colorContext", "variantPlain", "variantOutlined", "variantSoft", "variantSolid", "sizeSm", "sizeMd", "sizeLg", "horizontal", "vertical"]);
var cardClasses_default = cardClasses;

// node_modules/@mui/joy/styles/styleUtils.js
init_extends();
var resolveSxValue = ({
  theme,
  ownerState
}, key, defaultValue) => {
  let parsedValue;
  let sxObject = {};
  function resolveSx(sxProp) {
    if (typeof sxProp === "function") {
      const result = sxProp(theme);
      resolveSx(result);
    } else if (Array.isArray(sxProp)) {
      sxProp.forEach((sxItem) => {
        if (typeof sxItem !== "boolean") {
          resolveSx(sxItem);
        }
      });
    } else if (typeof sxProp === "object") {
      sxObject = _extends({}, sxObject, sxProp);
    }
  }
  if (ownerState.sx) {
    resolveSx(ownerState.sx);
    const value = sxObject[key];
    if (typeof value === "string" || typeof value === "number") {
      if (key === "borderRadius") {
        var _theme$vars;
        if (typeof value === "number") {
          return `${value}px`;
        }
        parsedValue = ((_theme$vars = theme.vars) == null ? void 0 : _theme$vars.radius[value]) || value;
      } else {
        parsedValue = value;
      }
    }
    if (typeof value === "function") {
      parsedValue = value(theme);
    }
  }
  return parsedValue || defaultValue;
};

// node_modules/@mui/joy/Card/CardContext.js
var React34 = __toESM(require_react());
var CardRowContext = React34.createContext(false);

// node_modules/@mui/joy/Card/Card.js
var import_jsx_runtime31 = __toESM(require_jsx_runtime());
var _excluded18 = ["className", "color", "component", "invertedColors", "size", "variant", "children", "orientation", "slots", "slotProps"];
var useUtilityClasses18 = (ownerState) => {
  const {
    size,
    variant,
    color,
    orientation
  } = ownerState;
  const slots = {
    root: ["root", orientation, variant && `variant${capitalize(variant)}`, color && `color${capitalize(color)}`, size && `size${capitalize(size)}`]
  };
  return composeClasses(slots, getCardUtilityClass, {});
};
var CardRoot = styled_default("div", {
  name: "JoyCard",
  slot: "Root",
  overridesResolver: (props, styles) => styles.root
})(({
  theme,
  ownerState
}) => {
  var _theme$variants, _theme$colorInversion;
  return [_extends({
    "--Card-childRadius": "max((var(--Card-radius) - var(--variant-borderWidth, 0px)) - var(--Card-padding), min(var(--Card-padding) / 2, (var(--Card-radius) - var(--variant-borderWidth, 0px)) / 2))",
    "--AspectRatio-radius": "var(--Card-childRadius)",
    "--unstable_actionMargin": "calc(-1 * var(--variant-borderWidth, 0px))",
    "--unstable_actionRadius": resolveSxValue({
      theme,
      ownerState
    }, "borderRadius", "var(--Card-radius)"),
    "--CardCover-radius": "calc(var(--Card-radius) - var(--variant-borderWidth, 0px))",
    "--CardOverflow-offset": `calc(-1 * var(--Card-padding))`,
    "--CardOverflow-radius": "calc(var(--Card-radius) - var(--variant-borderWidth, 0px))",
    "--Divider-inset": "calc(-1 * var(--Card-padding))"
  }, ownerState.size === "sm" && {
    "--Card-radius": theme.vars.radius.sm,
    "--Card-padding": "0.5rem"
  }, ownerState.size === "md" && {
    "--Card-radius": theme.vars.radius.md,
    "--Card-padding": "1rem",
    fontSize: theme.vars.fontSize.md
  }, ownerState.size === "lg" && {
    "--Card-radius": theme.vars.radius.lg,
    "--Card-padding": "1.5rem"
  }, {
    padding: "var(--Card-padding)",
    borderRadius: "var(--Card-radius)",
    boxShadow: theme.shadow.sm,
    backgroundColor: theme.vars.palette.background.surface,
    fontFamily: theme.vars.fontFamily.body,
    position: "relative",
    display: "flex",
    flexDirection: ownerState.orientation === "horizontal" ? "row" : "column"
  }), (_theme$variants = theme.variants[ownerState.variant]) == null ? void 0 : _theme$variants[ownerState.color], ownerState.color !== "context" && ownerState.invertedColors && ((_theme$colorInversion = theme.colorInversion[ownerState.variant]) == null ? void 0 : _theme$colorInversion[ownerState.color])];
});
var Card = React35.forwardRef(function Card2(inProps, ref) {
  const props = useThemeProps({
    props: inProps,
    name: "JoyCard"
  });
  const {
    className,
    color: colorProp = "neutral",
    component = "div",
    invertedColors = false,
    size = "md",
    variant = "plain",
    children,
    orientation = "vertical",
    slots = {},
    slotProps = {}
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded18);
  const {
    getColor
  } = useColorInversion(variant);
  const color = getColor(inProps.color, colorProp);
  const ownerState = _extends({}, props, {
    color,
    component,
    orientation,
    size,
    variant
  });
  const classes = useUtilityClasses18(ownerState);
  const externalForwardedProps = _extends({}, other, {
    component,
    slots,
    slotProps
  });
  const [SlotRoot, rootProps] = useSlot("root", {
    ref,
    className: clsx_m_default(classes.root, className),
    elementType: CardRoot,
    externalForwardedProps,
    ownerState
  });
  const result = (0, import_jsx_runtime31.jsx)(CardRowContext.Provider, {
    value: orientation === "horizontal",
    children: (0, import_jsx_runtime31.jsx)(SlotRoot, _extends({}, rootProps, {
      children: React35.Children.map(children, (child, index) => {
        if (!React35.isValidElement(child)) {
          return child;
        }
        const extraProps = {};
        if (isMuiElement(child, ["Divider"])) {
          extraProps.inset = "inset" in child.props ? child.props.inset : "context";
          const dividerOrientation = orientation === "vertical" ? "horizontal" : "vertical";
          extraProps.orientation = "orientation" in child.props ? child.props.orientation : dividerOrientation;
        }
        if (index === 0) {
          extraProps["data-first-child"] = "";
        }
        if (index === React35.Children.count(children) - 1) {
          extraProps["data-last-child"] = "";
        }
        return React35.cloneElement(child, extraProps);
      })
    }))
  });
  if (invertedColors) {
    return (0, import_jsx_runtime31.jsx)(ColorInversionProvider, {
      variant,
      children: result
    });
  }
  return result;
});
true ? Card.propTypes = {
  children: import_prop_types19.default.node,
  className: import_prop_types19.default.string,
  color: import_prop_types19.default.oneOfType([import_prop_types19.default.oneOf(["danger", "info", "neutral", "primary", "success", "warning"]), import_prop_types19.default.string]),
  component: import_prop_types19.default.elementType,
  invertedColors: import_prop_types19.default.bool,
  orientation: import_prop_types19.default.oneOf(["horizontal", "vertical"]),
  size: import_prop_types19.default.oneOfType([import_prop_types19.default.oneOf(["lg", "md", "sm"]), import_prop_types19.default.string]),
  slotProps: import_prop_types19.default.shape({
    root: import_prop_types19.default.oneOfType([import_prop_types19.default.func, import_prop_types19.default.object])
  }),
  slots: import_prop_types19.default.shape({
    root: import_prop_types19.default.elementType
  }),
  sx: import_prop_types19.default.oneOfType([import_prop_types19.default.arrayOf(import_prop_types19.default.oneOfType([import_prop_types19.default.func, import_prop_types19.default.object, import_prop_types19.default.bool])), import_prop_types19.default.func, import_prop_types19.default.object]),
  variant: import_prop_types19.default.oneOfType([import_prop_types19.default.oneOf(["outlined", "plain", "soft", "solid"]), import_prop_types19.default.string])
} : void 0;
var Card_default = Card;

// node_modules/@mui/joy/CardContent/CardContent.js
init_extends();
init_objectWithoutPropertiesLoose();
var React36 = __toESM(require_react());
init_clsx_m();
var import_prop_types20 = __toESM(require_prop_types());
init_base();

// node_modules/@mui/joy/CardContent/cardContentClasses.js
function getCardContentUtilityClass(slot) {
  return generateUtilityClass2("MuiCardContent", slot);
}
var cardClasses2 = generateUtilityClasses2("MuiCardContent", ["root"]);
var cardContentClasses_default = cardClasses2;

// node_modules/@mui/joy/CardContent/CardContent.js
var import_jsx_runtime32 = __toESM(require_jsx_runtime());
var _excluded19 = ["className", "component", "children", "slots", "slotProps"];
var useUtilityClasses19 = () => {
  const slots = {
    root: ["root"]
  };
  return composeClasses(slots, getCardContentUtilityClass, {});
};
var CardContentRoot = styled_default("div", {
  name: "JoyCardContent",
  slot: "Root",
  overridesResolver: (props, styles) => styles.root
})({
  display: "flex",
  flexDirection: "column",
  flexGrow: 1,
  zIndex: 1
});
var CardContent = React36.forwardRef(function CardContent2(inProps, ref) {
  const props = useThemeProps({
    props: inProps,
    name: "JoyCardContent"
  });
  const {
    className,
    component = "div",
    children,
    slots = {},
    slotProps = {}
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded19);
  const externalForwardedProps = _extends({}, other, {
    component,
    slots,
    slotProps
  });
  const ownerState = _extends({}, props, {
    component
  });
  const classes = useUtilityClasses19();
  const [SlotRoot, rootProps] = useSlot("root", {
    ref,
    className: clsx_m_default(classes.root, className),
    elementType: CardContentRoot,
    externalForwardedProps,
    ownerState
  });
  return (0, import_jsx_runtime32.jsx)(SlotRoot, _extends({}, rootProps, {
    children
  }));
});
true ? CardContent.propTypes = {
  children: import_prop_types20.default.node,
  className: import_prop_types20.default.string,
  component: import_prop_types20.default.elementType,
  slotProps: import_prop_types20.default.shape({
    root: import_prop_types20.default.oneOfType([import_prop_types20.default.func, import_prop_types20.default.object])
  }),
  slots: import_prop_types20.default.shape({
    root: import_prop_types20.default.elementType
  }),
  sx: import_prop_types20.default.oneOfType([import_prop_types20.default.arrayOf(import_prop_types20.default.oneOfType([import_prop_types20.default.func, import_prop_types20.default.object, import_prop_types20.default.bool])), import_prop_types20.default.func, import_prop_types20.default.object])
} : void 0;
var CardContent_default = CardContent;

// node_modules/@mui/joy/CardCover/CardCover.js
init_extends();
init_objectWithoutPropertiesLoose();
var React37 = __toESM(require_react());
init_clsx_m();
var import_prop_types21 = __toESM(require_prop_types());
init_base();

// node_modules/@mui/joy/CardCover/cardCoverClasses.js
function getCardCoverUtilityClass(slot) {
  return generateUtilityClass2("MuiCardCover", slot);
}
var cardCoverClasses = generateUtilityClasses2("MuiCardCover", ["root"]);
var cardCoverClasses_default = cardCoverClasses;

// node_modules/@mui/joy/CardCover/CardCover.js
var import_jsx_runtime33 = __toESM(require_jsx_runtime());
var _excluded20 = ["className", "component", "children", "slots", "slotProps"];
var useUtilityClasses20 = () => {
  const slots = {
    root: ["root"]
  };
  return composeClasses(slots, getCardCoverUtilityClass, {});
};
var CardCoverRoot = styled_default("div", {
  name: "JoyCardCover",
  slot: "Root",
  overridesResolver: (props, styles) => styles.root
})({
  position: "absolute",
  zIndex: 0,
  top: 0,
  left: 0,
  right: 0,
  bottom: 0,
  borderRadius: "var(--CardCover-radius)",
  "& [data-first-child]": {
    display: "flex",
    justifyContent: "center",
    alignItems: "center",
    width: "100%",
    height: "100%",
    objectFit: "cover",
    boxSizing: "border-box",
    borderRadius: "var(--CardCover-radius)",
    margin: 0,
    padding: 0,
    "& > img": {
      width: "100%",
      height: "100%",
      objectFit: "cover"
    }
  }
});
var CardCover = React37.forwardRef(function CardCover2(inProps, ref) {
  const props = useThemeProps({
    props: inProps,
    name: "JoyCardCover"
  });
  const {
    className,
    component = "div",
    children,
    slots = {},
    slotProps = {}
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded20);
  const ownerState = _extends({}, props, {
    component
  });
  const classes = useUtilityClasses20();
  const externalForwardedProps = _extends({}, other, {
    component,
    slots,
    slotProps
  });
  const [SlotRoot, rootProps] = useSlot("root", {
    ref,
    className: clsx_m_default(classes.root, className),
    elementType: CardCoverRoot,
    externalForwardedProps,
    ownerState
  });
  return (0, import_jsx_runtime33.jsx)(SlotRoot, _extends({}, rootProps, {
    children: React37.Children.map(children, (child, index) => index === 0 && React37.isValidElement(child) ? React37.cloneElement(child, {
      "data-first-child": ""
    }) : child)
  }));
});
true ? CardCover.propTypes = {
  children: import_prop_types21.default.node,
  className: import_prop_types21.default.string,
  component: import_prop_types21.default.elementType,
  slotProps: import_prop_types21.default.shape({
    root: import_prop_types21.default.oneOfType([import_prop_types21.default.func, import_prop_types21.default.object])
  }),
  slots: import_prop_types21.default.shape({
    root: import_prop_types21.default.elementType
  }),
  sx: import_prop_types21.default.oneOfType([import_prop_types21.default.arrayOf(import_prop_types21.default.oneOfType([import_prop_types21.default.func, import_prop_types21.default.object, import_prop_types21.default.bool])), import_prop_types21.default.func, import_prop_types21.default.object])
} : void 0;
var CardCover_default = CardCover;

// node_modules/@mui/joy/CardOverflow/CardOverflow.js
init_objectWithoutPropertiesLoose();
init_extends();
var React38 = __toESM(require_react());
init_clsx_m();
var import_prop_types22 = __toESM(require_prop_types());
init_base();
init_esm();

// node_modules/@mui/joy/CardOverflow/cardOverflowClasses.js
function getCardOverflowUtilityClass(slot) {
  return generateUtilityClass2("MuiCardOverflow", slot);
}
var aspectRatioClasses2 = generateUtilityClasses2("MuiCardOverflow", ["root", "colorPrimary", "colorNeutral", "colorDanger", "colorInfo", "colorSuccess", "colorWarning", "colorContext", "variantPlain", "variantOutlined", "variantSoft", "variantSolid"]);
var cardOverflowClasses_default = aspectRatioClasses2;

// node_modules/@mui/joy/CardOverflow/CardOverflow.js
var import_jsx_runtime34 = __toESM(require_jsx_runtime());
var _excluded21 = ["className", "component", "children", "color", "variant", "slots", "slotProps"];
var useUtilityClasses21 = (ownerState) => {
  const {
    variant,
    color
  } = ownerState;
  const slots = {
    root: ["root", variant && `variant${capitalize(variant)}`, color && `color${capitalize(color)}`]
  };
  return composeClasses(slots, getCardOverflowUtilityClass, {});
};
var CardOverflowRoot = styled_default("div", {
  name: "JoyCardOverflow",
  slot: "Root",
  overridesResolver: (props, styles) => styles.root
})(({
  theme,
  ownerState
}) => {
  var _theme$variants;
  const childRadius = "calc(var(--CardOverflow-radius) - var(--variant-borderWidth, 0px))";
  return [ownerState.row ? _extends({
    "--AspectRatio-margin": "calc(-1 * var(--Card-padding)) 0px",
    marginTop: "var(--CardOverflow-offset)",
    marginBottom: "var(--CardOverflow-offset)",
    padding: "var(--Card-padding) 0px",
    borderRadius: "var(--CardOverflow-radius)",
    position: "relative"
  }, ownerState["data-first-child"] !== void 0 && {
    "--AspectRatio-radius": `${childRadius} 0 0 ${childRadius}`,
    borderTopRightRadius: 0,
    borderBottomRightRadius: 0,
    marginLeft: "var(--CardOverflow-offset)"
  }, ownerState["data-last-child"] !== void 0 && {
    "--AspectRatio-radius": `0 ${childRadius} ${childRadius} 0`,
    borderTopLeftRadius: 0,
    borderBottomLeftRadius: 0,
    marginRight: "var(--CardOverflow-offset)"
  }) : _extends({
    "--AspectRatio-margin": "0px calc(-1 * var(--Card-padding))",
    marginLeft: "var(--CardOverflow-offset)",
    marginRight: "var(--CardOverflow-offset)",
    padding: "0px var(--Card-padding)",
    borderRadius: "var(--CardOverflow-radius)",
    position: "relative"
  }, ownerState["data-first-child"] !== void 0 && {
    "--AspectRatio-radius": `${childRadius} ${childRadius} 0 0`,
    borderBottomLeftRadius: 0,
    borderBottomRightRadius: 0,
    marginTop: "var(--CardOverflow-offset)"
  }, ownerState["data-last-child"] !== void 0 && {
    "--AspectRatio-radius": `0 0 ${childRadius} ${childRadius}`,
    borderTopLeftRadius: 0,
    borderTopRightRadius: 0,
    marginBottom: "var(--CardOverflow-offset)"
  }), (_theme$variants = theme.variants[ownerState.variant]) == null ? void 0 : _theme$variants[ownerState.color]];
});
var CardOverflow = React38.forwardRef(function CardOverflow2(inProps, ref) {
  const props = useThemeProps({
    props: inProps,
    name: "JoyCardOverflow"
  });
  const row = React38.useContext(CardRowContext);
  const {
    className,
    component = "div",
    children,
    color: colorProp = "neutral",
    variant = "plain",
    slots = {},
    slotProps = {}
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded21);
  const {
    getColor
  } = useColorInversion(variant);
  const color = getColor(inProps.color, colorProp);
  const ownerState = _extends({}, props, {
    component,
    color,
    variant,
    row
  });
  const classes = useUtilityClasses21(ownerState);
  const externalForwardedProps = _extends({}, other, {
    component,
    slots,
    slotProps
  });
  const [SlotRoot, rootProps] = useSlot("root", {
    ref,
    className: clsx_m_default(classes.root, className),
    elementType: CardOverflowRoot,
    externalForwardedProps,
    ownerState
  });
  return (0, import_jsx_runtime34.jsx)(SlotRoot, _extends({}, rootProps, {
    children
  }));
});
true ? CardOverflow.propTypes = {
  children: import_prop_types22.default.node,
  className: import_prop_types22.default.string,
  color: import_prop_types22.default.oneOfType([import_prop_types22.default.oneOf(["danger", "info", "neutral", "primary", "success", "warning"]), import_prop_types22.default.string]),
  component: import_prop_types22.default.elementType,
  slotProps: import_prop_types22.default.shape({
    root: import_prop_types22.default.oneOfType([import_prop_types22.default.func, import_prop_types22.default.object])
  }),
  slots: import_prop_types22.default.shape({
    root: import_prop_types22.default.elementType
  }),
  sx: import_prop_types22.default.oneOfType([import_prop_types22.default.arrayOf(import_prop_types22.default.oneOfType([import_prop_types22.default.func, import_prop_types22.default.object, import_prop_types22.default.bool])), import_prop_types22.default.func, import_prop_types22.default.object]),
  variant: import_prop_types22.default.oneOfType([import_prop_types22.default.oneOf(["outlined", "plain", "soft", "solid"]), import_prop_types22.default.string])
} : void 0;
var CardOverflow_default = CardOverflow;

// node_modules/@mui/joy/Checkbox/Checkbox.js
init_objectWithoutPropertiesLoose();
init_extends();
var React41 = __toESM(require_react());
var import_prop_types23 = __toESM(require_prop_types());
init_esm();
init_base();
init_useSwitch();

// node_modules/@mui/joy/Checkbox/checkboxClasses.js
function getCheckboxUtilityClass(slot) {
  return generateUtilityClass2("MuiCheckbox", slot);
}
var checkboxClasses = generateUtilityClasses2("MuiCheckbox", ["root", "checkbox", "action", "input", "label", "checked", "disabled", "focusVisible", "indeterminate", "colorPrimary", "colorDanger", "colorInfo", "colorNeutral", "colorSuccess", "colorWarning", "colorContext", "sizeSm", "sizeMd", "sizeLg", "variantOutlined", "variantSoft", "variantSolid"]);
var checkboxClasses_default = checkboxClasses;

// node_modules/@mui/joy/internal/svg-icons/Check.js
var React39 = __toESM(require_react());
var import_jsx_runtime35 = __toESM(require_jsx_runtime());
var Check_default = createSvgIcon((0, import_jsx_runtime35.jsx)("path", {
  d: "M9 16.17 5.53 12.7a.9959.9959 0 0 0-1.41 0c-.39.39-.39 1.02 0 1.41l4.18 4.18c.39.39 1.02.39 1.41 0L20.29 7.71c.39-.39.39-1.02 0-1.41a.9959.9959 0 0 0-1.41 0L9 16.17z"
}), "Check");

// node_modules/@mui/joy/internal/svg-icons/HorizontalRule.js
var React40 = __toESM(require_react());
var import_jsx_runtime36 = __toESM(require_jsx_runtime());
var HorizontalRule_default = createSvgIcon((0, import_jsx_runtime36.jsx)("path", {
  d: "M19 13H5c-.55 0-1-.45-1-1s.45-1 1-1h14c.55 0 1 .45 1 1s-.45 1-1 1z"
}), "HorizontalRule");

// node_modules/@mui/joy/Checkbox/Checkbox.js
var import_jsx_runtime37 = __toESM(require_jsx_runtime());
var import_jsx_runtime38 = __toESM(require_jsx_runtime());
var _excluded25 = ["checked", "uncheckedIcon", "checkedIcon", "label", "defaultChecked", "disabled", "disableIcon", "overlay", "id", "indeterminate", "indeterminateIcon", "name", "onBlur", "onChange", "onFocus", "onFocusVisible", "readOnly", "required", "value", "color", "variant", "size", "component", "slots", "slotProps"];
var useUtilityClasses22 = (ownerState) => {
  const {
    checked,
    disabled,
    disableIcon,
    focusVisible,
    color,
    variant,
    size
  } = ownerState;
  const slots = {
    root: ["root", checked && "checked", disabled && "disabled", focusVisible && "focusVisible", variant && `variant${capitalize(variant)}`, color && `color${capitalize(color)}`, size && `size${capitalize(size)}`],
    checkbox: ["checkbox", checked && "checked", disabled && "disabled"],
    action: [
      "action",
      checked && "checked",
      disableIcon && disabled && "disabled",
      focusVisible && "focusVisible"
    ],
    input: ["input"],
    label: ["label"]
  };
  return composeClasses(slots, getCheckboxUtilityClass, {});
};
var CheckboxRoot = styled_default("span", {
  name: "JoyCheckbox",
  slot: "Root",
  overridesResolver: (props, styles) => styles.root
})(({
  ownerState,
  theme
}) => {
  var _theme$variants$plain, _theme$variants$plain2, _theme$variants, _theme$variants2, _theme$variants3, _theme$variants4;
  return _extends({
    "--Icon-fontSize": "var(--Checkbox-size)"
  }, ownerState.size === "sm" && {
    "--Checkbox-size": "1rem",
    "--Checkbox-gap": "0.375rem",
    "& ~ *": {
      "--FormHelperText-margin": "0.375rem 0 0 1.375rem"
    },
    fontSize: theme.vars.fontSize.sm
  }, ownerState.size === "md" && {
    "--Checkbox-size": "1.25rem",
    "--Checkbox-gap": "0.5rem",
    "& ~ *": {
      "--FormHelperText-margin": "0.375rem 0 0 1.75rem"
    },
    fontSize: theme.vars.fontSize.md
  }, ownerState.size === "lg" && {
    "--Checkbox-size": "1.5rem",
    "--Checkbox-gap": "0.625rem",
    "& ~ *": {
      "--FormHelperText-margin": "0.375rem 0 0 2.125rem"
    },
    fontSize: theme.vars.fontSize.lg
  }, {
    position: ownerState.overlay ? "initial" : "relative",
    display: "inline-flex",
    fontFamily: theme.vars.fontFamily.body,
    lineHeight: "var(--Checkbox-size)",
    color: theme.vars.palette.text.primary,
    [`&.${checkboxClasses_default.disabled}`]: {
      color: (_theme$variants$plain = theme.variants.plainDisabled) == null ? void 0 : (_theme$variants$plain2 = _theme$variants$plain[ownerState.color]) == null ? void 0 : _theme$variants$plain2.color
    }
  }, ownerState.disableIcon && {
    color: (_theme$variants = theme.variants[ownerState.variant]) == null ? void 0 : (_theme$variants2 = _theme$variants[ownerState.color]) == null ? void 0 : _theme$variants2.color,
    [`&.${checkboxClasses_default.disabled}`]: {
      color: (_theme$variants3 = theme.variants[`${ownerState.variant}Disabled`]) == null ? void 0 : (_theme$variants4 = _theme$variants3[ownerState.color]) == null ? void 0 : _theme$variants4.color
    }
  });
});
var CheckboxCheckbox = styled_default("span", {
  name: "JoyCheckbox",
  slot: "Checkbox",
  overridesResolver: (props, styles) => styles.checkbox
})(({
  theme,
  ownerState
}) => {
  var _theme$variants5, _variantStyle$backgro, _theme$variants6, _theme$variants7, _theme$variants8;
  const variantStyle = (_theme$variants5 = theme.variants[`${ownerState.variant}`]) == null ? void 0 : _theme$variants5[ownerState.color];
  return [_extends({
    boxSizing: "border-box",
    borderRadius: theme.vars.radius.xs,
    width: "var(--Checkbox-size)",
    height: "var(--Checkbox-size)",
    display: "inline-flex",
    justifyContent: "center",
    alignItems: "center",
    flexShrink: 0
  }, ownerState.disableIcon && {
    display: "contents"
  }), ...!ownerState.disableIcon ? [_extends({}, variantStyle, {
    backgroundColor: (_variantStyle$backgro = variantStyle == null ? void 0 : variantStyle.backgroundColor) != null ? _variantStyle$backgro : theme.vars.palette.background.surface
  }), {
    "&:hover": (_theme$variants6 = theme.variants[`${ownerState.variant}Hover`]) == null ? void 0 : _theme$variants6[ownerState.color]
  }, {
    "&:active": (_theme$variants7 = theme.variants[`${ownerState.variant}Active`]) == null ? void 0 : _theme$variants7[ownerState.color]
  }, {
    [`&.${checkboxClasses_default.disabled}`]: (_theme$variants8 = theme.variants[`${ownerState.variant}Disabled`]) == null ? void 0 : _theme$variants8[ownerState.color]
  }] : []];
});
var CheckboxAction = styled_default("span", {
  name: "JoyCheckbox",
  slot: "Action",
  overridesResolver: (props, styles) => styles.action
})(({
  theme,
  ownerState
}) => {
  var _theme$variants9, _theme$variants10, _theme$variants11, _theme$variants12;
  return [{
    borderRadius: `var(--Checkbox-actionRadius, ${ownerState.overlay ? "var(--unstable_actionRadius, inherit)" : "inherit"})`,
    textAlign: "left",
    position: "absolute",
    top: "calc(-1 * var(--variant-borderWidth, 0px))",
    left: "calc(-1 * var(--variant-borderWidth, 0px))",
    bottom: "calc(-1 * var(--variant-borderWidth, 0px))",
    right: "calc(-1 * var(--variant-borderWidth, 0px))",
    zIndex: 1,
    [theme.focus.selector]: theme.focus.default
  }, ...ownerState.disableIcon ? [(_theme$variants9 = theme.variants[ownerState.variant]) == null ? void 0 : _theme$variants9[ownerState.color], {
    "&:hover": (_theme$variants10 = theme.variants[`${ownerState.variant}Hover`]) == null ? void 0 : _theme$variants10[ownerState.color]
  }, {
    "&:active": (_theme$variants11 = theme.variants[`${ownerState.variant}Active`]) == null ? void 0 : _theme$variants11[ownerState.color]
  }, {
    [`&.${checkboxClasses_default.disabled}`]: (_theme$variants12 = theme.variants[`${ownerState.variant}Disabled`]) == null ? void 0 : _theme$variants12[ownerState.color]
  }] : []];
});
var CheckboxInput = styled_default("input", {
  name: "JoyCheckbox",
  slot: "Input",
  overridesResolver: (props, styles) => styles.input
})(() => ({
  margin: 0,
  opacity: 0,
  position: "absolute",
  width: "100%",
  height: "100%",
  cursor: "pointer"
}));
var CheckboxLabel = styled_default("label", {
  name: "JoyCheckbox",
  slot: "Label",
  overridesResolver: (props, styles) => styles.label
})(({
  ownerState
}) => _extends({
  flex: 1,
  minWidth: 0
}, ownerState.disableIcon ? {
  zIndex: 1,
  pointerEvents: "none"
} : {
  marginInlineStart: "var(--Checkbox-gap)"
}));
var defaultCheckedIcon = (0, import_jsx_runtime37.jsx)(Check_default, {});
var defaultIndeterminateIcon = (0, import_jsx_runtime37.jsx)(HorizontalRule_default, {});
var Checkbox = React41.forwardRef(function Checkbox2(inProps, ref) {
  var _ref, _inProps$disabled, _ref2, _inProps$size, _formControl$color;
  const props = useThemeProps({
    props: inProps,
    name: "JoyCheckbox"
  });
  const {
    checked: checkedProp,
    uncheckedIcon,
    checkedIcon = defaultCheckedIcon,
    label,
    defaultChecked,
    disabled: disabledExternalProp,
    disableIcon = false,
    overlay,
    id: idOverride,
    indeterminate = false,
    indeterminateIcon = defaultIndeterminateIcon,
    name,
    onBlur,
    onChange,
    onFocus,
    onFocusVisible,
    readOnly,
    required,
    value,
    color: colorProp,
    variant: variantProp,
    size: sizeProp = "md",
    component,
    slots = {},
    slotProps = {}
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded25);
  const formControl = React41.useContext(FormControlContext_default);
  const disabledProp = (_ref = (_inProps$disabled = inProps.disabled) != null ? _inProps$disabled : formControl == null ? void 0 : formControl.disabled) != null ? _ref : disabledExternalProp;
  const size = (_ref2 = (_inProps$size = inProps.size) != null ? _inProps$size : formControl == null ? void 0 : formControl.size) != null ? _ref2 : sizeProp;
  if (true) {
    const registerEffect = formControl == null ? void 0 : formControl.registerEffect;
    React41.useEffect(() => {
      if (registerEffect) {
        return registerEffect();
      }
      return void 0;
    }, [registerEffect]);
  }
  const id = useId(idOverride != null ? idOverride : formControl == null ? void 0 : formControl.htmlFor);
  const useCheckboxProps = {
    checked: checkedProp,
    defaultChecked,
    disabled: disabledProp,
    onBlur,
    onChange,
    onFocus,
    onFocusVisible
  };
  const {
    getInputProps,
    checked,
    disabled,
    focusVisible
  } = useSwitch(useCheckboxProps);
  const isCheckboxActive = checked || indeterminate;
  const activeVariant = variantProp || "solid";
  const inactiveVariant = variantProp || "outlined";
  const variant = isCheckboxActive ? activeVariant : inactiveVariant;
  const {
    getColor
  } = useColorInversion(variant);
  const color = getColor(inProps.color, formControl != null && formControl.error ? "danger" : (_formControl$color = formControl == null ? void 0 : formControl.color) != null ? _formControl$color : colorProp);
  const activeColor = color || "primary";
  const inactiveColor = color || "neutral";
  const ownerState = _extends({}, props, {
    checked,
    disabled,
    disableIcon,
    overlay,
    focusVisible,
    color: isCheckboxActive ? activeColor : inactiveColor,
    variant,
    size
  });
  const classes = useUtilityClasses22(ownerState);
  const externalForwardedProps = _extends({}, other, {
    component,
    slots,
    slotProps
  });
  const [SlotRoot, rootProps] = useSlot("root", {
    ref,
    className: classes.root,
    elementType: CheckboxRoot,
    externalForwardedProps,
    ownerState
  });
  const [SlotCheckbox, checkboxProps] = useSlot("checkbox", {
    className: classes.checkbox,
    elementType: CheckboxCheckbox,
    externalForwardedProps,
    ownerState
  });
  const [SlotAction, actionProps] = useSlot("action", {
    className: classes.action,
    elementType: CheckboxAction,
    externalForwardedProps,
    ownerState
  });
  const [SlotInput, inputProps] = useSlot("input", {
    additionalProps: _extends({
      id,
      name,
      value,
      readOnly,
      required: required != null ? required : formControl == null ? void 0 : formControl.required,
      "aria-describedby": formControl == null ? void 0 : formControl["aria-describedby"]
    }, indeterminate && {
      "aria-checked": "mixed"
    }),
    className: classes.input,
    elementType: CheckboxInput,
    externalForwardedProps,
    getSlotProps: getInputProps,
    ownerState
  });
  const [SlotLabel, labelProps] = useSlot("label", {
    additionalProps: {
      htmlFor: id
    },
    className: classes.label,
    elementType: CheckboxLabel,
    externalForwardedProps,
    ownerState
  });
  let icon = uncheckedIcon;
  if (disableIcon) {
    icon = null;
  } else if (indeterminate) {
    icon = indeterminateIcon;
  } else if (checked) {
    icon = checkedIcon;
  }
  return (0, import_jsx_runtime38.jsxs)(SlotRoot, _extends({}, rootProps, {
    children: [(0, import_jsx_runtime38.jsxs)(SlotCheckbox, _extends({}, checkboxProps, {
      children: [(0, import_jsx_runtime37.jsx)(SlotAction, _extends({}, actionProps, {
        children: (0, import_jsx_runtime37.jsx)(SlotInput, _extends({}, inputProps))
      })), icon]
    })), label && (0, import_jsx_runtime37.jsx)(TypographyNestedContext.Provider, {
      value: true,
      children: (0, import_jsx_runtime37.jsx)(SlotLabel, _extends({}, labelProps, {
        children: label
      }))
    })]
  }));
});
true ? Checkbox.propTypes = {
  checked: import_prop_types23.default.bool,
  checkedIcon: import_prop_types23.default.node,
  children: import_prop_types23.default.node,
  className: import_prop_types23.default.string,
  color: import_prop_types23.default.oneOfType([import_prop_types23.default.oneOf(["danger", "info", "neutral", "primary", "success", "warning"]), import_prop_types23.default.string]),
  component: import_prop_types23.default.elementType,
  defaultChecked: import_prop_types23.default.bool,
  disabled: import_prop_types23.default.bool,
  disableIcon: import_prop_types23.default.bool,
  id: import_prop_types23.default.string,
  indeterminate: import_prop_types23.default.bool,
  indeterminateIcon: import_prop_types23.default.node,
  label: import_prop_types23.default.node,
  name: import_prop_types23.default.string,
  onBlur: import_prop_types23.default.func,
  onChange: import_prop_types23.default.func,
  onFocus: import_prop_types23.default.func,
  onFocusVisible: import_prop_types23.default.func,
  overlay: import_prop_types23.default.bool,
  readOnly: import_prop_types23.default.bool,
  required: import_prop_types23.default.bool,
  size: import_prop_types23.default.oneOf(["sm", "md", "lg"]),
  slotProps: import_prop_types23.default.shape({
    action: import_prop_types23.default.oneOfType([import_prop_types23.default.func, import_prop_types23.default.object]),
    checkbox: import_prop_types23.default.oneOfType([import_prop_types23.default.func, import_prop_types23.default.object]),
    input: import_prop_types23.default.oneOfType([import_prop_types23.default.func, import_prop_types23.default.object]),
    label: import_prop_types23.default.oneOfType([import_prop_types23.default.func, import_prop_types23.default.object]),
    root: import_prop_types23.default.oneOfType([import_prop_types23.default.func, import_prop_types23.default.object])
  }),
  slots: import_prop_types23.default.shape({
    action: import_prop_types23.default.elementType,
    checkbox: import_prop_types23.default.elementType,
    input: import_prop_types23.default.elementType,
    label: import_prop_types23.default.elementType,
    root: import_prop_types23.default.elementType
  }),
  sx: import_prop_types23.default.oneOfType([import_prop_types23.default.arrayOf(import_prop_types23.default.oneOfType([import_prop_types23.default.func, import_prop_types23.default.object, import_prop_types23.default.bool])), import_prop_types23.default.func, import_prop_types23.default.object]),
  uncheckedIcon: import_prop_types23.default.node,
  value: import_prop_types23.default.oneOfType([import_prop_types23.default.arrayOf(import_prop_types23.default.string), import_prop_types23.default.number, import_prop_types23.default.string]),
  variant: import_prop_types23.default.oneOf(["outlined", "plain", "soft", "solid"])
} : void 0;
var Checkbox_default = Checkbox;

// node_modules/@mui/joy/Container/Container.js
init_esm2();
var import_prop_types24 = __toESM(require_prop_types());
var Container = createContainer({
  componentName: "JoyContainer",
  createStyledComponent: styled_default("div", {
    name: "JoyContainer",
    slot: "Root",
    overridesResolver: (props, styles) => styles.root
  }),
  useThemeProps: (inProps) => useThemeProps({
    props: inProps,
    name: "JoyContainer"
  })
});
true ? Container.propTypes = {
  children: import_prop_types24.default.node,
  component: import_prop_types24.default.elementType,
  disableGutters: import_prop_types24.default.bool,
  fixed: import_prop_types24.default.bool,
  maxWidth: import_prop_types24.default.oneOfType([import_prop_types24.default.oneOf(["xs", "sm", "md", "lg", "xl", false]), import_prop_types24.default.string]),
  sx: import_prop_types24.default.oneOfType([import_prop_types24.default.arrayOf(import_prop_types24.default.oneOfType([import_prop_types24.default.func, import_prop_types24.default.object, import_prop_types24.default.bool])), import_prop_types24.default.func, import_prop_types24.default.object])
} : void 0;
var Container_default = Container;

// node_modules/@mui/joy/Container/containerClasses.js
function getContainerUtilityClass(slot) {
  return generateUtilityClass2("MuiContainer", slot);
}
var containerClasses = generateUtilityClasses2("MuiContainer", ["root", "disableGutters", "fixed", "maxWidthXs", "maxWidthSm", "maxWidthMd", "maxWidthLg", "maxWidthXl"]);
var containerClasses_default = containerClasses;

// node_modules/@mui/joy/Divider/Divider.js
init_objectWithoutPropertiesLoose();
init_extends();
var React42 = __toESM(require_react());
var import_prop_types25 = __toESM(require_prop_types());
init_clsx_m();
init_esm();
init_composeClasses();

// node_modules/@mui/joy/Divider/dividerClasses.js
function getDividerUtilityClass(slot) {
  return generateUtilityClass2("MuiDivider", slot);
}
var dividerClasses = generateUtilityClasses2("MuiDivider", ["root", "horizontal", "vertical", "insetContext", "insetNone"]);
var dividerClasses_default = dividerClasses;

// node_modules/@mui/joy/Divider/Divider.js
var import_jsx_runtime39 = __toESM(require_jsx_runtime());
var _excluded26 = ["className", "children", "component", "inset", "orientation", "role", "slots", "slotProps"];
var useUtilityClasses23 = (ownerState) => {
  const {
    orientation,
    inset
  } = ownerState;
  const slots = {
    root: ["root", orientation, inset && `inset${capitalize(inset)}`]
  };
  return composeClasses(slots, getDividerUtilityClass, {});
};
var DividerRoot = styled_default("hr", {
  name: "JoyDivider",
  slot: "Root",
  overridesResolver: (props, styles) => styles.root
})(({
  theme,
  ownerState
}) => _extends({
  "--Divider-thickness": "1px",
  "--Divider-lineColor": theme.vars.palette.divider
}, ownerState.inset === "none" && {
  "--_Divider-inset": "0px"
}, ownerState.inset === "context" && {
  "--_Divider-inset": "var(--Divider-inset, 0px)"
}, {
  margin: "initial",
  marginInline: ownerState.orientation === "vertical" ? "initial" : "var(--_Divider-inset)",
  marginBlock: ownerState.orientation === "vertical" ? "var(--_Divider-inset)" : "initial",
  position: "relative",
  alignSelf: "stretch",
  flexShrink: 0
}, ownerState.children ? {
  "--Divider-gap": theme.spacing(1),
  "--Divider-childPosition": "50%",
  display: "flex",
  flexDirection: ownerState.orientation === "vertical" ? "column" : "row",
  alignItems: "center",
  whiteSpace: "nowrap",
  textAlign: "center",
  border: 0,
  fontFamily: theme.vars.fontFamily.body,
  fontSize: theme.vars.fontSize.sm,
  "&::before, &::after": {
    position: "relative",
    inlineSize: ownerState.orientation === "vertical" ? "var(--Divider-thickness)" : "initial",
    blockSize: ownerState.orientation === "vertical" ? "initial" : "var(--Divider-thickness)",
    backgroundColor: "var(--Divider-lineColor)",
    content: '""'
  },
  "&::before": {
    marginInlineEnd: ownerState.orientation === "vertical" ? "initial" : "min(var(--Divider-childPosition) * 999, var(--Divider-gap))",
    marginBlockEnd: ownerState.orientation === "vertical" ? "min(var(--Divider-childPosition) * 999, var(--Divider-gap))" : "initial",
    flexBasis: "var(--Divider-childPosition)"
  },
  "&::after": {
    marginInlineStart: ownerState.orientation === "vertical" ? "initial" : "min((100% - var(--Divider-childPosition)) * 999, var(--Divider-gap))",
    marginBlockStart: ownerState.orientation === "vertical" ? "min((100% - var(--Divider-childPosition)) * 999, var(--Divider-gap))" : "initial",
    flexBasis: "calc(100% - var(--Divider-childPosition))"
  }
} : {
  border: "none",
  listStyle: "none",
  backgroundColor: "var(--Divider-lineColor)",
  inlineSize: ownerState.orientation === "vertical" ? "var(--Divider-thickness)" : "initial",
  blockSize: ownerState.orientation === "vertical" ? "initial" : "var(--Divider-thickness)"
}));
var Divider = React42.forwardRef(function Divider2(inProps, ref) {
  const props = useThemeProps({
    props: inProps,
    name: "JoyDivider"
  });
  const {
    className,
    children,
    component = children !== void 0 && children !== null ? "div" : "hr",
    inset,
    orientation = "horizontal",
    role = component !== "hr" ? "separator" : void 0,
    slots = {},
    slotProps = {}
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded26);
  const ownerState = _extends({}, props, {
    inset,
    role,
    orientation,
    component
  });
  const classes = useUtilityClasses23(ownerState);
  const externalForwardedProps = _extends({}, other, {
    component,
    slots,
    slotProps
  });
  const [SlotRoot, rootProps] = useSlot("root", {
    ref,
    className: clsx_m_default(classes.root, className),
    elementType: DividerRoot,
    externalForwardedProps,
    ownerState,
    additionalProps: _extends({
      as: component,
      role
    }, role === "separator" && orientation === "vertical" && {
      "aria-orientation": "vertical"
    })
  });
  return (0, import_jsx_runtime39.jsx)(SlotRoot, _extends({}, rootProps, {
    children
  }));
});
true ? Divider.propTypes = {
  children: import_prop_types25.default.node,
  className: import_prop_types25.default.string,
  component: import_prop_types25.default.elementType,
  inset: import_prop_types25.default.oneOfType([import_prop_types25.default.oneOf(["none", "context"]), import_prop_types25.default.string]),
  orientation: import_prop_types25.default.oneOf(["horizontal", "vertical"]),
  role: import_prop_types25.default.string,
  slotProps: import_prop_types25.default.shape({
    root: import_prop_types25.default.oneOfType([import_prop_types25.default.func, import_prop_types25.default.object])
  }),
  slots: import_prop_types25.default.shape({
    root: import_prop_types25.default.elementType
  }),
  sx: import_prop_types25.default.oneOfType([import_prop_types25.default.arrayOf(import_prop_types25.default.oneOfType([import_prop_types25.default.func, import_prop_types25.default.object, import_prop_types25.default.bool])), import_prop_types25.default.func, import_prop_types25.default.object])
} : void 0;
Divider.muiName = "Divider";
var Divider_default = Divider;

// node_modules/@mui/joy/FormControl/FormControl.js
init_objectWithoutPropertiesLoose();
init_extends();
var React43 = __toESM(require_react());
var import_prop_types26 = __toESM(require_prop_types());
init_clsx_m();
init_esm();
init_composeClasses();

// node_modules/@mui/joy/FormControl/formControlClasses.js
function getFormControlUtilityClass(slot) {
  return generateUtilityClass2("MuiFormControl", slot);
}
var formControlClasses = generateUtilityClasses2("MuiFormControl", ["root", "error", "disabled", "colorPrimary", "colorNeutral", "colorDanger", "colorInfo", "colorSuccess", "colorWarning", "sizeSm", "sizeMd", "sizeLg", "horizontal", "vertical"]);
var formControlClasses_default = formControlClasses;

// node_modules/@mui/joy/Switch/switchClasses.js
function getSwitchUtilityClass(slot) {
  return generateUtilityClass2("MuiSwitch", slot);
}
var switchClasses = generateUtilityClasses2("MuiSwitch", ["root", "checked", "disabled", "action", "input", "thumb", "track", "focusVisible", "readOnly", "colorPrimary", "colorDanger", "colorInfo", "colorSuccess", "colorWarning", "colorContext", "sizeSm", "sizeMd", "sizeLg", "variantOutlined", "variantSoft", "variantSolid", "startDecorator", "endDecorator"]);
var switchClasses_default = switchClasses;

// node_modules/@mui/joy/FormControl/FormControl.js
var import_jsx_runtime40 = __toESM(require_jsx_runtime());
var _excluded27 = ["id", "className", "component", "disabled", "required", "error", "color", "size", "orientation", "slots", "slotProps"];
var useUtilityClasses24 = (ownerState) => {
  const {
    disabled,
    error,
    size,
    color,
    orientation
  } = ownerState;
  const slots = {
    root: ["root", orientation, disabled && "disabled", error && "error", color && `color${capitalize(color)}`, size && `size${capitalize(size)}`]
  };
  return composeClasses(slots, getFormControlUtilityClass, {});
};
var FormControlRoot = styled_default("div", {
  name: "JoyFormControl",
  slot: "Root",
  overridesResolver: (props, styles) => styles.root
})(({
  theme,
  ownerState
}) => {
  var _theme$vars$palette$o, _theme$vars$palette, _theme$vars$palette2;
  return _extends({
    "--unstable_RadioGroup-margin": "0.5rem 0",
    "--FormLabel-alignSelf": ownerState.orientation === "horizontal" ? "align-items" : "flex-start",
    "--FormLabel-asteriskColor": theme.vars.palette.danger[500]
  }, ownerState.size === "sm" && {
    "--FormLabel-fontSize": theme.vars.fontSize.xs,
    "--FormLabel-margin": ownerState.orientation === "horizontal" ? "0 0.5rem 0 0" : "0 0 0.25rem 0",
    "--FormHelperText-fontSize": theme.vars.fontSize.xs
  }, ownerState.size === "md" && {
    "--FormLabel-fontSize": theme.vars.fontSize.sm,
    "--FormLabel-margin": ownerState.orientation === "horizontal" ? "0 0.75rem 0 0" : "0 0 0.25rem 0",
    "--FormHelperText-fontSize": theme.vars.fontSize.sm
  }, ownerState.size === "lg" && {
    "--FormLabel-fontSize": theme.vars.fontSize.md,
    "--FormLabel-margin": ownerState.orientation === "horizontal" ? "0 1rem 0 0" : "0 0 0.25rem 0",
    "--FormHelperText-fontSize": theme.vars.fontSize.sm
  }, ownerState.color && ownerState.color !== "context" && {
    "--FormHelperText-color": (_theme$vars$palette$o = theme.vars.palette[ownerState.color]) == null ? void 0 : _theme$vars$palette$o[500]
  }, {
    "--FormHelperText-margin": "0.375rem 0 0 0",
    [`&.${formControlClasses_default.error}`]: {
      "--FormHelperText-color": theme.vars.palette.danger[500]
    },
    [`&.${formControlClasses_default.disabled}`]: _extends({}, ownerState.color !== "context" && {
      "--FormLabel-color": (_theme$vars$palette = theme.vars.palette[ownerState.color || "neutral"]) == null ? void 0 : _theme$vars$palette.plainDisabledColor,
      "--FormHelperText-color": (_theme$vars$palette2 = theme.vars.palette[ownerState.color || "neutral"]) == null ? void 0 : _theme$vars$palette2.plainDisabledColor
    }),
    display: "flex",
    position: "relative",
    flexDirection: ownerState.orientation === "horizontal" ? "row" : "column"
  }, ownerState.orientation === "horizontal" && {
    [`& > label ~ .${switchClasses_default.root}`]: {
      "--unstable_Switch-margin": "0 0 0 auto"
    }
  });
});
var FormControl = React43.forwardRef(function FormControl2(inProps, ref) {
  const props = useThemeProps({
    props: inProps,
    name: "JoyFormControl"
  });
  const {
    id: idOverride,
    className,
    component = "div",
    disabled = false,
    required = false,
    error = false,
    color,
    size = "md",
    orientation = "vertical",
    slots = {},
    slotProps = {}
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded27);
  const id = useId(idOverride);
  const [helperText, setHelperText] = React43.useState(null);
  const ownerState = _extends({}, props, {
    id,
    component,
    color,
    disabled,
    error,
    required,
    size,
    orientation
  });
  let registerEffect;
  if (true) {
    const registeredInput = React43.useRef(false);
    registerEffect = () => {
      if (registeredInput.current) {
        console.error(["Joy: A FormControl can contain only one control component (Autocomplete | Input | Textarea | Select | RadioGroup)", "You should not mix those components inside a single FormControl instance"].join("\n"));
      }
      registeredInput.current = true;
      return () => {
        registeredInput.current = false;
      };
    };
  }
  const classes = useUtilityClasses24(ownerState);
  const [SlotRoot, rootProps] = useSlot("root", {
    ref,
    className: clsx_m_default(classes.root, className),
    elementType: FormControlRoot,
    externalForwardedProps: _extends({}, other, {
      component,
      slots,
      slotProps
    }),
    ownerState
  });
  const formControlContextValue = React43.useMemo(() => ({
    disabled,
    required,
    error,
    color,
    size,
    htmlFor: id,
    labelId: `${id}-label`,
    "aria-describedby": helperText ? `${id}-helper-text` : void 0,
    setHelperText,
    registerEffect
  }), [color, disabled, error, helperText, id, registerEffect, required, size]);
  return (0, import_jsx_runtime40.jsx)(FormControlContext_default.Provider, {
    value: formControlContextValue,
    children: (0, import_jsx_runtime40.jsx)(SlotRoot, _extends({}, rootProps))
  });
});
true ? FormControl.propTypes = {
  children: import_prop_types26.default.node,
  className: import_prop_types26.default.string,
  color: import_prop_types26.default.oneOfType([import_prop_types26.default.oneOf(["danger", "info", "neutral", "primary", "success", "warning"]), import_prop_types26.default.string]),
  component: import_prop_types26.default.elementType,
  disabled: import_prop_types26.default.bool,
  error: import_prop_types26.default.bool,
  id: import_prop_types26.default.string,
  orientation: import_prop_types26.default.oneOf(["horizontal", "vertical"]),
  required: import_prop_types26.default.bool,
  size: import_prop_types26.default.oneOfType([import_prop_types26.default.oneOf(["sm", "md", "lg"]), import_prop_types26.default.string]),
  slotProps: import_prop_types26.default.shape({
    root: import_prop_types26.default.oneOfType([import_prop_types26.default.func, import_prop_types26.default.object])
  }),
  slots: import_prop_types26.default.shape({
    root: import_prop_types26.default.elementType
  }),
  sx: import_prop_types26.default.oneOfType([import_prop_types26.default.arrayOf(import_prop_types26.default.oneOfType([import_prop_types26.default.func, import_prop_types26.default.object, import_prop_types26.default.bool])), import_prop_types26.default.func, import_prop_types26.default.object])
} : void 0;
var FormControl_default = FormControl;

// node_modules/@mui/joy/FormHelperText/FormHelperText.js
init_extends();
init_objectWithoutPropertiesLoose();
var React44 = __toESM(require_react());
var import_prop_types27 = __toESM(require_prop_types());
init_esm();
init_composeClasses();

// node_modules/@mui/joy/FormHelperText/formHelperTextClasses.js
function getFormHelperTextUtilityClass(slot) {
  return generateUtilityClass2("MuiFormHelperText", slot);
}
var formHelperTextClasses = generateUtilityClasses2("MuiFormHelperText", ["root"]);
var formHelperTextClasses_default = formHelperTextClasses;

// node_modules/@mui/joy/FormLabel/formLabelClasses.js
function getFormLabelUtilityClass(slot) {
  return generateUtilityClass2("MuiFormLabel", slot);
}
var formLabelClasses = generateUtilityClasses2("MuiFormLabel", ["root", "asterisk"]);
var formLabelClasses_default = formLabelClasses;

// node_modules/@mui/joy/FormHelperText/FormHelperText.js
var import_jsx_runtime41 = __toESM(require_jsx_runtime());
var _excluded28 = ["children", "component", "slots", "slotProps"];
var useUtilityClasses25 = () => {
  const slots = {
    root: ["root"]
  };
  return composeClasses(slots, getFormHelperTextUtilityClass, {});
};
var FormHelperTextRoot = styled_default("div", {
  name: "JoyFormHelperText",
  slot: "Root",
  overridesResolver: (props, styles) => styles.root
})(({
  theme
}) => ({
  display: "flex",
  alignItems: "center",
  fontFamily: theme.vars.fontFamily.body,
  fontSize: `var(--FormHelperText-fontSize, ${theme.vars.fontSize.sm})`,
  lineHeight: theme.vars.lineHeight.sm,
  color: `var(--FormHelperText-color, ${theme.vars.palette.text.secondary})`,
  margin: "var(--FormHelperText-margin, 0px)",
  [`.${formLabelClasses_default.root} + &`]: {
    "--FormHelperText-margin": "0px"
  }
}));
var FormHelperText = React44.forwardRef(function FormHelperText2(inProps, ref) {
  const props = useThemeProps({
    props: inProps,
    name: "JoyFormHelperText"
  });
  const {
    children,
    component,
    slots = {},
    slotProps = {}
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded28);
  const rootRef = React44.useRef(null);
  const handleRef = useForkRef(rootRef, ref);
  const formControl = React44.useContext(FormControlContext_default);
  const setHelperText = formControl == null ? void 0 : formControl.setHelperText;
  React44.useEffect(() => {
    setHelperText == null ? void 0 : setHelperText(rootRef.current);
    return () => {
      setHelperText == null ? void 0 : setHelperText(null);
    };
  }, [setHelperText]);
  const classes = useUtilityClasses25();
  const externalForwardedProps = _extends({}, other, {
    component,
    slots,
    slotProps
  });
  const [SlotRoot, rootProps] = useSlot("root", {
    ref: handleRef,
    elementType: FormHelperTextRoot,
    externalForwardedProps,
    ownerState: props,
    additionalProps: {
      as: component,
      id: formControl == null ? void 0 : formControl["aria-describedby"]
    },
    className: classes.root
  });
  return (0, import_jsx_runtime41.jsx)(SlotRoot, _extends({}, rootProps, {
    children
  }));
});
true ? FormHelperText.propTypes = {
  children: import_prop_types27.default.node,
  component: import_prop_types27.default.elementType,
  slotProps: import_prop_types27.default.shape({
    root: import_prop_types27.default.oneOfType([import_prop_types27.default.func, import_prop_types27.default.object])
  }),
  slots: import_prop_types27.default.shape({
    root: import_prop_types27.default.elementType
  }),
  sx: import_prop_types27.default.oneOfType([import_prop_types27.default.arrayOf(import_prop_types27.default.oneOfType([import_prop_types27.default.func, import_prop_types27.default.object, import_prop_types27.default.bool])), import_prop_types27.default.func, import_prop_types27.default.object])
} : void 0;
var FormHelperText_default = FormHelperText;

// node_modules/@mui/joy/FormLabel/FormLabel.js
init_extends();
init_objectWithoutPropertiesLoose();
var React45 = __toESM(require_react());
var import_prop_types28 = __toESM(require_prop_types());
init_composeClasses();
var import_jsx_runtime42 = __toESM(require_jsx_runtime());
var _excluded29 = ["children", "component", "slots", "slotProps"];
var useUtilityClasses26 = () => {
  const slots = {
    root: ["root"],
    asterisk: ["asterisk"]
  };
  return composeClasses(slots, getFormLabelUtilityClass, {});
};
var FormLabelRoot = styled_default("label", {
  name: "JoyFormLabel",
  slot: "Root",
  overridesResolver: (props, styles) => styles.root
})(({
  theme
}) => ({
  WebkitTapHighlightColor: "transparent",
  alignSelf: "var(--FormLabel-alignSelf)",
  display: "flex",
  alignItems: "center",
  flexWrap: "wrap",
  userSelect: "none",
  fontFamily: theme.vars.fontFamily.body,
  fontSize: `var(--FormLabel-fontSize, ${theme.vars.fontSize.sm})`,
  fontWeight: theme.vars.fontWeight.md,
  lineHeight: theme.vars.lineHeight.md,
  color: `var(--FormLabel-color, ${theme.vars.palette.text.primary})`,
  margin: "var(--FormLabel-margin, 0px)"
}));
var AsteriskComponent = styled_default("span", {
  name: "JoyFormLabel",
  slot: "Asterisk",
  overridesResolver: (props, styles) => styles.asterisk
})({
  color: "var(--FormLabel-asteriskColor)"
});
var FormLabel = React45.forwardRef(function FormLabel2(inProps, ref) {
  var _ref, _inProps$required;
  const props = useThemeProps({
    props: inProps,
    name: "JoyFormLabel"
  });
  const {
    children,
    component = "label",
    slots = {},
    slotProps = {}
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded29);
  const formControl = React45.useContext(FormControlContext_default);
  const required = (_ref = (_inProps$required = inProps.required) != null ? _inProps$required : formControl == null ? void 0 : formControl.required) != null ? _ref : false;
  const ownerState = _extends({}, props, {
    required
  });
  const classes = useUtilityClasses26();
  const externalForwardedProps = _extends({}, other, {
    component,
    slots,
    slotProps
  });
  const [SlotRoot, rootProps] = useSlot("root", {
    additionalProps: {
      htmlFor: formControl == null ? void 0 : formControl.htmlFor,
      id: formControl == null ? void 0 : formControl.labelId
    },
    ref,
    className: classes.root,
    elementType: FormLabelRoot,
    externalForwardedProps,
    ownerState
  });
  const [SlotAsterisk, asteriskProps] = useSlot("asterisk", {
    additionalProps: {
      "aria-hidden": true
    },
    className: classes.asterisk,
    elementType: AsteriskComponent,
    externalForwardedProps,
    ownerState
  });
  return (0, import_jsx_runtime42.jsxs)(SlotRoot, _extends({}, rootProps, {
    children: [children, required && (0, import_jsx_runtime42.jsxs)(SlotAsterisk, _extends({}, asteriskProps, {
      children: ["\u2009", "*"]
    }))]
  }));
});
true ? FormLabel.propTypes = {
  children: import_prop_types28.default.node,
  component: import_prop_types28.default.elementType,
  required: import_prop_types28.default.bool,
  slotProps: import_prop_types28.default.shape({
    asterisk: import_prop_types28.default.oneOfType([import_prop_types28.default.func, import_prop_types28.default.object]),
    root: import_prop_types28.default.oneOfType([import_prop_types28.default.func, import_prop_types28.default.object])
  }),
  slots: import_prop_types28.default.shape({
    asterisk: import_prop_types28.default.elementType,
    root: import_prop_types28.default.elementType
  }),
  sx: import_prop_types28.default.oneOfType([import_prop_types28.default.arrayOf(import_prop_types28.default.oneOfType([import_prop_types28.default.func, import_prop_types28.default.object, import_prop_types28.default.bool])), import_prop_types28.default.func, import_prop_types28.default.object])
} : void 0;
var FormLabel_default = FormLabel;

// node_modules/@mui/joy/Grid/Grid.js
var import_prop_types29 = __toESM(require_prop_types());
init_Unstable_Grid();
var Grid = createGrid({
  createStyledComponent: styled_default("div", {
    name: "JoyGrid",
    slot: "Root",
    overridesResolver: (props, styles) => styles.root
  }),
  useThemeProps: (inProps) => useThemeProps({
    props: inProps,
    name: "JoyGrid"
  })
});
true ? Grid.propTypes = {
  children: import_prop_types29.default.node,
  sx: import_prop_types29.default.oneOfType([import_prop_types29.default.arrayOf(import_prop_types29.default.oneOfType([import_prop_types29.default.func, import_prop_types29.default.object, import_prop_types29.default.bool])), import_prop_types29.default.func, import_prop_types29.default.object])
} : void 0;
var Grid_default = Grid;

// node_modules/@mui/joy/Grid/gridClasses.js
init_esm();
function getGridUtilityClass(slot) {
  return generateUtilityClass("MuiGrid", slot);
}
var SPACINGS = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10];
var DIRECTIONS = ["column-reverse", "column", "row-reverse", "row"];
var WRAPS = ["nowrap", "wrap-reverse", "wrap"];
var GRID_SIZES = ["auto", true, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12];
var gridClasses = generateUtilityClasses("MuiGrid", [
  "root",
  "container",
  "item",
  "zeroMinWidth",
  ...SPACINGS.map((spacing) => `spacing-xs-${spacing}`),
  ...DIRECTIONS.map((direction) => `direction-xs-${direction}`),
  ...WRAPS.map((wrap) => `wrap-xs-${wrap}`),
  ...GRID_SIZES.map((size) => `grid-xs-${size}`),
  ...GRID_SIZES.map((size) => `grid-sm-${size}`),
  ...GRID_SIZES.map((size) => `grid-md-${size}`),
  ...GRID_SIZES.map((size) => `grid-lg-${size}`),
  ...GRID_SIZES.map((size) => `grid-xl-${size}`)
]);
var gridClasses_default = gridClasses;

// node_modules/@mui/joy/LinearProgress/LinearProgress.js
init_objectWithoutPropertiesLoose();
init_extends();
var React46 = __toESM(require_react());
var import_prop_types30 = __toESM(require_prop_types());
init_clsx_m();
init_esm();
init_base();
init_esm2();

// node_modules/@mui/joy/LinearProgress/linearProgressClasses.js
function getLinearProgressUtilityClass(slot) {
  return generateUtilityClass2("MuiLinearProgress", slot);
}
var linearProgressClasses = generateUtilityClasses2("MuiLinearProgress", ["root", "determinate", "colorPrimary", "colorNeutral", "colorDanger", "colorInfo", "colorSuccess", "colorWarning", "colorContext", "sizeSm", "sizeMd", "sizeLg", "variantPlain", "variantOutlined", "variantSoft", "variantSolid"]);
var linearProgressClasses_default = linearProgressClasses;

// node_modules/@mui/joy/LinearProgress/LinearProgress.js
var import_jsx_runtime43 = __toESM(require_jsx_runtime());
var _excluded30 = ["children", "className", "component", "color", "size", "variant", "thickness", "determinate", "value", "style", "slots", "slotProps"];
var _ = (t) => t;
var _t;
var _t2;
var progressKeyframe = keyframes(_t || (_t = _`
  0% {
    left: var(--_LinearProgress-progressInset);
    width: var(--LinearProgress-progressMinWidth);
  }

  25% {
    width: var(--LinearProgress-progressMaxWidth);
  }

  50% {
    left: var(--_LinearProgress-progressLeft);
    width: var(--LinearProgress-progressMinWidth);
  }

  75% {
    width: var(--LinearProgress-progressMaxWidth);
  }
  
  100% {
    left: var(--_LinearProgress-progressInset);
    width: var(--LinearProgress-progressMinWidth);
  }
`));
var useUtilityClasses27 = (ownerState) => {
  const {
    determinate,
    color,
    variant,
    size
  } = ownerState;
  const slots = {
    root: ["root", determinate && "determinate", color && `color${capitalize(color)}`, variant && `variant${capitalize(variant)}`, size && `size${capitalize(size)}`]
  };
  return composeClasses(slots, getLinearProgressUtilityClass, {});
};
var LinearProgressRoot = styled_default("div", {
  name: "JoyLinearProgress",
  slot: "Root",
  overridesResolver: (props, styles) => styles.root
})(({
  ownerState,
  theme
}) => {
  var _theme$variants;
  return _extends({
    "--LinearProgress-radius": "var(--LinearProgress-thickness)",
    "--LinearProgress-progressThickness": "var(--LinearProgress-thickness)",
    "--LinearProgress-progressRadius": "max(var(--LinearProgress-radius) - var(--_LinearProgress-padding), min(var(--_LinearProgress-padding) / 2, var(--LinearProgress-radius) / 2))"
  }, ownerState.size === "sm" && {
    "--LinearProgress-thickness": "4px"
  }, ownerState.size === "md" && {
    "--LinearProgress-thickness": "6px"
  }, ownerState.size === "lg" && {
    "--LinearProgress-thickness": "8px"
  }, ownerState.thickness && {
    "--LinearProgress-thickness": `${ownerState.thickness}px`
  }, !ownerState.determinate && {
    "--LinearProgress-progressMinWidth": "calc(var(--LinearProgress-percent) * 1% / 2)",
    "--LinearProgress-progressMaxWidth": "calc(var(--LinearProgress-percent) * 1%)",
    "--_LinearProgress-progressLeft": "calc(100% - var(--LinearProgress-progressMinWidth) - var(--_LinearProgress-progressInset))",
    "--_LinearProgress-progressInset": "calc(var(--LinearProgress-thickness) / 2 - var(--LinearProgress-progressThickness) / 2)"
  }, {
    minBlockSize: "var(--LinearProgress-thickness)",
    boxSizing: "border-box",
    borderRadius: "var(--LinearProgress-radius)",
    display: "flex",
    justifyContent: "center",
    alignItems: "center",
    flex: 1,
    padding: "var(--_LinearProgress-padding)",
    position: "relative"
  }, (_theme$variants = theme.variants[ownerState.variant]) == null ? void 0 : _theme$variants[ownerState.color], {
    "--_LinearProgress-padding": "max((var(--LinearProgress-thickness) - 2 * var(--variant-borderWidth, 0px) - var(--LinearProgress-progressThickness)) / 2, 0px)",
    "&::before": {
      content: '""',
      display: "block",
      boxSizing: "inherit",
      blockSize: "var(--LinearProgress-progressThickness)",
      borderRadius: "var(--LinearProgress-progressRadius)",
      backgroundColor: "currentColor",
      color: "inherit",
      position: "absolute"
    }
  });
}, ({
  ownerState
}) => ownerState.determinate ? {
  "&::before": {
    left: "var(--_LinearProgress-padding)",
    inlineSize: "calc(var(--LinearProgress-percent) * 1% - 2 * var(--_LinearProgress-padding))"
  }
} : css(_t2 || (_t2 = _`
          &::before {
            animation: ${0}
              var(--LinearProgress-circulation, 2.5s ease-in-out 0s infinite normal none running);
          }
        `), progressKeyframe));
var LinearProgress = React46.forwardRef(function LinearProgress2(inProps, ref) {
  const props = useThemeProps({
    props: inProps,
    name: "JoyLinearProgress"
  });
  const {
    children,
    className,
    component,
    color: colorProp = "primary",
    size = "md",
    variant = "soft",
    thickness,
    determinate = false,
    value = determinate ? 0 : 25,
    style,
    slots = {},
    slotProps = {}
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded30);
  const {
    getColor
  } = useColorInversion(variant);
  const color = getColor(inProps.color, colorProp);
  const ownerState = _extends({}, props, {
    component,
    color,
    size,
    variant,
    thickness,
    value,
    determinate,
    instanceSize: inProps.size
  });
  const classes = useUtilityClasses27(ownerState);
  const externalForwardedProps = _extends({}, other, {
    component,
    slots,
    slotProps
  });
  const [SlotRoot, rootProps] = useSlot("root", {
    ref,
    className: clsx_m_default(classes.root, className),
    elementType: LinearProgressRoot,
    externalForwardedProps,
    ownerState,
    additionalProps: _extends({
      as: component,
      role: "progressbar",
      style: _extends({}, {
        "--LinearProgress-percent": value
      }, style)
    }, typeof value === "number" && determinate && {
      "aria-valuenow": Math.round(value)
    })
  });
  return (0, import_jsx_runtime43.jsx)(SlotRoot, _extends({}, rootProps, {
    children
  }));
});
true ? LinearProgress.propTypes = {
  children: import_prop_types30.default.node,
  className: import_prop_types30.default.string,
  color: import_prop_types30.default.oneOfType([import_prop_types30.default.oneOf(["danger", "info", "neutral", "primary", "success", "warning"]), import_prop_types30.default.string]),
  component: import_prop_types30.default.elementType,
  determinate: import_prop_types30.default.bool,
  size: import_prop_types30.default.oneOfType([import_prop_types30.default.oneOf(["sm", "md", "lg"]), import_prop_types30.default.string]),
  slotProps: import_prop_types30.default.shape({
    root: import_prop_types30.default.oneOfType([import_prop_types30.default.func, import_prop_types30.default.object])
  }),
  slots: import_prop_types30.default.shape({
    root: import_prop_types30.default.elementType
  }),
  style: import_prop_types30.default.object,
  sx: import_prop_types30.default.oneOfType([import_prop_types30.default.arrayOf(import_prop_types30.default.oneOfType([import_prop_types30.default.func, import_prop_types30.default.object, import_prop_types30.default.bool])), import_prop_types30.default.func, import_prop_types30.default.object]),
  thickness: import_prop_types30.default.number,
  value: import_prop_types30.default.number,
  variant: import_prop_types30.default.oneOfType([import_prop_types30.default.oneOf(["outlined", "plain", "soft", "solid"]), import_prop_types30.default.string])
} : void 0;
var LinearProgress_default = LinearProgress;

// node_modules/@mui/joy/Link/Link.js
init_objectWithoutPropertiesLoose();
init_extends();
var React47 = __toESM(require_react());
var import_prop_types31 = __toESM(require_prop_types());
init_base();
init_esm();
init_esm2();

// node_modules/@mui/joy/Link/linkClasses.js
function getLinkUtilityClass(slot) {
  return generateUtilityClass2("MuiLink", slot);
}
var linkClasses = generateUtilityClasses2("MuiLink", ["root", "disabled", "focusVisible", "colorPrimary", "colorNeutral", "colorDanger", "colorInfo", "colorSuccess", "colorWarning", "colorContext", "focusVisible", "variantPlain", "variantOutlined", "variantSoft", "variantSolid", "underlineNone", "underlineHover", "underlineAlways", "h1", "h2", "h3", "h4", "h5", "h6", "body1", "body2", "body3", "startDecorator", "endDecorator"]);
var linkClasses_default = linkClasses;

// node_modules/@mui/joy/Link/Link.js
var import_jsx_runtime44 = __toESM(require_jsx_runtime());
var import_jsx_runtime45 = __toESM(require_jsx_runtime());
var _excluded31 = ["color", "textColor", "variant"];
var _excluded210 = ["children", "disabled", "onBlur", "onFocus", "level", "overlay", "underline", "endDecorator", "startDecorator", "component", "slots", "slotProps"];
var useUtilityClasses28 = (ownerState) => {
  const {
    level,
    color,
    variant,
    underline,
    focusVisible,
    disabled
  } = ownerState;
  const slots = {
    root: ["root", color && `color${capitalize(color)}`, disabled && "disabled", focusVisible && "focusVisible", level, underline && `underline${capitalize(underline)}`, variant && `variant${capitalize(variant)}`],
    startDecorator: ["startDecorator"],
    endDecorator: ["endDecorator"]
  };
  return composeClasses(slots, getLinkUtilityClass, {});
};
var StartDecorator = styled_default("span", {
  name: "JoyLink",
  slot: "StartDecorator",
  overridesResolver: (props, styles) => styles.startDecorator
})(({
  ownerState
}) => {
  var _ownerState$sx;
  return _extends({
    display: "inline-flex",
    marginInlineEnd: "clamp(4px, var(--Link-gap, 0.375em), 0.75rem)"
  }, typeof ownerState.startDecorator !== "string" && (ownerState.alignItems === "flex-start" || ((_ownerState$sx = ownerState.sx) == null ? void 0 : _ownerState$sx.alignItems) === "flex-start") && {
    marginTop: "2px"
  });
});
var EndDecorator = styled_default("span", {
  name: "JoyLink",
  slot: "endDecorator",
  overridesResolver: (props, styles) => styles.endDecorator
})(({
  ownerState
}) => {
  var _ownerState$sx2;
  return _extends({
    display: "inline-flex",
    marginInlineStart: "clamp(4px, var(--Link-gap, 0.25em), 0.5rem)"
  }, typeof ownerState.startDecorator !== "string" && (ownerState.alignItems === "flex-start" || ((_ownerState$sx2 = ownerState.sx) == null ? void 0 : _ownerState$sx2.alignItems) === "flex-start") && {
    marginTop: "2px"
  });
});
var LinkRoot = styled_default("a", {
  name: "JoyLink",
  slot: "Root",
  overridesResolver: (props, styles) => styles.root
})(({
  theme,
  ownerState
}) => {
  var _theme$vars$palette, _theme$vars$palette2, _theme$vars$palette3, _theme$variants$owner, _theme$variants, _theme$variants2, _theme$variants3;
  return [_extends({
    "--Icon-fontSize": "1.25em"
  }, ownerState.level && ownerState.level !== "inherit" && theme.typography[ownerState.level], ownerState.level === "inherit" && {
    fontSize: "inherit",
    fontFamily: "inherit",
    lineHeight: "inherit"
  }, ownerState.underline === "none" && {
    textDecoration: "none"
  }, ownerState.underline === "hover" && {
    textDecoration: "none",
    "&:hover": {
      textDecorationLine: "underline"
    }
  }, ownerState.underline === "always" && {
    textDecoration: "underline"
  }, ownerState.startDecorator && {
    verticalAlign: "bottom"
  }, {
    display: "inline-flex",
    alignItems: "center",
    WebkitTapHighlightColor: "transparent",
    backgroundColor: "transparent",
    outline: 0,
    border: 0,
    margin: 0,
    borderRadius: theme.vars.radius.xs,
    padding: 0,
    cursor: "pointer"
  }, ownerState.color !== "context" && {
    textDecorationColor: `rgba(${(_theme$vars$palette = theme.vars.palette[ownerState.color]) == null ? void 0 : _theme$vars$palette.mainChannel} / var(--Link-underlineOpacity, 0.72))`
  }, ownerState.variant ? _extends({
    paddingBlock: "min(0.15em, 4px)",
    paddingInline: "0.375em"
  }, !ownerState.nesting && {
    marginInline: "-0.375em"
  }) : _extends({}, ownerState.color !== "context" && {
    color: `rgba(${(_theme$vars$palette2 = theme.vars.palette[ownerState.color]) == null ? void 0 : _theme$vars$palette2.mainChannel} / 1)`
  }, {
    [`&.${linkClasses_default.disabled}`]: _extends({
      pointerEvents: "none"
    }, ownerState.color !== "context" && {
      color: `rgba(${(_theme$vars$palette3 = theme.vars.palette[ownerState.color]) == null ? void 0 : _theme$vars$palette3.mainChannel} / 0.6)`
    })
  }), {
    userSelect: "none",
    MozAppearance: "none",
    WebkitAppearance: "none",
    "&::-moz-focus-inner": {
      borderStyle: "none"
    }
  }, ownerState.overlay ? {
    position: "initial",
    "&::after": {
      content: '""',
      display: "block",
      position: "absolute",
      top: 0,
      left: 0,
      bottom: 0,
      right: 0,
      borderRadius: `var(--unstable_actionRadius, inherit)`,
      margin: `var(--unstable_actionMargin)`
    },
    [`${theme.focus.selector}`]: {
      "&::after": theme.focus.default
    }
  } : {
    position: "relative",
    [theme.focus.selector]: theme.focus.default
  }), ownerState.variant && _extends({}, (_theme$variants$owner = theme.variants[ownerState.variant]) == null ? void 0 : _theme$variants$owner[ownerState.color], {
    "&:hover": (_theme$variants = theme.variants[`${ownerState.variant}Hover`]) == null ? void 0 : _theme$variants[ownerState.color],
    "&:active": (_theme$variants2 = theme.variants[`${ownerState.variant}Active`]) == null ? void 0 : _theme$variants2[ownerState.color],
    [`&.${linkClasses_default.disabled}`]: (_theme$variants3 = theme.variants[`${ownerState.variant}Disabled`]) == null ? void 0 : _theme$variants3[ownerState.color]
  })];
});
var Link = React47.forwardRef(function Link2(inProps, ref) {
  const _useThemeProps = useThemeProps({
    props: inProps,
    name: "JoyLink"
  }), {
    color: colorProp = "primary",
    textColor,
    variant
  } = _useThemeProps, themeProps = _objectWithoutPropertiesLoose(_useThemeProps, _excluded31);
  const {
    getColor
  } = useColorInversion(variant);
  const color = getColor(inProps.color, colorProp);
  const nesting = React47.useContext(TypographyNestedContext);
  const inheriting = React47.useContext(TypographyInheritContext);
  const props = extendSxProp(_extends({}, themeProps, {
    color: textColor
  }));
  const {
    children,
    disabled = false,
    onBlur,
    onFocus,
    level: levelProp = "body1",
    overlay = false,
    underline = "hover",
    endDecorator,
    startDecorator,
    component,
    slots = {},
    slotProps = {}
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded210);
  const level = nesting || inheriting ? inProps.level || "inherit" : levelProp;
  const {
    isFocusVisibleRef,
    onBlur: handleBlurVisible,
    onFocus: handleFocusVisible,
    ref: focusVisibleRef
  } = useIsFocusVisible();
  const [focusVisible, setFocusVisible] = React47.useState(false);
  const handleRef = useForkRef(ref, focusVisibleRef);
  const handleBlur = (event) => {
    handleBlurVisible(event);
    if (isFocusVisibleRef.current === false) {
      setFocusVisible(false);
    }
    if (onBlur) {
      onBlur(event);
    }
  };
  const handleFocus = (event) => {
    handleFocusVisible(event);
    if (isFocusVisibleRef.current === true) {
      setFocusVisible(true);
    }
    if (onFocus) {
      onFocus(event);
    }
  };
  const ownerState = _extends({}, props, {
    color,
    disabled,
    focusVisible,
    underline,
    variant,
    level,
    overlay,
    nesting
  });
  const classes = useUtilityClasses28(ownerState);
  const externalForwardedProps = _extends({}, other, {
    component,
    slots,
    slotProps
  });
  const [SlotRoot, rootProps] = useSlot("root", {
    additionalProps: {
      onBlur: handleBlur,
      onFocus: handleFocus
    },
    ref: handleRef,
    className: classes.root,
    elementType: LinkRoot,
    externalForwardedProps,
    ownerState
  });
  const [SlotStartDecorator, startDecoratorProps] = useSlot("startDecorator", {
    className: classes.startDecorator,
    elementType: StartDecorator,
    externalForwardedProps,
    ownerState
  });
  const [SlotEndDecorator, endDecoratorProps] = useSlot("endDecorator", {
    className: classes.endDecorator,
    elementType: EndDecorator,
    externalForwardedProps,
    ownerState
  });
  return (0, import_jsx_runtime44.jsx)(TypographyNestedContext.Provider, {
    value: true,
    children: (0, import_jsx_runtime45.jsxs)(SlotRoot, _extends({}, rootProps, {
      children: [startDecorator && (0, import_jsx_runtime44.jsx)(SlotStartDecorator, _extends({}, startDecoratorProps, {
        children: startDecorator
      })), children, endDecorator && (0, import_jsx_runtime44.jsx)(SlotEndDecorator, _extends({}, endDecoratorProps, {
        children: endDecorator
      }))]
    }))
  });
});
true ? Link.propTypes = {
  children: import_prop_types31.default.node,
  color: import_prop_types31.default.oneOfType([import_prop_types31.default.oneOf(["danger", "info", "neutral", "primary", "success", "warning"]), import_prop_types31.default.string]),
  component: import_prop_types31.default.elementType,
  disabled: import_prop_types31.default.bool,
  endDecorator: import_prop_types31.default.node,
  level: import_prop_types31.default.oneOfType([import_prop_types31.default.oneOf(["body1", "body2", "body3", "h1", "h2", "h3", "h4", "h5", "h6", "inherit"]), import_prop_types31.default.string]),
  onBlur: import_prop_types31.default.func,
  onFocus: import_prop_types31.default.func,
  overlay: import_prop_types31.default.bool,
  slotProps: import_prop_types31.default.shape({
    endDecorator: import_prop_types31.default.oneOfType([import_prop_types31.default.func, import_prop_types31.default.object]),
    root: import_prop_types31.default.oneOfType([import_prop_types31.default.func, import_prop_types31.default.object]),
    startDecorator: import_prop_types31.default.oneOfType([import_prop_types31.default.func, import_prop_types31.default.object])
  }),
  slots: import_prop_types31.default.shape({
    endDecorator: import_prop_types31.default.elementType,
    root: import_prop_types31.default.elementType,
    startDecorator: import_prop_types31.default.elementType
  }),
  startDecorator: import_prop_types31.default.node,
  sx: import_prop_types31.default.oneOfType([import_prop_types31.default.arrayOf(import_prop_types31.default.oneOfType([import_prop_types31.default.func, import_prop_types31.default.object, import_prop_types31.default.bool])), import_prop_types31.default.func, import_prop_types31.default.object]),
  textColor: import_prop_types31.default.any,
  underline: import_prop_types31.default.oneOf(["always", "hover", "none"]),
  variant: import_prop_types31.default.oneOfType([import_prop_types31.default.oneOf(["outlined", "plain", "soft", "solid"]), import_prop_types31.default.string])
} : void 0;
var Link_default = Link;

// node_modules/@mui/joy/ListDivider/ListDivider.js
init_objectWithoutPropertiesLoose();
init_extends();
var React48 = __toESM(require_react());
var import_prop_types32 = __toESM(require_prop_types());
init_clsx_m();
init_esm();
init_composeClasses();

// node_modules/@mui/joy/ListDivider/listDividerClasses.js
function getListDividerUtilityClass(slot) {
  return generateUtilityClass2("MuiListDivider", slot);
}
var listDividerClasses = generateUtilityClasses2("MuiListDivider", ["root", "insetGutter", "insetStartDecorator", "insetStartContent", "horizontal", "vertical"]);
var listDividerClasses_default = listDividerClasses;

// node_modules/@mui/joy/ListDivider/ListDivider.js
var import_jsx_runtime46 = __toESM(require_jsx_runtime());
var _excluded33 = ["component", "role", "className", "children", "inset", "orientation", "slots", "slotProps"];
var useUtilityClasses29 = (ownerState) => {
  const {
    orientation,
    inset
  } = ownerState;
  const slots = {
    root: [
      "root",
      orientation,
      inset && inset !== "context" && `inset${capitalize(inset)}`
    ]
  };
  return composeClasses(slots, getListDividerUtilityClass, {});
};
var ListDividerRoot = styled_default(DividerRoot, {
  name: "JoyListDivider",
  slot: "Root",
  overridesResolver: (props, styles) => styles.root
})(({
  ownerState
}) => _extends({}, ownerState.inset === "context" && {
  "--Divider-inset": "calc(-1 * var(--List-padding))"
}, ownerState.row && _extends({
  marginInline: "var(--ListDivider-gap)"
}, ownerState.inset === "gutter" && {
  marginBlock: "var(--ListItem-paddingY)"
}, ownerState["data-first-child"] === void 0 && {
  marginInlineStart: "calc(var(--List-gap) + var(--ListDivider-gap))"
}), !ownerState.row && _extends({}, ownerState["data-first-child"] === void 0 && {
  marginBlockStart: "calc(var(--List-gap) + var(--ListDivider-gap))"
}, {
  marginBlockEnd: "var(--ListDivider-gap)"
}, ownerState.inset === "gutter" && {
  marginInlineStart: "var(--ListItem-paddingLeft)",
  marginInlineEnd: "var(--ListItem-paddingRight)"
}, ownerState.inset === "startDecorator" && {
  marginInlineStart: "var(--ListItem-paddingLeft)"
}, ownerState.inset === "startContent" && {
  marginInlineStart: "calc(var(--ListItem-paddingLeft) + var(--ListItemDecorator-size))"
})));
var ListDivider = React48.forwardRef(function ListDivider2(inProps, ref) {
  const props = useThemeProps({
    props: inProps,
    name: "JoyListDivider"
  });
  const row = React48.useContext(RowListContext_default);
  const listComponent = React48.useContext(ComponentListContext_default);
  const {
    component: componentProp,
    role: roleProp,
    className,
    children,
    inset = "context",
    orientation: orientationProp,
    slots = {},
    slotProps = {}
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded33);
  const [listElement] = (listComponent == null ? void 0 : listComponent.split(":")) || ["", ""];
  const component = componentProp || (listElement && !listElement.match(/^(ul|ol|menu)$/) ? "div" : "li");
  const role = roleProp || (component === "li" ? "separator" : void 0);
  const orientation = orientationProp || (row ? "vertical" : "horizontal");
  const ownerState = _extends({}, props, {
    inset,
    row,
    orientation,
    component,
    role
  });
  const classes = useUtilityClasses29(ownerState);
  const externalForwardedProps = _extends({}, other, {
    component,
    slots,
    slotProps
  });
  const [SlotRoot, rootProps] = useSlot("root", {
    ref,
    className: clsx_m_default(classes.root, className),
    elementType: ListDividerRoot,
    externalForwardedProps,
    ownerState,
    additionalProps: _extends({
      as: component,
      role
    }, role === "separator" && orientation === "vertical" && {
      "aria-orientation": "vertical"
    })
  });
  return (0, import_jsx_runtime46.jsx)(SlotRoot, _extends({}, rootProps, {
    children
  }));
});
true ? ListDivider.propTypes = {
  children: import_prop_types32.default.node,
  className: import_prop_types32.default.string,
  component: import_prop_types32.default.elementType,
  inset: import_prop_types32.default.oneOfType([import_prop_types32.default.oneOf(["context", "gutter", "startDecorator", "startContent"]), import_prop_types32.default.string]),
  orientation: import_prop_types32.default.oneOf(["horizontal", "vertical"]),
  role: import_prop_types32.default.string,
  slotProps: import_prop_types32.default.shape({
    root: import_prop_types32.default.oneOfType([import_prop_types32.default.func, import_prop_types32.default.object])
  }),
  slots: import_prop_types32.default.shape({
    root: import_prop_types32.default.elementType
  }),
  sx: import_prop_types32.default.oneOfType([import_prop_types32.default.arrayOf(import_prop_types32.default.oneOfType([import_prop_types32.default.func, import_prop_types32.default.object, import_prop_types32.default.bool])), import_prop_types32.default.func, import_prop_types32.default.object])
} : void 0;
var ListDivider_default = ListDivider;

// node_modules/@mui/joy/ListItemContent/ListItemContent.js
init_extends();
init_objectWithoutPropertiesLoose();
var React49 = __toESM(require_react());
var import_prop_types33 = __toESM(require_prop_types());
init_clsx_m();
init_composeClasses();

// node_modules/@mui/joy/ListItemContent/listItemContentClasses.js
function getListItemContentUtilityClass(slot) {
  return generateUtilityClass2("MuiListItemContent", slot);
}
var listItemContentClasses = generateUtilityClasses2("MuiListItemContent", ["root"]);
var listItemContentClasses_default = listItemContentClasses;

// node_modules/@mui/joy/ListItemContent/ListItemContent.js
var import_jsx_runtime47 = __toESM(require_jsx_runtime());
var _excluded34 = ["component", "className", "children", "slots", "slotProps"];
var useUtilityClasses30 = () => {
  const slots = {
    root: ["root"]
  };
  return composeClasses(slots, getListItemContentUtilityClass, {});
};
var ListItemContentRoot = styled_default("div", {
  name: "JoyListItemContent",
  slot: "Root",
  overridesResolver: (props, styles) => styles.root
})({
  flex: "1 1 auto",
  minWidth: 0
});
var ListItemContent = React49.forwardRef(function ListItemContent2(inProps, ref) {
  const props = useThemeProps({
    props: inProps,
    name: "JoyListItemContent"
  });
  const {
    component,
    className,
    children,
    slots = {},
    slotProps = {}
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded34);
  const ownerState = _extends({}, props);
  const classes = useUtilityClasses30();
  const externalForwardedProps = _extends({}, other, {
    component,
    slots,
    slotProps
  });
  const [SlotRoot, rootProps] = useSlot("root", {
    ref,
    className: clsx_m_default(classes.root, className),
    elementType: ListItemContentRoot,
    externalForwardedProps,
    ownerState
  });
  return (0, import_jsx_runtime47.jsx)(SlotRoot, _extends({}, rootProps, {
    children
  }));
});
true ? ListItemContent.propTypes = {
  children: import_prop_types33.default.node,
  className: import_prop_types33.default.string,
  component: import_prop_types33.default.elementType,
  slotProps: import_prop_types33.default.shape({
    root: import_prop_types33.default.oneOfType([import_prop_types33.default.func, import_prop_types33.default.object])
  }),
  slots: import_prop_types33.default.shape({
    root: import_prop_types33.default.elementType
  }),
  sx: import_prop_types33.default.oneOfType([import_prop_types33.default.arrayOf(import_prop_types33.default.oneOfType([import_prop_types33.default.func, import_prop_types33.default.object, import_prop_types33.default.bool])), import_prop_types33.default.func, import_prop_types33.default.object])
} : void 0;
var ListItemContent_default = ListItemContent;

// node_modules/@mui/joy/ListItemDecorator/ListItemDecorator.js
init_objectWithoutPropertiesLoose();
init_extends();
var React50 = __toESM(require_react());
var import_prop_types34 = __toESM(require_prop_types());
init_clsx_m();
init_composeClasses();

// node_modules/@mui/joy/ListItemDecorator/listItemDecoratorClasses.js
function getListItemDecoratorUtilityClass(slot) {
  return generateUtilityClass2("MuiListItemDecorator", slot);
}
var listItemDecoratorClasses = generateUtilityClasses2("MuiListItemDecorator", ["root"]);
var listItemDecoratorClasses_default = listItemDecoratorClasses;

// node_modules/@mui/joy/ListItemDecorator/ListItemDecorator.js
var import_jsx_runtime48 = __toESM(require_jsx_runtime());
var _excluded35 = ["component", "className", "children", "slots", "slotProps"];
var useUtilityClasses31 = () => {
  const slots = {
    root: ["root"]
  };
  return composeClasses(slots, getListItemDecoratorUtilityClass, {});
};
var ListItemDecoratorRoot = styled_default("span", {
  name: "JoyListItemDecorator",
  slot: "Root",
  overridesResolver: (props, styles) => styles.root
})(({
  ownerState
}) => _extends({
  boxSizing: "border-box",
  display: "inline-flex",
  color: `var(--ListItemDecorator-color)`
}, ownerState.parentOrientation === "horizontal" ? {
  minInlineSize: "var(--ListItemDecorator-size)",
  alignItems: "center"
} : {
  minBlockSize: "var(--ListItemDecorator-size)",
  justifyContent: "center"
}));
var ListItemDecorator = React50.forwardRef(function ListItemDecorator2(inProps, ref) {
  const props = useThemeProps({
    props: inProps,
    name: "JoyListItemDecorator"
  });
  const {
    component,
    className,
    children,
    slots = {},
    slotProps = {}
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded35);
  const parentOrientation = React50.useContext(ListItemButtonOrientationContext_default);
  const ownerState = _extends({
    parentOrientation
  }, props);
  const classes = useUtilityClasses31();
  const externalForwardedProps = _extends({}, other, {
    component,
    slots,
    slotProps
  });
  const [SlotRoot, rootProps] = useSlot("root", {
    ref,
    className: clsx_m_default(classes.root, className),
    elementType: ListItemDecoratorRoot,
    externalForwardedProps,
    ownerState
  });
  return (0, import_jsx_runtime48.jsx)(SlotRoot, _extends({}, rootProps, {
    children
  }));
});
true ? ListItemDecorator.propTypes = {
  children: import_prop_types34.default.node,
  className: import_prop_types34.default.string,
  component: import_prop_types34.default.elementType,
  slotProps: import_prop_types34.default.shape({
    root: import_prop_types34.default.oneOfType([import_prop_types34.default.func, import_prop_types34.default.object])
  }),
  slots: import_prop_types34.default.shape({
    root: import_prop_types34.default.elementType
  }),
  sx: import_prop_types34.default.oneOfType([import_prop_types34.default.arrayOf(import_prop_types34.default.oneOfType([import_prop_types34.default.func, import_prop_types34.default.object, import_prop_types34.default.bool])), import_prop_types34.default.func, import_prop_types34.default.object])
} : void 0;
var ListItemDecorator_default = ListItemDecorator;

// node_modules/@mui/joy/Menu/Menu.js
init_objectWithoutPropertiesLoose();
init_extends();
var React51 = __toESM(require_react());
var import_prop_types35 = __toESM(require_prop_types());
init_esm();
init_composeClasses();
init_useMenu();
init_Popper();
init_utils();

// node_modules/@mui/joy/Menu/menuClasses.js
function getMenuUtilityClass(slot) {
  return generateUtilityClass2("MuiMenu", slot);
}
var menuClasses = generateUtilityClasses2("MuiMenu", ["root", "listbox", "expanded", "colorPrimary", "colorNeutral", "colorDanger", "colorInfo", "colorSuccess", "colorWarning", "colorContext", "variantPlain", "variantOutlined", "variantSoft", "variantSolid", "sizeSm", "sizeMd", "sizeLg"]);
var menuClasses_default = menuClasses;

// node_modules/@mui/joy/Menu/Menu.js
var import_jsx_runtime49 = __toESM(require_jsx_runtime());
var _excluded36 = ["actions", "anchorEl", "children", "color", "component", "disablePortal", "keepMounted", "invertedColors", "id", "onClose", "open", "modifiers", "variant", "size", "slots", "slotProps"];
var useUtilityClasses32 = (ownerState) => {
  const {
    open,
    variant,
    color,
    size
  } = ownerState;
  const slots = {
    root: ["root", open && "expanded", variant && `variant${capitalize(variant)}`, color && `color${capitalize(color)}`, size && `size${capitalize(size)}`],
    listbox: ["listbox"]
  };
  return composeClasses(slots, getMenuUtilityClass, {});
};
var MenuRoot = styled_default(StyledList, {
  name: "JoyMenu",
  slot: "Root",
  overridesResolver: (props, styles) => styles.root
})(({
  theme,
  ownerState
}) => {
  var _theme$variants, _theme$colorInversion;
  const variantStyle = (_theme$variants = theme.variants[ownerState.variant]) == null ? void 0 : _theme$variants[ownerState.color];
  return [_extends({
    "--focus-outline-offset": `calc(${theme.vars.focus.thickness} * -1)`,
    "--List-radius": theme.vars.radius.sm,
    "--ListItem-stickyBackground": (variantStyle == null ? void 0 : variantStyle.backgroundColor) || (variantStyle == null ? void 0 : variantStyle.background) || theme.vars.palette.background.popup,
    "--ListItem-stickyTop": "calc(var(--List-padding, var(--ListDivider-gap)) * -1)"
  }, scopedVariables, {
    boxShadow: theme.shadow.md,
    overflow: "auto",
    zIndex: theme.vars.zIndex.popup
  }, !(variantStyle != null && variantStyle.backgroundColor) && {
    backgroundColor: theme.vars.palette.background.popup
  }), ownerState.color !== "context" && ownerState.invertedColors && ((_theme$colorInversion = theme.colorInversion[ownerState.variant]) == null ? void 0 : _theme$colorInversion[ownerState.color])];
});
var Menu = React51.forwardRef(function Menu2(inProps, ref) {
  var _props$slots;
  const props = useThemeProps({
    props: inProps,
    name: "JoyMenu"
  });
  const {
    actions,
    anchorEl,
    children,
    color: colorProp = "neutral",
    component,
    disablePortal = false,
    keepMounted = false,
    invertedColors = false,
    id,
    onClose,
    open = false,
    modifiers: modifiersProp,
    variant = "outlined",
    size = "md",
    slots = {},
    slotProps = {}
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded36);
  const {
    getColor
  } = useColorInversion(variant);
  const color = disablePortal ? getColor(inProps.color, colorProp) : colorProp;
  const handleOpenChange = React51.useCallback((isOpen) => {
    if (!isOpen) {
      onClose == null ? void 0 : onClose();
    }
  }, [onClose]);
  const {
    contextValue,
    getListboxProps,
    dispatch
  } = useMenu({
    open,
    onOpenChange: handleOpenChange,
    listboxId: id
  });
  React51.useImperativeHandle(actions, () => ({
    dispatch
  }), [dispatch]);
  const ownerState = _extends({}, props, {
    disablePortal,
    invertedColors,
    color,
    variant,
    size,
    open,
    nesting: false,
    row: false
  });
  const classes = useUtilityClasses32(ownerState);
  const externalForwardedProps = _extends({}, other, {
    component,
    slots,
    slotProps
  });
  const modifiers = React51.useMemo(() => [{
    name: "offset",
    options: {
      offset: [0, 4]
    }
  }, ...modifiersProp || []], [modifiersProp]);
  const rootProps = useSlotProps({
    elementType: MenuRoot,
    getSlotProps: getListboxProps,
    externalForwardedProps,
    externalSlotProps: {},
    ownerState,
    additionalProps: {
      ref,
      anchorEl,
      open,
      disablePortal,
      keepMounted,
      modifiers
    },
    className: classes.root
  });
  let result = (0, import_jsx_runtime49.jsx)(MenuProvider, {
    value: contextValue,
    children: (0, import_jsx_runtime49.jsx)(GroupListContext_default.Provider, {
      value: "menu",
      children: (0, import_jsx_runtime49.jsx)(ListProvider_default, {
        nested: true,
        children
      })
    })
  });
  if (invertedColors) {
    result = (0, import_jsx_runtime49.jsx)(ColorInversionProvider, {
      variant,
      children: result
    });
  }
  result = (0, import_jsx_runtime49.jsx)(MenuRoot, _extends({}, rootProps, !((_props$slots = props.slots) != null && _props$slots.root) && {
    as: Popper_default,
    slots: {
      root: component || "ul"
    }
  }, {
    children: result
  }));
  return disablePortal ? result : (0, import_jsx_runtime49.jsx)(ColorInversion_default.Provider, {
    value: void 0,
    children: result
  });
});
true ? Menu.propTypes = {
  actions: refType_default,
  anchorEl: import_prop_types35.default.oneOfType([HTMLElementType, import_prop_types35.default.func]),
  children: import_prop_types35.default.node,
  color: import_prop_types35.default.oneOf(["danger", "info", "neutral", "primary", "success", "warning"]),
  component: import_prop_types35.default.elementType,
  disablePortal: import_prop_types35.default.bool,
  id: import_prop_types35.default.string,
  invertedColors: import_prop_types35.default.bool,
  keepMounted: import_prop_types35.default.bool,
  modifiers: import_prop_types35.default.arrayOf(import_prop_types35.default.shape({
    data: import_prop_types35.default.object,
    effect: import_prop_types35.default.func,
    enabled: import_prop_types35.default.bool,
    fn: import_prop_types35.default.func,
    name: import_prop_types35.default.any,
    options: import_prop_types35.default.object,
    phase: import_prop_types35.default.oneOf(["afterMain", "afterRead", "afterWrite", "beforeMain", "beforeRead", "beforeWrite", "main", "read", "write"]),
    requires: import_prop_types35.default.arrayOf(import_prop_types35.default.string),
    requiresIfExists: import_prop_types35.default.arrayOf(import_prop_types35.default.string)
  })),
  onClose: import_prop_types35.default.func,
  open: import_prop_types35.default.bool,
  size: import_prop_types35.default.oneOfType([import_prop_types35.default.oneOf(["sm", "md", "lg"]), import_prop_types35.default.string]),
  slotProps: import_prop_types35.default.shape({
    root: import_prop_types35.default.oneOfType([import_prop_types35.default.func, import_prop_types35.default.object])
  }),
  slots: import_prop_types35.default.shape({
    root: import_prop_types35.default.elementType
  }),
  sx: import_prop_types35.default.oneOfType([import_prop_types35.default.arrayOf(import_prop_types35.default.oneOfType([import_prop_types35.default.func, import_prop_types35.default.object, import_prop_types35.default.bool])), import_prop_types35.default.func, import_prop_types35.default.object]),
  variant: import_prop_types35.default.oneOfType([import_prop_types35.default.oneOf(["outlined", "plain", "soft", "solid"]), import_prop_types35.default.string])
} : void 0;
var Menu_default = Menu;

// node_modules/@mui/joy/MenuItem/MenuItem.js
init_extends();
init_objectWithoutPropertiesLoose();
var React52 = __toESM(require_react());
var import_prop_types36 = __toESM(require_prop_types());
init_esm();
init_composeClasses();
init_useMenuItem();

// node_modules/@mui/joy/MenuItem/menuItemClasses.js
function getMenuItemUtilityClass(slot) {
  return generateUtilityClass2("MuiMenuItem", slot);
}
var menuItemClasses = generateUtilityClasses2("MuiMenuItem", ["root", "focusVisible", "disabled", "selected", "colorPrimary", "colorNeutral", "colorDanger", "colorInfo", "colorSuccess", "colorWarning", "colorContext", "variantPlain", "variantSoft", "variantOutlined", "variantSolid"]);
var menuItemClasses_default = menuItemClasses;

// node_modules/@mui/joy/MenuItem/MenuItem.js
var import_jsx_runtime50 = __toESM(require_jsx_runtime());
var _excluded37 = ["children", "disabled", "component", "selected", "color", "orientation", "variant", "slots", "slotProps"];
var useUtilityClasses33 = (ownerState) => {
  const {
    focusVisible,
    disabled,
    selected,
    color,
    variant
  } = ownerState;
  const slots = {
    root: ["root", focusVisible && "focusVisible", disabled && "disabled", selected && "selected", color && `color${capitalize(color)}`, variant && `variant${capitalize(variant)}`]
  };
  const composedClasses = composeClasses(slots, getMenuItemUtilityClass, {});
  return composedClasses;
};
var MenuItemRoot = styled_default(StyledListItemButton, {
  name: "JoyMenuItem",
  slot: "Root",
  overridesResolver: (props, styles) => styles.root
})({});
var MenuItem = React52.forwardRef(function MenuItem2(inProps, ref) {
  const props = useThemeProps({
    props: inProps,
    name: "JoyMenuItem"
  });
  const row = React52.useContext(RowListContext_default);
  const {
    children,
    disabled: disabledProp = false,
    component = "li",
    selected = false,
    color: colorProp = selected ? "primary" : "neutral",
    orientation = "horizontal",
    variant = "plain",
    slots = {},
    slotProps = {}
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded37);
  const {
    getColor
  } = useColorInversion(variant);
  const color = getColor(inProps.color, colorProp);
  const {
    getRootProps,
    disabled,
    focusVisible
  } = useMenuItem({
    disabled: disabledProp,
    rootRef: ref
  });
  const ownerState = _extends({}, props, {
    component,
    color,
    disabled,
    focusVisible,
    orientation,
    selected,
    row,
    variant
  });
  const classes = useUtilityClasses33(ownerState);
  const externalForwardedProps = _extends({}, other, {
    component,
    slots,
    slotProps
  });
  const [SlotRoot, rootProps] = useSlot("root", {
    ref,
    elementType: MenuItemRoot,
    getSlotProps: getRootProps,
    externalForwardedProps,
    className: classes.root,
    ownerState
  });
  return (0, import_jsx_runtime50.jsx)(ListItemButtonOrientationContext_default.Provider, {
    value: orientation,
    children: (0, import_jsx_runtime50.jsx)(SlotRoot, _extends({}, rootProps, {
      children
    }))
  });
});
true ? MenuItem.propTypes = {
  children: import_prop_types36.default.node,
  color: import_prop_types36.default.oneOfType([import_prop_types36.default.oneOf(["danger", "info", "neutral", "primary", "success", "warning"]), import_prop_types36.default.string]),
  component: import_prop_types36.default.elementType,
  disabled: import_prop_types36.default.bool,
  orientation: import_prop_types36.default.oneOf(["horizontal", "vertical"]),
  selected: import_prop_types36.default.bool,
  slotProps: import_prop_types36.default.shape({
    root: import_prop_types36.default.oneOfType([import_prop_types36.default.func, import_prop_types36.default.object])
  }),
  slots: import_prop_types36.default.shape({
    root: import_prop_types36.default.elementType
  }),
  variant: import_prop_types36.default.oneOfType([import_prop_types36.default.oneOf(["contained", "light", "outlined", "text"]), import_prop_types36.default.string])
} : void 0;
var MenuItem_default = MenuItem;

// node_modules/@mui/joy/MenuList/MenuList.js
init_objectWithoutPropertiesLoose();
init_extends();
var React53 = __toESM(require_react());
var import_prop_types37 = __toESM(require_prop_types());
init_esm();
init_composeClasses();
init_useMenu();

// node_modules/@mui/joy/MenuList/menuListClasses.js
function getMenuListUtilityClass(slot) {
  return generateUtilityClass2("MuiMenuList", slot);
}
var menuClasses2 = generateUtilityClasses2("MuiMenuList", ["root", "nested", "sizeSm", "sizeMd", "sizeLg", "colorPrimary", "colorNeutral", "colorDanger", "colorInfo", "colorSuccess", "colorWarning", "colorContext", "variantPlain", "variantOutlined", "variantSoft", "variantSolid"]);
var menuListClasses_default = menuClasses2;

// node_modules/@mui/joy/MenuList/MenuList.js
var import_jsx_runtime51 = __toESM(require_jsx_runtime());
var _excluded38 = ["actions", "id", "component", "children", "size", "variant", "color", "slots", "slotProps"];
var useUtilityClasses34 = (ownerState) => {
  const {
    variant,
    color,
    size
  } = ownerState;
  const slots = {
    root: ["root", variant && `variant${capitalize(variant)}`, color && `color${capitalize(color)}`, size && `size${capitalize(size)}`]
  };
  return composeClasses(slots, getMenuListUtilityClass, {});
};
var MenuListRoot = styled_default(StyledList, {
  name: "JoyMenuList",
  slot: "Root",
  overridesResolver: (props, styles) => styles.root
})(({
  theme,
  ownerState
}) => {
  var _theme$variants;
  const variantStyle = (_theme$variants = theme.variants[ownerState.variant]) == null ? void 0 : _theme$variants[ownerState.color];
  return _extends({
    "--focus-outline-offset": `calc(${theme.vars.focus.thickness} * -1)`,
    "--List-radius": theme.vars.radius.sm,
    "--ListItem-stickyBackground": (variantStyle == null ? void 0 : variantStyle.backgroundColor) || (variantStyle == null ? void 0 : variantStyle.background) || theme.vars.palette.background.surface,
    "--ListItem-stickyTop": "calc(var(--List-padding, var(--ListDivider-gap)) * -1)"
  }, scopedVariables, {
    overflow: "auto"
  }, !(variantStyle != null && variantStyle.backgroundColor) && {
    backgroundColor: theme.vars.palette.background.surface
  });
});
var MenuList = React53.forwardRef(function MenuList2(inProps, ref) {
  const props = useThemeProps({
    props: inProps,
    name: "JoyMenuList"
  });
  const {
    actions,
    id: idProp,
    component,
    children,
    size = "md",
    variant = "outlined",
    color: colorProp = "neutral",
    slots = {},
    slotProps = {}
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded38);
  const {
    getColor
  } = useColorInversion(variant);
  const color = getColor(inProps.color, colorProp);
  const {
    contextValue,
    getListboxProps,
    dispatch
  } = useMenu({
    listboxRef: ref,
    listboxId: idProp
  });
  React53.useImperativeHandle(actions, () => ({
    dispatch
  }), [dispatch]);
  const ownerState = _extends({}, props, {
    variant,
    color,
    size,
    nesting: false,
    row: false
  });
  const classes = useUtilityClasses34(ownerState);
  const externalForwardedProps = _extends({}, other, {
    component,
    slots,
    slotProps
  });
  const [SlotRoot, rootProps] = useSlot("root", {
    ref,
    elementType: MenuListRoot,
    getSlotProps: getListboxProps,
    externalForwardedProps,
    ownerState,
    className: classes.root
  });
  const menuContextValue = React53.useMemo(() => _extends({}, contextValue, {
    getListboxProps,
    open: true
  }), [contextValue, getListboxProps]);
  return (0, import_jsx_runtime51.jsx)(SlotRoot, _extends({}, rootProps, {
    children: (0, import_jsx_runtime51.jsx)(MenuProvider, {
      value: menuContextValue,
      children: (0, import_jsx_runtime51.jsx)(GroupListContext_default.Provider, {
        value: "menu",
        children: (0, import_jsx_runtime51.jsx)(ListProvider_default, {
          nested: true,
          children
        })
      })
    })
  }));
});
true ? MenuList.propTypes = {
  actions: import_prop_types37.default.oneOfType([import_prop_types37.default.func, import_prop_types37.default.shape({
    current: import_prop_types37.default.shape({
      dispatch: import_prop_types37.default.func.isRequired
    })
  })]),
  children: import_prop_types37.default.node,
  color: import_prop_types37.default.oneOfType([import_prop_types37.default.oneOf(["danger", "info", "neutral", "primary", "success", "warning"]), import_prop_types37.default.string]),
  component: import_prop_types37.default.elementType,
  id: import_prop_types37.default.string,
  size: import_prop_types37.default.oneOfType([import_prop_types37.default.oneOf(["sm", "md", "lg"]), import_prop_types37.default.string]),
  slotProps: import_prop_types37.default.shape({
    root: import_prop_types37.default.oneOfType([import_prop_types37.default.func, import_prop_types37.default.object])
  }),
  slots: import_prop_types37.default.shape({
    root: import_prop_types37.default.elementType
  }),
  sx: import_prop_types37.default.oneOfType([import_prop_types37.default.arrayOf(import_prop_types37.default.oneOfType([import_prop_types37.default.func, import_prop_types37.default.object, import_prop_types37.default.bool])), import_prop_types37.default.func, import_prop_types37.default.object]),
  variant: import_prop_types37.default.oneOfType([import_prop_types37.default.oneOf(["outlined", "plain", "soft", "solid"]), import_prop_types37.default.string])
} : void 0;
var MenuList_default = MenuList;

// node_modules/@mui/joy/ModalClose/ModalClose.js
init_objectWithoutPropertiesLoose();
init_extends();
var React56 = __toESM(require_react());
var import_prop_types38 = __toESM(require_prop_types());
init_base();
init_esm();
init_useButton();

// node_modules/@mui/joy/ModalClose/modalCloseClasses.js
function getModalCloseUtilityClass(slot) {
  return generateUtilityClass2("MuiModalClose", slot);
}
var modalCloseClasses = generateUtilityClasses2("MuiModalClose", ["root", "colorPrimary", "colorNeutral", "colorDanger", "colorInfo", "colorSuccess", "colorWarning", "colorContext", "variantPlain", "variantOutlined", "variantSoft", "variantSolid", "sizeSm", "sizeMd", "sizeLg"]);
var modalCloseClasses_default = modalCloseClasses;

// node_modules/@mui/joy/ModalDialog/ModalDialogSizeContext.js
var React54 = __toESM(require_react());
var ModalDialogSizeContext = React54.createContext(void 0);
var ModalDialogSizeContext_default = ModalDialogSizeContext;

// node_modules/@mui/joy/ModalDialog/ModalDialogVariantColorContext.js
var React55 = __toESM(require_react());
var ModalDialogVariantColorContext = React55.createContext(void 0);
var ModalDialogVariantColorContext_default = ModalDialogVariantColorContext;

// node_modules/@mui/joy/ModalClose/ModalClose.js
var import_jsx_runtime52 = __toESM(require_jsx_runtime());
var _CloseIcon;
var _excluded39 = ["component", "color", "variant", "size", "onClick", "slots", "slotProps"];
var useUtilityClasses35 = (ownerState) => {
  const {
    variant,
    color,
    disabled,
    focusVisible,
    size
  } = ownerState;
  const slots = {
    root: ["root", disabled && "disabled", focusVisible && "focusVisible", variant && `variant${capitalize(variant)}`, color && `color${capitalize(color)}`, size && `size${capitalize(size)}`]
  };
  return composeClasses(slots, getModalCloseUtilityClass, {});
};
var ModalCloseRoot = styled_default(StyledIconButton, {
  name: "JoyModalClose",
  slot: "Root",
  overridesResolver: (props, styles) => styles.root
})(({
  ownerState,
  theme
}) => {
  var _theme$variants, _theme$variants2;
  return _extends({}, ownerState.size === "sm" && {
    "--IconButton-size": "28px"
  }, ownerState.size === "md" && {
    "--IconButton-size": "36px"
  }, ownerState.size === "lg" && {
    "--IconButton-size": "40px"
  }, {
    position: "absolute",
    top: `var(--ModalClose-inset, ${theme.spacing(1)})`,
    right: `var(--ModalClose-inset, ${theme.spacing(1)})`,
    borderRadius: `var(--ModalClose-radius, ${theme.vars.radius.sm})`
  }, !((_theme$variants = theme.variants[ownerState.variant]) != null && (_theme$variants2 = _theme$variants[ownerState.color]) != null && _theme$variants2.backgroundColor) && {
    color: theme.vars.palette.text.secondary
  });
});
var modalDialogVariantMapping = {
  plain: "plain",
  outlined: "plain",
  soft: "soft",
  solid: "solid"
};
var ModalClose = React56.forwardRef(function ModalClose2(inProps, ref) {
  var _ref, _inProps$variant, _modalDialogVariantCo, _ref2, _inProps$size;
  const props = useThemeProps({
    props: inProps,
    name: "JoyModalClose"
  });
  const {
    component = "button",
    color: colorProp = "neutral",
    variant: variantProp = "plain",
    size: sizeProp = "md",
    onClick,
    slots = {},
    slotProps = {}
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded39);
  const closeModalContext = React56.useContext(CloseModalContext_default);
  const modalDialogVariantColor = React56.useContext(ModalDialogVariantColorContext_default);
  const variant = (_ref = (_inProps$variant = inProps.variant) != null ? _inProps$variant : modalDialogVariantMapping[modalDialogVariantColor == null ? void 0 : modalDialogVariantColor.variant]) != null ? _ref : variantProp;
  const {
    getColor
  } = useColorInversion(variant);
  const color = getColor(inProps.color, (_modalDialogVariantCo = modalDialogVariantColor == null ? void 0 : modalDialogVariantColor.color) != null ? _modalDialogVariantCo : colorProp);
  const modalDialogSize = React56.useContext(ModalDialogSizeContext_default);
  const size = (_ref2 = (_inProps$size = inProps.size) != null ? _inProps$size : modalDialogSize) != null ? _ref2 : sizeProp;
  const {
    focusVisible,
    getRootProps
  } = useButton(_extends({}, props, {
    rootRef: ref
  }));
  const ownerState = _extends({}, props, {
    color,
    component,
    variant,
    size,
    focusVisible
  });
  const classes = useUtilityClasses35(ownerState);
  const [SlotRoot, rootProps] = useSlot("root", {
    ref,
    elementType: ModalCloseRoot,
    getSlotProps: getRootProps,
    externalForwardedProps: _extends({
      onClick: (event) => {
        closeModalContext == null ? void 0 : closeModalContext(event, "closeClick");
        onClick == null ? void 0 : onClick(event);
      }
    }, other, {
      component,
      slots,
      slotProps
    }),
    className: classes.root,
    ownerState
  });
  return (0, import_jsx_runtime52.jsx)(SlotRoot, _extends({}, rootProps, {
    children: _CloseIcon || (_CloseIcon = (0, import_jsx_runtime52.jsx)(Close_default, {}))
  }));
});
true ? ModalClose.propTypes = {
  children: import_prop_types38.default.node,
  color: import_prop_types38.default.oneOfType([import_prop_types38.default.oneOf(["danger", "info", "neutral", "primary", "success", "warning"]), import_prop_types38.default.string]),
  component: import_prop_types38.default.elementType,
  onClick: import_prop_types38.default.func,
  size: import_prop_types38.default.oneOfType([import_prop_types38.default.oneOf(["sm", "md", "lg"]), import_prop_types38.default.string]),
  slotProps: import_prop_types38.default.shape({
    root: import_prop_types38.default.oneOfType([import_prop_types38.default.func, import_prop_types38.default.object])
  }),
  slots: import_prop_types38.default.shape({
    root: import_prop_types38.default.elementType
  }),
  sx: import_prop_types38.default.oneOfType([import_prop_types38.default.arrayOf(import_prop_types38.default.oneOfType([import_prop_types38.default.func, import_prop_types38.default.object, import_prop_types38.default.bool])), import_prop_types38.default.func, import_prop_types38.default.object]),
  variant: import_prop_types38.default.oneOfType([import_prop_types38.default.oneOf(["outlined", "plain", "soft", "solid"]), import_prop_types38.default.string])
} : void 0;
var ModalClose_default = ModalClose;

// node_modules/@mui/joy/ModalDialog/ModalDialog.js
init_objectWithoutPropertiesLoose();
init_extends();
var React58 = __toESM(require_react());
var import_prop_types40 = __toESM(require_prop_types());
init_clsx_m();
init_base();
init_esm();

// node_modules/@mui/joy/Sheet/Sheet.js
init_objectWithoutPropertiesLoose();
init_extends();
var React57 = __toESM(require_react());
var import_prop_types39 = __toESM(require_prop_types());
init_clsx_m();
init_base();
init_esm();
init_esm2();

// node_modules/@mui/joy/Sheet/sheetClasses.js
function getSheetUtilityClass(slot) {
  return generateUtilityClass2("MuiSheet", slot);
}
var sheetClasses = generateUtilityClasses2("MuiSheet", ["root", "colorPrimary", "colorNeutral", "colorDanger", "colorInfo", "colorSuccess", "colorWarning", "colorContext", "variantPlain", "variantOutlined", "variantSoft", "variantSolid"]);
var sheetClasses_default = sheetClasses;

// node_modules/@mui/joy/Sheet/Sheet.js
var import_jsx_runtime53 = __toESM(require_jsx_runtime());
var _excluded40 = ["className", "color", "component", "variant", "invertedColors", "slots", "slotProps"];
var useUtilityClasses36 = (ownerState) => {
  const {
    variant,
    color
  } = ownerState;
  const slots = {
    root: ["root", variant && `variant${capitalize(variant)}`, color && `color${capitalize(color)}`]
  };
  return composeClasses(slots, getSheetUtilityClass, {});
};
var SheetRoot = styled_default("div", {
  name: "JoySheet",
  slot: "Root",
  overridesResolver: (props, styles) => styles.root
})(({
  theme,
  ownerState
}) => {
  var _theme$variants, _theme$colorInversion;
  const variantStyle = (_theme$variants = theme.variants[ownerState.variant]) == null ? void 0 : _theme$variants[ownerState.color];
  const childRadius = resolveSxValue({
    theme,
    ownerState
  }, "borderRadius");
  const bgcolor = resolveSxValue({
    theme,
    ownerState
  }, "bgcolor");
  const backgroundColor = resolveSxValue({
    theme,
    ownerState
  }, "backgroundColor");
  const background = resolveSxValue({
    theme,
    ownerState
  }, "background");
  const resolvedBg = getPath(theme, `palette.${bgcolor}`) || bgcolor || getPath(theme, `palette.${backgroundColor}`) || backgroundColor || background || (variantStyle == null ? void 0 : variantStyle.backgroundColor) || (variantStyle == null ? void 0 : variantStyle.background) || theme.vars.palette.background.surface;
  return [_extends({
    "--ListItem-stickyBackground": resolvedBg,
    "--Sheet-background": resolvedBg
  }, childRadius !== void 0 && {
    "--List-radius": `calc(${childRadius} - var(--variant-borderWidth, 0px))`,
    "--unstable_actionRadius": `calc(${childRadius} - var(--variant-borderWidth, 0px))`
  }, {
    backgroundColor: theme.vars.palette.background.surface,
    position: "relative"
  }), variantStyle, ownerState.color !== "context" && ownerState.invertedColors && ((_theme$colorInversion = theme.colorInversion[ownerState.variant]) == null ? void 0 : _theme$colorInversion[ownerState.color])];
});
var Sheet = React57.forwardRef(function Sheet2(inProps, ref) {
  const props = useThemeProps({
    props: inProps,
    name: "JoySheet"
  });
  const {
    className,
    color: colorProp = "neutral",
    component = "div",
    variant = "plain",
    invertedColors = false,
    slots = {},
    slotProps = {}
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded40);
  const {
    getColor
  } = useColorInversion(variant);
  const color = getColor(inProps.color, colorProp);
  const ownerState = _extends({}, props, {
    color,
    component,
    invertedColors,
    variant
  });
  const classes = useUtilityClasses36(ownerState);
  const externalForwardedProps = _extends({}, other, {
    component,
    slots,
    slotProps
  });
  const [SlotRoot, rootProps] = useSlot("root", {
    ref,
    className: clsx_m_default(classes.root, className),
    elementType: SheetRoot,
    externalForwardedProps,
    ownerState
  });
  const result = (0, import_jsx_runtime53.jsx)(SlotRoot, _extends({}, rootProps));
  if (invertedColors) {
    return (0, import_jsx_runtime53.jsx)(ColorInversionProvider, {
      variant,
      children: result
    });
  }
  return result;
});
true ? Sheet.propTypes = {
  children: import_prop_types39.default.node,
  className: import_prop_types39.default.string,
  color: import_prop_types39.default.oneOfType([import_prop_types39.default.oneOf(["danger", "info", "neutral", "primary", "success", "warning"]), import_prop_types39.default.string]),
  component: import_prop_types39.default.elementType,
  invertedColors: import_prop_types39.default.bool,
  slotProps: import_prop_types39.default.shape({
    root: import_prop_types39.default.oneOfType([import_prop_types39.default.func, import_prop_types39.default.object])
  }),
  slots: import_prop_types39.default.shape({
    root: import_prop_types39.default.elementType
  }),
  sx: import_prop_types39.default.oneOfType([import_prop_types39.default.arrayOf(import_prop_types39.default.oneOfType([import_prop_types39.default.func, import_prop_types39.default.object, import_prop_types39.default.bool])), import_prop_types39.default.func, import_prop_types39.default.object]),
  variant: import_prop_types39.default.oneOfType([import_prop_types39.default.oneOf(["outlined", "plain", "soft", "solid"]), import_prop_types39.default.string])
} : void 0;
var Sheet_default = Sheet;

// node_modules/@mui/joy/ModalDialog/modalDialogClasses.js
function getModalDialogUtilityClass(slot) {
  return generateUtilityClass2("MuiModalDialog", slot);
}
var modalDialogClasses = generateUtilityClasses2("MuiModalDialog", ["root", "colorPrimary", "colorNeutral", "colorDanger", "colorInfo", "colorSuccess", "colorWarning", "colorContext", "variantPlain", "variantOutlined", "variantSoft", "variantSolid", "sizeSm", "sizeMd", "sizeLg", "layoutCenter", "layoutFullscreen"]);
var modalDialogClasses_default = modalDialogClasses;

// node_modules/@mui/joy/ModalDialog/ModalDialog.js
var import_jsx_runtime54 = __toESM(require_jsx_runtime());
var _excluded41 = ["className", "children", "color", "component", "variant", "size", "layout", "slots", "slotProps"];
var useUtilityClasses37 = (ownerState) => {
  const {
    variant,
    color,
    size,
    layout
  } = ownerState;
  const slots = {
    root: ["root", variant && `variant${capitalize(variant)}`, color && `color${capitalize(color)}`, size && `size${capitalize(size)}`, layout && `layout${capitalize(layout)}`]
  };
  return composeClasses(slots, getModalDialogUtilityClass, {});
};
var ModalDialogRoot = styled_default(SheetRoot, {
  name: "JoyModalDialog",
  slot: "Root",
  overridesResolver: (props, styles) => styles.root
})(({
  theme,
  ownerState
}) => _extends({
  "--Divider-inset": "calc(-1 * var(--ModalDialog-padding))",
  "--ModalClose-radius": "max((var(--ModalDialog-radius) - var(--variant-borderWidth, 0px)) - var(--ModalClose-inset), min(var(--ModalClose-inset) / 2, (var(--ModalDialog-radius) - var(--variant-borderWidth, 0px)) / 2))"
}, ownerState.size === "sm" && {
  "--ModalDialog-padding": theme.spacing(2),
  "--ModalDialog-radius": theme.vars.radius.sm,
  "--ModalDialog-gap": theme.spacing(0.75),
  "--ModalDialog-titleOffset": theme.spacing(0.25),
  "--ModalDialog-descriptionOffset": theme.spacing(0.25),
  "--ModalClose-inset": theme.spacing(1.25),
  fontSize: theme.vars.fontSize.sm
}, ownerState.size === "md" && {
  "--ModalDialog-padding": theme.spacing(2.5),
  "--ModalDialog-radius": theme.vars.radius.md,
  "--ModalDialog-gap": theme.spacing(1.5),
  "--ModalDialog-titleOffset": theme.spacing(0.25),
  "--ModalDialog-descriptionOffset": theme.spacing(0.75),
  "--ModalClose-inset": theme.spacing(1.5),
  fontSize: theme.vars.fontSize.md
}, ownerState.size === "lg" && {
  "--ModalDialog-padding": theme.spacing(3),
  "--ModalDialog-radius": theme.vars.radius.md,
  "--ModalDialog-gap": theme.spacing(2),
  "--ModalDialog-titleOffset": theme.spacing(0.75),
  "--ModalDialog-descriptionOffset": theme.spacing(1),
  "--ModalClose-inset": theme.spacing(1.5),
  fontSize: theme.vars.fontSize.lg
}, {
  boxSizing: "border-box",
  boxShadow: theme.shadow.md,
  borderRadius: "var(--ModalDialog-radius)",
  fontFamily: theme.vars.fontFamily.body,
  lineHeight: theme.vars.lineHeight.md,
  padding: "var(--ModalDialog-padding)",
  minWidth: "min(calc(100vw - 2 * var(--ModalDialog-padding)), var(--ModalDialog-minWidth, 300px))",
  outline: 0,
  position: "absolute",
  display: "flex",
  flexDirection: "column"
}, ownerState.layout === "fullscreen" && {
  top: 0,
  left: 0,
  right: 0,
  bottom: 0,
  border: 0,
  borderRadius: 0
}, ownerState.layout === "center" && {
  top: "50%",
  left: "50%",
  transform: "translate(-50%, -50%)",
  maxWidth: "calc(100vw - 2 * var(--ModalDialog-padding))",
  maxHeight: "calc(100% - 2 * var(--ModalDialog-padding))"
}, {
  [`& [id="${ownerState["aria-labelledby"]}"]`]: {
    "--Typography-margin": "calc(-1 * var(--ModalDialog-titleOffset)) 0 var(--ModalDialog-gap) 0",
    "--Typography-fontSize": "1.125em",
    [`& + [id="${ownerState["aria-describedby"]}"]`]: {
      "--unstable_ModalDialog-descriptionOffset": "calc(-1 * var(--ModalDialog-descriptionOffset))"
    }
  },
  [`& [id="${ownerState["aria-describedby"]}"]`]: {
    "--Typography-fontSize": "1em",
    "--Typography-margin": "var(--unstable_ModalDialog-descriptionOffset, var(--ModalDialog-gap)) 0 0 0",
    "&:not(:last-child)": {
      "--Typography-margin": "var(--unstable_ModalDialog-descriptionOffset, var(--ModalDialog-gap)) 0 var(--ModalDialog-gap) 0"
    }
  }
}));
var ModalDialog = React58.forwardRef(function ModalDialog2(inProps, ref) {
  const props = useThemeProps({
    props: inProps,
    name: "JoyModalDialog"
  });
  const {
    className,
    children,
    color: colorProp = "neutral",
    component = "div",
    variant = "outlined",
    size = "md",
    layout = "center",
    slots = {},
    slotProps = {}
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded41);
  const {
    getColor
  } = useColorInversion(variant);
  const color = getColor(inProps.color, colorProp);
  const ownerState = _extends({}, props, {
    color,
    component,
    layout,
    size,
    variant
  });
  const classes = useUtilityClasses37(ownerState);
  const externalForwardedProps = _extends({}, other, {
    component,
    slots,
    slotProps
  });
  const contextValue = React58.useMemo(() => ({
    variant,
    color: color === "context" ? void 0 : color
  }), [color, variant]);
  const [SlotRoot, rootProps] = useSlot("root", {
    ref,
    className: clsx_m_default(classes.root, className),
    elementType: ModalDialogRoot,
    externalForwardedProps,
    ownerState,
    additionalProps: {
      as: component,
      role: "dialog",
      "aria-modal": "true"
    }
  });
  return (0, import_jsx_runtime54.jsx)(ModalDialogSizeContext_default.Provider, {
    value: size,
    children: (0, import_jsx_runtime54.jsx)(ModalDialogVariantColorContext_default.Provider, {
      value: contextValue,
      children: (0, import_jsx_runtime54.jsx)(SlotRoot, _extends({}, rootProps, {
        children: React58.Children.map(children, (child) => {
          if (!React58.isValidElement(child)) {
            return child;
          }
          if (isMuiElement(child, ["Divider"])) {
            const extraProps = {};
            extraProps.inset = "inset" in child.props ? child.props.inset : "context";
            return React58.cloneElement(child, extraProps);
          }
          return child;
        })
      }))
    })
  });
});
true ? ModalDialog.propTypes = {
  children: import_prop_types40.default.node,
  className: import_prop_types40.default.string,
  color: import_prop_types40.default.oneOfType([import_prop_types40.default.oneOf(["danger", "info", "neutral", "primary", "success", "warning"]), import_prop_types40.default.string]),
  component: import_prop_types40.default.elementType,
  layout: import_prop_types40.default.oneOfType([import_prop_types40.default.oneOf(["center", "fullscreen"]), import_prop_types40.default.string]),
  size: import_prop_types40.default.oneOfType([import_prop_types40.default.oneOf(["sm", "md", "lg"]), import_prop_types40.default.string]),
  slotProps: import_prop_types40.default.shape({
    root: import_prop_types40.default.oneOfType([import_prop_types40.default.func, import_prop_types40.default.object])
  }),
  slots: import_prop_types40.default.shape({
    root: import_prop_types40.default.elementType
  }),
  sx: import_prop_types40.default.oneOfType([import_prop_types40.default.arrayOf(import_prop_types40.default.oneOfType([import_prop_types40.default.func, import_prop_types40.default.object, import_prop_types40.default.bool])), import_prop_types40.default.func, import_prop_types40.default.object]),
  variant: import_prop_types40.default.oneOfType([import_prop_types40.default.oneOf(["outlined", "plain", "soft", "solid"]), import_prop_types40.default.string])
} : void 0;
var ModalDialog_default = ModalDialog;

// node_modules/@mui/joy/ModalOverflow/ModalOverflow.js
init_extends();
init_objectWithoutPropertiesLoose();
var React59 = __toESM(require_react());
var import_prop_types41 = __toESM(require_prop_types());
init_base();

// node_modules/@mui/joy/ModalOverflow/modalOverflowClasses.js
function getModalOverflowUtilityClass(slot) {
  return generateUtilityClass2("MuiModalOverflow", slot);
}
var modalOverflowClasses = generateUtilityClasses2("MuiModalOverflow", ["root"]);
var modalOverflowClasses_default = modalOverflowClasses;

// node_modules/@mui/joy/ModalOverflow/ModalOverflow.js
var import_jsx_runtime55 = __toESM(require_jsx_runtime());
var _excluded43 = ["children", "onClick"];
var useUtilityClasses38 = () => {
  const slots = {
    root: ["root"]
  };
  return composeClasses(slots, getModalOverflowUtilityClass, {});
};
var ModalOverflowRoot = styled_default("div", {
  name: "JoyModalOverflow",
  slot: "Root",
  overridesResolver: (props, styles) => styles.root
})({
  "--ModalOverflow-paddingY": "1.5rem",
  position: "absolute",
  top: 0,
  right: 0,
  bottom: 0,
  left: 0,
  height: "100%",
  overflow: "hidden auto",
  outline: "none",
  display: "flex",
  flexDirection: "column",
  padding: "var(--ModalOverflow-paddingY) 0",
  [`& .${modalDialogClasses_default.layoutCenter}`]: {
    position: "relative",
    margin: "auto",
    height: "max-content",
    maxHeight: "unset",
    transform: "none",
    top: "unset",
    left: "unset"
  },
  [`& .${modalDialogClasses_default.layoutFullscreen}`]: {
    position: "relative",
    width: "100%",
    margin: "calc(-1 * var(--ModalOverflow-paddingY)) 0",
    flex: 1
  }
});
var ModalOverflow = React59.forwardRef(function ModalOverflow2(inProps, ref) {
  const props = useThemeProps({
    props: inProps,
    name: "JoyModalOverflow"
  });
  const {
    children,
    onClick
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded43);
  const onClose = React59.useContext(CloseModalContext_default);
  const ownerState = props;
  const classes = useUtilityClasses38();
  const [SlotRoot, rootProps] = useSlot("root", {
    ref,
    className: classes.root,
    elementType: ModalOverflowRoot,
    externalForwardedProps: other,
    ownerState,
    additionalProps: {
      role: "presentation",
      tabIndex: -1,
      onClick: (event) => {
        if (event.target === event.currentTarget) {
          onClose == null ? void 0 : onClose(event, "backdropClick");
        }
        onClick == null ? void 0 : onClick(event);
      }
    }
  });
  return (0, import_jsx_runtime55.jsx)(SlotRoot, _extends({}, rootProps, {
    children
  }));
});
true ? ModalOverflow.propTypes = {
  children: import_prop_types41.default.node,
  onClick: import_prop_types41.default.func,
  sx: import_prop_types41.default.oneOfType([import_prop_types41.default.arrayOf(import_prop_types41.default.oneOfType([import_prop_types41.default.func, import_prop_types41.default.object, import_prop_types41.default.bool])), import_prop_types41.default.func, import_prop_types41.default.object])
} : void 0;
var ModalOverflow_default = ModalOverflow;

// node_modules/@mui/joy/Option/Option.js
init_extends();
init_objectWithoutPropertiesLoose();
var React60 = __toESM(require_react());
var import_prop_types42 = __toESM(require_prop_types());
init_composeClasses();
init_useOption();
init_esm();

// node_modules/@mui/joy/Option/optionClasses.js
function getOptionUtilityClass(slot) {
  return generateUtilityClass2("MuiOption", slot);
}
var optionClasses = generateUtilityClasses2("MuiOption", ["root", "colorPrimary", "colorNeutral", "colorDanger", "colorInfo", "colorSuccess", "colorWarning", "colorContext", "focusVisible", "disabled", "selected", "highlighted", "variantPlain", "variantSoft", "variantOutlined", "variantSolid"]);
var optionClasses_default = optionClasses;

// node_modules/@mui/joy/Option/Option.js
var import_jsx_runtime56 = __toESM(require_jsx_runtime());
var _excluded44 = ["component", "children", "disabled", "value", "label", "variant", "color", "slots", "slotProps"];
var useUtilityClasses39 = (ownerState) => {
  const {
    disabled,
    highlighted,
    selected
  } = ownerState;
  const slots = {
    root: ["root", disabled && "disabled", highlighted && "highlighted", selected && "selected"]
  };
  return composeClasses(slots, getOptionUtilityClass, {});
};
var OptionRoot = styled_default(StyledListItemButton, {
  name: "JoyOption",
  slot: "Root",
  overridesResolver: (props, styles) => styles.root
})(({
  theme,
  ownerState
}) => {
  var _theme$variants;
  const variantStyle = (_theme$variants = theme.variants[`${ownerState.variant}Hover`]) == null ? void 0 : _theme$variants[ownerState.color];
  return {
    [`&.${optionClasses_default.highlighted}`]: {
      backgroundColor: variantStyle == null ? void 0 : variantStyle.backgroundColor
    }
  };
});
var Option = React60.forwardRef(function Option2(inProps, ref) {
  var _optionRef$current;
  const props = useThemeProps({
    props: inProps,
    name: "JoyOption"
  });
  const {
    component = "li",
    children,
    disabled = false,
    value,
    label,
    variant = "plain",
    color: colorProp = "neutral",
    slots = {},
    slotProps = {}
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded44);
  const row = React60.useContext(RowListContext_default);
  const optionRef = React60.useRef(null);
  const combinedRef = useForkRef(optionRef, ref);
  const computedLabel = label != null ? label : typeof children === "string" ? children : (_optionRef$current = optionRef.current) == null ? void 0 : _optionRef$current.innerText;
  const {
    getRootProps,
    selected,
    highlighted,
    index
  } = useOption({
    disabled,
    label: computedLabel,
    value,
    rootRef: combinedRef
  });
  const {
    getColor
  } = useColorInversion(variant);
  const color = getColor(inProps.color, selected ? "primary" : colorProp);
  const ownerState = _extends({}, props, {
    disabled,
    selected,
    highlighted,
    index,
    component,
    variant,
    color,
    row
  });
  const classes = useUtilityClasses39(ownerState);
  const externalForwardedProps = _extends({}, other, {
    component,
    slots,
    slotProps
  });
  const [SlotRoot, rootProps] = useSlot("root", {
    ref,
    getSlotProps: getRootProps,
    elementType: OptionRoot,
    externalForwardedProps,
    className: classes.root,
    ownerState
  });
  return (0, import_jsx_runtime56.jsx)(SlotRoot, _extends({}, rootProps, {
    children
  }));
});
true ? Option.propTypes = {
  children: import_prop_types42.default.node,
  color: import_prop_types42.default.oneOfType([import_prop_types42.default.oneOf(["danger", "info", "neutral", "primary", "success", "warning"]), import_prop_types42.default.string]),
  component: import_prop_types42.default.elementType,
  disabled: import_prop_types42.default.bool,
  label: import_prop_types42.default.oneOfType([import_prop_types42.default.element, import_prop_types42.default.string]),
  slotProps: import_prop_types42.default.shape({
    root: import_prop_types42.default.oneOfType([import_prop_types42.default.func, import_prop_types42.default.object])
  }),
  slots: import_prop_types42.default.shape({
    root: import_prop_types42.default.elementType
  }),
  sx: import_prop_types42.default.oneOfType([import_prop_types42.default.arrayOf(import_prop_types42.default.oneOfType([import_prop_types42.default.func, import_prop_types42.default.object, import_prop_types42.default.bool])), import_prop_types42.default.func, import_prop_types42.default.object]),
  value: import_prop_types42.default.any.isRequired,
  variant: import_prop_types42.default.oneOfType([import_prop_types42.default.oneOf(["outlined", "plain", "soft", "solid"]), import_prop_types42.default.string])
} : void 0;
var Option_default = Option;

// node_modules/@mui/joy/Radio/Radio.js
init_objectWithoutPropertiesLoose();
init_extends();
var React61 = __toESM(require_react());
var import_prop_types43 = __toESM(require_prop_types());
init_esm();
init_base();
init_useSwitch();

// node_modules/@mui/joy/Radio/radioClasses.js
function getRadioUtilityClass(slot) {
  return generateUtilityClass2("MuiRadio", slot);
}
var radioClasses = generateUtilityClasses2("MuiRadio", ["root", "radio", "icon", "action", "input", "label", "checked", "disabled", "focusVisible", "colorPrimary", "colorDanger", "colorInfo", "colorNeutral", "colorSuccess", "colorWarning", "colorContext", "sizeSm", "sizeMd", "sizeLg", "variantOutlined", "variantSoft", "variantSolid"]);
var radioClasses_default = radioClasses;

// node_modules/@mui/joy/Radio/Radio.js
var import_jsx_runtime57 = __toESM(require_jsx_runtime());
var import_jsx_runtime58 = __toESM(require_jsx_runtime());
var _excluded45 = ["checked", "checkedIcon", "defaultChecked", "disabled", "disableIcon", "overlay", "label", "id", "name", "onBlur", "onChange", "onFocus", "onFocusVisible", "readOnly", "required", "color", "variant", "size", "uncheckedIcon", "value", "component", "slots", "slotProps"];
var useUtilityClasses40 = (ownerState) => {
  const {
    checked,
    disabled,
    disableIcon,
    focusVisible,
    color,
    variant,
    size
  } = ownerState;
  const slots = {
    root: ["root", checked && "checked", disabled && "disabled", focusVisible && "focusVisible", variant && `variant${capitalize(variant)}`, color && `color${capitalize(color)}`, size && `size${capitalize(size)}`],
    radio: ["radio", checked && "checked", disabled && "disabled"],
    icon: ["icon"],
    action: [
      "action",
      checked && "checked",
      disableIcon && disabled && "disabled",
      focusVisible && "focusVisible"
    ],
    input: ["input"],
    label: ["label"]
  };
  return composeClasses(slots, getRadioUtilityClass, {});
};
function areEqualValues(a, b) {
  if (typeof b === "object" && b !== null) {
    return a === b;
  }
  return String(a) === String(b);
}
var RadioRoot = styled_default("span", {
  name: "JoyRadio",
  slot: "Root",
  overridesResolver: (props, styles) => styles.root
})(({
  ownerState,
  theme
}) => {
  var _theme$variants$plain, _theme$variants$plain2, _theme$variants, _theme$variants2, _theme$variants3, _theme$variants4;
  return [_extends({
    "--Icon-fontSize": "var(--Radio-size)"
  }, ownerState.size === "sm" && {
    "--Radio-size": "1rem",
    "--Radio-gap": "0.375rem",
    "& ~ *": {
      "--FormHelperText-margin": "0.375rem 0 0 1.375rem"
    },
    fontSize: theme.vars.fontSize.sm
  }, ownerState.size === "md" && {
    "--Radio-size": "1.25rem",
    "--Radio-gap": "0.5rem",
    "& ~ *": {
      "--FormHelperText-margin": "0.375rem 0 0 1.75rem"
    },
    fontSize: theme.vars.fontSize.md
  }, ownerState.size === "lg" && {
    "--Radio-size": "1.5rem",
    "--Radio-gap": "0.625rem",
    "& ~ *": {
      "--FormHelperText-margin": "0.375rem 0 0 2.125rem"
    },
    fontSize: theme.vars.fontSize.lg
  }, {
    position: ownerState.overlay ? "initial" : "relative",
    display: "inline-flex",
    boxSizing: "border-box",
    minWidth: 0,
    fontFamily: theme.vars.fontFamily.body,
    lineHeight: "var(--Radio-size)",
    color: theme.vars.palette.text.primary,
    [`&.${radioClasses_default.disabled}`]: {
      color: (_theme$variants$plain = theme.variants.plainDisabled) == null ? void 0 : (_theme$variants$plain2 = _theme$variants$plain[ownerState.color]) == null ? void 0 : _theme$variants$plain2.color
    }
  }, ownerState.disableIcon && {
    color: (_theme$variants = theme.variants[ownerState.variant]) == null ? void 0 : (_theme$variants2 = _theme$variants[ownerState.color]) == null ? void 0 : _theme$variants2.color,
    [`&.${radioClasses_default.disabled}`]: {
      color: (_theme$variants3 = theme.variants[`${ownerState.variant}Disabled`]) == null ? void 0 : (_theme$variants4 = _theme$variants3[ownerState.color]) == null ? void 0 : _theme$variants4.color
    }
  }, ownerState["data-parent"] === "RadioGroup" && ownerState["data-first-child"] === void 0 && {
    marginInlineStart: ownerState.orientation === "horizontal" ? "var(--RadioGroup-gap)" : void 0,
    marginBlockStart: ownerState.orientation === "horizontal" ? void 0 : "var(--RadioGroup-gap)"
  })];
});
var RadioRadio = styled_default("span", {
  name: "JoyRadio",
  slot: "Radio",
  overridesResolver: (props, styles) => styles.radio
})(({
  ownerState,
  theme
}) => {
  var _theme$variants5, _variantStyle$backgro, _theme$variants6, _theme$variants7, _theme$variants8;
  const variantStyle = (_theme$variants5 = theme.variants[`${ownerState.variant}`]) == null ? void 0 : _theme$variants5[ownerState.color];
  return [_extends({
    margin: 0,
    boxSizing: "border-box",
    width: "var(--Radio-size)",
    height: "var(--Radio-size)",
    borderRadius: "var(--Radio-size)",
    display: "inline-flex",
    justifyContent: "center",
    alignItems: "center",
    flexShrink: 0
  }, ownerState.disableIcon && {
    display: "contents"
  }), ...!ownerState.disableIcon ? [_extends({}, variantStyle, {
    backgroundColor: (_variantStyle$backgro = variantStyle == null ? void 0 : variantStyle.backgroundColor) != null ? _variantStyle$backgro : theme.vars.palette.background.surface
  }), {
    "&:hover": (_theme$variants6 = theme.variants[`${ownerState.variant}Hover`]) == null ? void 0 : _theme$variants6[ownerState.color]
  }, {
    "&:active": (_theme$variants7 = theme.variants[`${ownerState.variant}Active`]) == null ? void 0 : _theme$variants7[ownerState.color]
  }, {
    [`&.${radioClasses_default.disabled}`]: (_theme$variants8 = theme.variants[`${ownerState.variant}Disabled`]) == null ? void 0 : _theme$variants8[ownerState.color]
  }] : []];
});
var RadioAction = styled_default("span", {
  name: "JoyRadio",
  slot: "Action",
  overridesResolver: (props, styles) => styles.action
})(({
  theme,
  ownerState
}) => {
  var _theme$variants9, _theme$variants10, _theme$variants11, _theme$variants12;
  return [{
    position: "absolute",
    textAlign: "left",
    borderRadius: `var(--Radio-actionRadius, ${ownerState.overlay ? "var(--unstable_actionRadius, inherit)" : "inherit"})`,
    top: "calc(-1 * var(--variant-borderWidth, 0px))",
    left: "calc(-1 * var(--variant-borderWidth, 0px))",
    bottom: "calc(-1 * var(--variant-borderWidth, 0px))",
    right: "calc(-1 * var(--variant-borderWidth, 0px))",
    zIndex: 1,
    [theme.focus.selector]: theme.focus.default
  }, ...ownerState.disableIcon ? [(_theme$variants9 = theme.variants[ownerState.variant]) == null ? void 0 : _theme$variants9[ownerState.color], {
    "&:hover": (_theme$variants10 = theme.variants[`${ownerState.variant}Hover`]) == null ? void 0 : _theme$variants10[ownerState.color]
  }, {
    "&:active": (_theme$variants11 = theme.variants[`${ownerState.variant}Active`]) == null ? void 0 : _theme$variants11[ownerState.color]
  }, {
    [`&.${radioClasses_default.disabled}`]: (_theme$variants12 = theme.variants[`${ownerState.variant}Disabled`]) == null ? void 0 : _theme$variants12[ownerState.color]
  }] : []];
});
var RadioInput = styled_default("input", {
  name: "JoyRadio",
  slot: "Input",
  overridesResolver: (props, styles) => styles.input
})(() => ({
  margin: 0,
  opacity: 0,
  position: "absolute",
  height: "100%",
  width: "100%",
  cursor: "pointer"
}));
var RadioLabel = styled_default("label", {
  name: "JoyRadio",
  slot: "Label",
  overridesResolver: (props, styles) => styles.label
})(({
  ownerState
}) => _extends({
  flex: 1,
  minWidth: 0
}, ownerState.disableIcon ? {
  zIndex: 1,
  pointerEvents: "none"
} : {
  marginInlineStart: "var(--Radio-gap)"
}));
var RadioIcon = styled_default("span", {
  name: "JoyRadio",
  slot: "Icon",
  overridesResolver: (props, styles) => styles.icon
})(({
  ownerState
}) => ({
  width: "calc(var(--Radio-size) / 2)",
  height: "calc(var(--Radio-size) / 2)",
  borderRadius: "inherit",
  color: "inherit",
  backgroundColor: "currentColor",
  transform: ownerState.checked ? "scale(1)" : "scale(0)"
}));
var Radio = React61.forwardRef(function Radio2(inProps, ref) {
  var _ref, _ref2, _inProps$color, _ref3, _ref4, _inProps$color2;
  const props = useThemeProps({
    props: inProps,
    name: "JoyRadio"
  });
  const {
    checked: checkedProp,
    checkedIcon,
    defaultChecked,
    disabled: disabledProp,
    disableIcon: disableIconProp = false,
    overlay: overlayProp = false,
    label,
    id: idOverride,
    name: nameProp,
    onBlur,
    onChange,
    onFocus,
    onFocusVisible,
    readOnly,
    required,
    color: colorProp,
    variant = "outlined",
    size: sizeProp = "md",
    uncheckedIcon,
    value,
    component,
    slots = {},
    slotProps = {}
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded45);
  const {
    getColor
  } = useColorInversion(variant);
  const formControl = React61.useContext(FormControlContext_default);
  if (true) {
    const registerEffect = formControl == null ? void 0 : formControl.registerEffect;
    React61.useEffect(() => {
      if (registerEffect) {
        return registerEffect();
      }
      return void 0;
    }, [registerEffect]);
  }
  const id = useId(idOverride != null ? idOverride : formControl == null ? void 0 : formControl.htmlFor);
  const radioGroup = React61.useContext(RadioGroupContext_default);
  const activeColor = formControl != null && formControl.error ? "danger" : (_ref = (_ref2 = (_inProps$color = inProps.color) != null ? _inProps$color : formControl == null ? void 0 : formControl.color) != null ? _ref2 : colorProp) != null ? _ref : "primary";
  const inactiveColor = formControl != null && formControl.error ? "danger" : (_ref3 = (_ref4 = (_inProps$color2 = inProps.color) != null ? _inProps$color2 : formControl == null ? void 0 : formControl.color) != null ? _ref4 : colorProp) != null ? _ref3 : "neutral";
  const size = inProps.size || (formControl == null ? void 0 : formControl.size) || (radioGroup == null ? void 0 : radioGroup.size) || sizeProp;
  const name = inProps.name || (radioGroup == null ? void 0 : radioGroup.name) || nameProp;
  const disableIcon = inProps.disableIcon || (radioGroup == null ? void 0 : radioGroup.disableIcon) || disableIconProp;
  const overlay = inProps.overlay || (radioGroup == null ? void 0 : radioGroup.overlay) || overlayProp;
  const radioChecked = typeof checkedProp === "undefined" && !!value ? areEqualValues(radioGroup == null ? void 0 : radioGroup.value, value) : checkedProp;
  const useRadioProps = {
    checked: radioChecked,
    defaultChecked,
    disabled: disabledProp != null ? disabledProp : formControl == null ? void 0 : formControl.disabled,
    onBlur,
    onChange,
    onFocus,
    onFocusVisible
  };
  const {
    getInputProps,
    checked,
    disabled,
    focusVisible
  } = useSwitch(useRadioProps);
  const color = getColor(inProps.color, checked ? activeColor : inactiveColor);
  const ownerState = _extends({}, props, {
    checked,
    disabled,
    focusVisible,
    color,
    variant,
    size,
    disableIcon,
    overlay,
    orientation: radioGroup == null ? void 0 : radioGroup.orientation
  });
  const classes = useUtilityClasses40(ownerState);
  const externalForwardedProps = _extends({}, other, {
    component,
    slots,
    slotProps
  });
  const [SlotRoot, rootProps] = useSlot("root", {
    ref,
    className: classes.root,
    elementType: RadioRoot,
    externalForwardedProps,
    ownerState
  });
  const [SlotRadio, radioProps] = useSlot("radio", {
    className: classes.radio,
    elementType: RadioRadio,
    externalForwardedProps,
    ownerState
  });
  const [SlotIcon, iconProps] = useSlot("icon", {
    className: classes.icon,
    elementType: RadioIcon,
    externalForwardedProps,
    ownerState
  });
  const [SlotAction, actionProps] = useSlot("action", {
    className: classes.action,
    elementType: RadioAction,
    externalForwardedProps,
    ownerState
  });
  const [SlotInput, inputProps] = useSlot("input", {
    additionalProps: {
      type: "radio",
      id,
      name,
      readOnly,
      required: required != null ? required : formControl == null ? void 0 : formControl.required,
      value: String(value),
      "aria-describedby": formControl == null ? void 0 : formControl["aria-describedby"]
    },
    className: classes.input,
    elementType: RadioInput,
    externalForwardedProps,
    getSlotProps: () => getInputProps({
      onChange: radioGroup == null ? void 0 : radioGroup.onChange
    }),
    ownerState
  });
  const [SlotLabel, labelProps] = useSlot("label", {
    additionalProps: {
      htmlFor: id
    },
    className: classes.label,
    elementType: RadioLabel,
    externalForwardedProps,
    ownerState
  });
  return (0, import_jsx_runtime58.jsxs)(SlotRoot, _extends({}, rootProps, {
    children: [(0, import_jsx_runtime58.jsxs)(SlotRadio, _extends({}, radioProps, {
      children: [checked && !disableIcon && checkedIcon, !checked && !disableIcon && uncheckedIcon, !checkedIcon && !uncheckedIcon && !disableIcon && (0, import_jsx_runtime57.jsx)(SlotIcon, _extends({}, iconProps)), (0, import_jsx_runtime57.jsx)(SlotAction, _extends({}, actionProps, {
        children: (0, import_jsx_runtime57.jsx)(SlotInput, _extends({}, inputProps))
      }))]
    })), label && (0, import_jsx_runtime57.jsx)(SlotLabel, _extends({}, labelProps, {
      children: (0, import_jsx_runtime57.jsx)(TypographyNestedContext.Provider, {
        value: true,
        children: label
      })
    }))]
  }));
});
true ? Radio.propTypes = {
  checked: import_prop_types43.default.bool,
  checkedIcon: import_prop_types43.default.node,
  children: import_prop_types43.default.node,
  className: import_prop_types43.default.string,
  color: import_prop_types43.default.oneOfType([import_prop_types43.default.oneOf(["danger", "info", "primary", "success", "warning"]), import_prop_types43.default.string]),
  component: import_prop_types43.default.elementType,
  defaultChecked: import_prop_types43.default.bool,
  disabled: import_prop_types43.default.bool,
  disableIcon: import_prop_types43.default.bool,
  id: import_prop_types43.default.string,
  label: import_prop_types43.default.node,
  name: import_prop_types43.default.string,
  onBlur: import_prop_types43.default.func,
  onChange: import_prop_types43.default.func,
  onFocus: import_prop_types43.default.func,
  onFocusVisible: import_prop_types43.default.func,
  overlay: import_prop_types43.default.bool,
  readOnly: import_prop_types43.default.bool,
  required: import_prop_types43.default.bool,
  size: import_prop_types43.default.oneOfType([import_prop_types43.default.oneOf(["sm", "md", "lg"]), import_prop_types43.default.string]),
  slotProps: import_prop_types43.default.shape({
    action: import_prop_types43.default.oneOfType([import_prop_types43.default.func, import_prop_types43.default.object]),
    icon: import_prop_types43.default.oneOfType([import_prop_types43.default.func, import_prop_types43.default.object]),
    input: import_prop_types43.default.oneOfType([import_prop_types43.default.func, import_prop_types43.default.object]),
    label: import_prop_types43.default.oneOfType([import_prop_types43.default.func, import_prop_types43.default.object]),
    radio: import_prop_types43.default.oneOfType([import_prop_types43.default.func, import_prop_types43.default.object]),
    root: import_prop_types43.default.oneOfType([import_prop_types43.default.func, import_prop_types43.default.object])
  }),
  slots: import_prop_types43.default.shape({
    action: import_prop_types43.default.elementType,
    icon: import_prop_types43.default.elementType,
    input: import_prop_types43.default.elementType,
    label: import_prop_types43.default.elementType,
    radio: import_prop_types43.default.elementType,
    root: import_prop_types43.default.elementType
  }),
  sx: import_prop_types43.default.oneOfType([import_prop_types43.default.arrayOf(import_prop_types43.default.oneOfType([import_prop_types43.default.func, import_prop_types43.default.object, import_prop_types43.default.bool])), import_prop_types43.default.func, import_prop_types43.default.object]),
  uncheckedIcon: import_prop_types43.default.node,
  value: import_prop_types43.default.any,
  variant: import_prop_types43.default.oneOfType([import_prop_types43.default.oneOf(["outlined", "plain", "soft", "solid"]), import_prop_types43.default.string])
} : void 0;
var Radio_default = Radio;

// node_modules/@mui/joy/RadioGroup/RadioGroup.js
init_objectWithoutPropertiesLoose();
init_extends();
var React62 = __toESM(require_react());
var import_prop_types44 = __toESM(require_prop_types());
init_clsx_m();
init_esm();
init_base();

// node_modules/@mui/joy/RadioGroup/radioGroupClasses.js
function getRadioGroupUtilityClass(slot) {
  return generateUtilityClass2("MuiRadioGroup", slot);
}
var radioGroupClasses = generateUtilityClasses2("MuiRadioGroup", ["root", "colorPrimary", "colorNeutral", "colorDanger", "colorInfo", "colorSuccess", "colorWarning", "variantPlain", "variantOutlined", "variantSoft", "variantSolid", "sizeSm", "sizeMd", "sizeLg", "horizontal", "vertical"]);
var radioGroupClasses_default = radioGroupClasses;

// node_modules/@mui/joy/RadioGroup/RadioGroup.js
var import_jsx_runtime59 = __toESM(require_jsx_runtime());
var _excluded46 = ["className", "component", "children", "name", "defaultValue", "disableIcon", "overlay", "value", "onChange", "color", "variant", "size", "orientation", "role", "slots", "slotProps"];
var useUtilityClasses41 = (ownerState) => {
  const {
    orientation,
    size,
    variant,
    color
  } = ownerState;
  const slots = {
    root: ["root", orientation, variant && `variant${capitalize(variant)}`, color && `color${capitalize(color)}`, size && `size${capitalize(size)}`]
  };
  return composeClasses(slots, getRadioGroupUtilityClass, {});
};
var RadioGroupRoot = styled_default("div", {
  name: "JoyRadioGroup",
  slot: "Root",
  overridesResolver: (props, styles) => styles.root
})(({
  ownerState,
  theme
}) => {
  var _theme$variants;
  return _extends({}, ownerState.size === "sm" && {
    "--RadioGroup-gap": "0.625rem"
  }, ownerState.size === "md" && {
    "--RadioGroup-gap": "0.875rem"
  }, ownerState.size === "lg" && {
    "--RadioGroup-gap": "1.25rem"
  }, {
    display: "flex",
    margin: "var(--unstable_RadioGroup-margin)",
    flexDirection: ownerState.orientation === "horizontal" ? "row" : "column",
    borderRadius: theme.vars.radius.sm
  }, (_theme$variants = theme.variants[ownerState.variant]) == null ? void 0 : _theme$variants[ownerState.color]);
});
var RadioGroup = React62.forwardRef(function RadioGroup2(inProps, ref) {
  const props = useThemeProps({
    props: inProps,
    name: "JoyRadioGroup"
  });
  const {
    className,
    component,
    children,
    name: nameProp,
    defaultValue,
    disableIcon = false,
    overlay,
    value: valueProp,
    onChange,
    color = "neutral",
    variant = "plain",
    size: sizeProp = "md",
    orientation = "vertical",
    role = "radiogroup",
    slots = {},
    slotProps = {}
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded46);
  const [value, setValueState] = useControlled({
    controlled: valueProp,
    default: defaultValue,
    name: "RadioGroup"
  });
  const formControl = React62.useContext(FormControlContext_default);
  const size = inProps.size || (formControl == null ? void 0 : formControl.size) || sizeProp;
  const ownerState = _extends({
    orientation,
    size,
    variant,
    color,
    role
  }, props);
  const classes = useUtilityClasses41(ownerState);
  const name = useId(nameProp);
  if (true) {
    const registerEffect = formControl == null ? void 0 : formControl.registerEffect;
    React62.useEffect(() => {
      if (registerEffect) {
        return registerEffect();
      }
      return void 0;
    }, [registerEffect]);
  }
  const contextValue = React62.useMemo(() => ({
    disableIcon,
    overlay,
    orientation,
    size,
    name,
    value,
    onChange: (event) => {
      setValueState(event.target.value);
      if (onChange) {
        onChange(event);
      }
    }
  }), [disableIcon, name, onChange, overlay, orientation, setValueState, size, value]);
  const [SlotRoot, rootProps] = useSlot("root", {
    ref,
    className: clsx_m_default(classes.root, className),
    elementType: RadioGroupRoot,
    externalForwardedProps: _extends({}, other, {
      component,
      slots,
      slotProps
    }),
    ownerState,
    additionalProps: {
      as: component,
      role,
      id: formControl == null ? void 0 : formControl.htmlFor,
      "aria-labelledby": formControl == null ? void 0 : formControl.labelId,
      "aria-describedby": formControl == null ? void 0 : formControl["aria-describedby"]
    }
  });
  return (0, import_jsx_runtime59.jsx)(RadioGroupContext_default.Provider, {
    value: contextValue,
    children: (0, import_jsx_runtime59.jsx)(SlotRoot, _extends({}, rootProps, {
      children: (0, import_jsx_runtime59.jsx)(FormControlContext_default.Provider, {
        value: void 0,
        children: React62.Children.map(children, (child, index) => React62.isValidElement(child) ? React62.cloneElement(child, _extends({}, index === 0 && {
          "data-first-child": ""
        }, index === React62.Children.count(children) - 1 && {
          "data-last-child": ""
        }, {
          "data-parent": "RadioGroup"
        })) : child)
      })
    }))
  });
});
true ? RadioGroup.propTypes = {
  children: import_prop_types44.default.node,
  className: import_prop_types44.default.string,
  color: import_prop_types44.default.oneOfType([import_prop_types44.default.oneOf(["danger", "info", "primary", "success", "warning"]), import_prop_types44.default.string]),
  component: import_prop_types44.default.elementType,
  defaultValue: import_prop_types44.default.any,
  disableIcon: import_prop_types44.default.bool,
  name: import_prop_types44.default.string,
  onChange: import_prop_types44.default.func,
  orientation: import_prop_types44.default.oneOf(["horizontal", "vertical"]),
  overlay: import_prop_types44.default.bool,
  role: import_prop_types44.default.string,
  size: import_prop_types44.default.oneOfType([import_prop_types44.default.oneOf(["sm", "md", "lg"]), import_prop_types44.default.string]),
  slotProps: import_prop_types44.default.shape({
    root: import_prop_types44.default.oneOfType([import_prop_types44.default.func, import_prop_types44.default.object])
  }),
  slots: import_prop_types44.default.shape({
    root: import_prop_types44.default.elementType
  }),
  sx: import_prop_types44.default.oneOfType([import_prop_types44.default.arrayOf(import_prop_types44.default.oneOfType([import_prop_types44.default.func, import_prop_types44.default.object, import_prop_types44.default.bool])), import_prop_types44.default.func, import_prop_types44.default.object]),
  value: import_prop_types44.default.any,
  variant: import_prop_types44.default.oneOfType([import_prop_types44.default.oneOf(["outlined", "plain", "soft", "solid"]), import_prop_types44.default.string])
} : void 0;
var RadioGroup_default = RadioGroup;

// node_modules/@mui/joy/ScopedCssBaseline/ScopedCssBaseline.js
init_objectWithoutPropertiesLoose();
init_extends();
var React63 = __toESM(require_react());
var import_prop_types45 = __toESM(require_prop_types());
init_clsx_m();
init_base();

// node_modules/@mui/joy/ScopedCssBaseline/scopedCssBaselineClasses.js
function getScopedCssBaselineUtilityClass(slot) {
  return generateUtilityClass2("MuiScopedCssBaseline", slot);
}
var scopedCssBaselineClasses = generateUtilityClasses2("MuiScopedCssBaseline", ["root"]);
var scopedCssBaselineClasses_default = scopedCssBaselineClasses;

// node_modules/@mui/joy/ScopedCssBaseline/ScopedCssBaseline.js
var import_jsx_runtime60 = __toESM(require_jsx_runtime());
var _excluded47 = ["className", "component", "disableColorScheme", "slots", "slotProps"];
var useUtilityClasses42 = () => {
  const slots = {
    root: ["root"]
  };
  return composeClasses(slots, getScopedCssBaselineUtilityClass, {});
};
var ScopedCssBaselineRoot = styled_default("div", {
  name: "JoyScopedCssBaseline",
  slot: "Root",
  overridesResolver: (props, styles) => styles.root
})(({
  theme,
  ownerState
}) => {
  const colorSchemeStyles = {};
  if (!ownerState.disableColorScheme && theme.colorSchemes) {
    Object.entries(theme.colorSchemes).forEach(([key, scheme]) => {
      var _scheme$palette;
      colorSchemeStyles[`&${theme.getColorSchemeSelector(key).replace(/\s*&/, "")}`] = {
        colorScheme: (_scheme$palette = scheme.palette) == null ? void 0 : _scheme$palette.mode
      };
    });
  }
  return _extends({
    WebkitFontSmoothing: "antialiased",
    MozOsxFontSmoothing: "grayscale",
    boxSizing: "border-box",
    WebkitTextSizeAdjust: "100%",
    color: theme.vars.palette.text.primary
  }, theme.typography.body1, {
    backgroundColor: theme.vars.palette.background.body,
    "@media print": {
      backgroundColor: theme.vars.palette.common.white
    },
    "& *, & *::before, & *::after": {
      boxSizing: "inherit"
    },
    "& strong, & b": {
      fontWeight: "bold"
    }
  }, colorSchemeStyles);
});
var ScopedCssBaseline = React63.forwardRef(function ScopedCssBaseline2(inProps, ref) {
  const props = useThemeProps({
    props: inProps,
    name: "JoyScopedCssBaseline"
  });
  const {
    className,
    component = "div",
    disableColorScheme = false,
    slots = {},
    slotProps = {}
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded47);
  const ownerState = _extends({}, props, {
    component,
    disableColorScheme
  });
  const classes = useUtilityClasses42();
  const externalForwardedProps = _extends({}, other, {
    component,
    slots,
    slotProps
  });
  const [SlotRoot, rootProps] = useSlot("root", {
    ref,
    className: clsx_m_default(classes.root, className),
    elementType: ScopedCssBaselineRoot,
    externalForwardedProps,
    ownerState
  });
  return (0, import_jsx_runtime60.jsx)(SlotRoot, _extends({}, rootProps));
});
true ? ScopedCssBaseline.propTypes = {
  children: import_prop_types45.default.node,
  className: import_prop_types45.default.string,
  component: import_prop_types45.default.elementType,
  disableColorScheme: import_prop_types45.default.bool,
  slotProps: import_prop_types45.default.shape({
    root: import_prop_types45.default.oneOfType([import_prop_types45.default.func, import_prop_types45.default.object])
  }),
  slots: import_prop_types45.default.shape({
    root: import_prop_types45.default.elementType
  }),
  sx: import_prop_types45.default.oneOfType([import_prop_types45.default.arrayOf(import_prop_types45.default.oneOfType([import_prop_types45.default.func, import_prop_types45.default.object, import_prop_types45.default.bool])), import_prop_types45.default.func, import_prop_types45.default.object])
} : void 0;
var ScopedCssBaseline_default = ScopedCssBaseline;

// node_modules/@mui/joy/Select/Select.js
init_objectWithoutPropertiesLoose();
init_extends();
var React65 = __toESM(require_react());
var import_prop_types46 = __toESM(require_prop_types());
init_clsx_m();
init_esm();
init_Popper();
init_useSelect();
init_composeClasses();

// node_modules/@mui/joy/internal/svg-icons/Unfold.js
var React64 = __toESM(require_react());
var import_jsx_runtime61 = __toESM(require_jsx_runtime());
var Unfold_default = createSvgIcon((0, import_jsx_runtime61.jsx)("path", {
  d: "m12 5.83 2.46 2.46c.39.39 1.02.39 1.41 0 .39-.39.39-1.02 0-1.41L12.7 3.7a.9959.9959 0 0 0-1.41 0L8.12 6.88c-.39.39-.39 1.02 0 1.41.39.39 1.02.39 1.41 0L12 5.83zm0 12.34-2.46-2.46a.9959.9959 0 0 0-1.41 0c-.39.39-.39 1.02 0 1.41l3.17 3.18c.39.39 1.02.39 1.41 0l3.17-3.17c.39-.39.39-1.02 0-1.41a.9959.9959 0 0 0-1.41 0L12 18.17z"
}), "Unfold");

// node_modules/@mui/joy/Select/selectClasses.js
function getSelectUtilityClass(slot) {
  return generateUtilityClass2("MuiSelect", slot);
}
var selectClasses = generateUtilityClasses2("MuiSelect", ["root", "button", "indicator", "startDecorator", "endDecorator", "popper", "listbox", "colorPrimary", "colorNeutral", "colorDanger", "colorInfo", "colorSuccess", "colorWarning", "colorContext", "variantPlain", "variantOutlined", "variantSoft", "variantSolid", "sizeSm", "sizeMd", "sizeLg", "focusVisible", "disabled", "expanded"]);
var selectClasses_default = selectClasses;

// node_modules/@mui/joy/Select/Select.js
var import_jsx_runtime62 = __toESM(require_jsx_runtime());
var import_jsx_runtime63 = __toESM(require_jsx_runtime());
var _Unfold;
var _excluded48 = ["action", "autoFocus", "children", "defaultValue", "defaultListboxOpen", "disabled", "getSerializedValue", "placeholder", "listboxId", "listboxOpen", "onChange", "onListboxOpenChange", "onClose", "renderValue", "value", "size", "variant", "color", "startDecorator", "endDecorator", "indicator", "aria-describedby", "aria-label", "aria-labelledby", "id", "name", "slots", "slotProps"];
function defaultRenderSingleValue(selectedOption) {
  var _selectedOption$label;
  return (_selectedOption$label = selectedOption == null ? void 0 : selectedOption.label) != null ? _selectedOption$label : "";
}
function defaultFormValueProvider(selectedOption) {
  if ((selectedOption == null ? void 0 : selectedOption.value) == null) {
    return "";
  }
  if (typeof selectedOption.value === "string" || typeof selectedOption.value === "number") {
    return selectedOption.value;
  }
  return JSON.stringify(selectedOption.value);
}
var defaultModifiers = [{
  name: "offset",
  options: {
    offset: [0, 4]
  }
}, {
  name: "equalWidth",
  enabled: true,
  phase: "beforeWrite",
  requires: ["computeStyles"],
  fn: ({
    state
  }) => {
    state.styles.popper.width = `${state.rects.reference.width}px`;
  }
}];
var useUtilityClasses43 = (ownerState) => {
  const {
    color,
    disabled,
    focusVisible,
    size,
    variant,
    open
  } = ownerState;
  const slots = {
    root: ["root", disabled && "disabled", focusVisible && "focusVisible", open && "expanded", variant && `variant${capitalize(variant)}`, color && `color${capitalize(color)}`, size && `size${capitalize(size)}`],
    button: ["button"],
    startDecorator: ["startDecorator"],
    endDecorator: ["endDecorator"],
    indicator: ["indicator", open && "expanded"],
    listbox: ["listbox", open && "expanded", disabled && "disabled"]
  };
  return composeClasses(slots, getSelectUtilityClass, {});
};
var SelectRoot = styled_default("div", {
  name: "JoySelect",
  slot: "Root",
  overridesResolver: (props, styles) => styles.root
})(({
  theme,
  ownerState
}) => {
  var _theme$variants, _theme$vars$palette, _theme$variants2, _theme$variants3;
  const variantStyle = (_theme$variants = theme.variants[`${ownerState.variant}`]) == null ? void 0 : _theme$variants[ownerState.color];
  return [_extends({
    "--Select-radius": theme.vars.radius.sm,
    "--Select-gap": "0.5rem",
    "--Select-placeholderOpacity": 0.5,
    "--Select-focusedThickness": theme.vars.focus.thickness
  }, ownerState.color === "context" ? {
    "--Select-focusedHighlight": theme.vars.palette.focusVisible
  } : {
    "--Select-focusedHighlight": (_theme$vars$palette = theme.vars.palette[ownerState.color === "neutral" ? "primary" : ownerState.color]) == null ? void 0 : _theme$vars$palette[500]
  }, {
    "--Select-indicatorColor": variantStyle != null && variantStyle.backgroundColor ? variantStyle == null ? void 0 : variantStyle.color : theme.vars.palette.text.tertiary
  }, ownerState.size === "sm" && {
    "--Select-minHeight": "2rem",
    "--Select-paddingInline": "0.5rem",
    "--Select-decoratorChildHeight": "min(1.5rem, var(--Select-minHeight))",
    "--Icon-fontSize": "1.25rem"
  }, ownerState.size === "md" && {
    "--Select-minHeight": "2.5rem",
    "--Select-paddingInline": "0.75rem",
    "--Select-decoratorChildHeight": "min(2rem, var(--Select-minHeight))",
    "--Icon-fontSize": "1.5rem"
  }, ownerState.size === "lg" && {
    "--Select-minHeight": "3rem",
    "--Select-paddingInline": "1rem",
    "--Select-decoratorChildHeight": "min(2.375rem, var(--Select-minHeight))",
    "--Icon-fontSize": "1.75rem"
  }, {
    "--Select-decoratorChildOffset": "min(calc(var(--Select-paddingInline) - (var(--Select-minHeight) - 2 * var(--variant-borderWidth, 0px) - var(--Select-decoratorChildHeight)) / 2), var(--Select-paddingInline))",
    "--_Select-paddingBlock": "max((var(--Select-minHeight) - 2 * var(--variant-borderWidth, 0px) - var(--Select-decoratorChildHeight)) / 2, 0px)",
    "--Select-decoratorChildRadius": "max(var(--Select-radius) - var(--variant-borderWidth, 0px) - var(--_Select-paddingBlock), min(var(--_Select-paddingBlock) + var(--variant-borderWidth, 0px), var(--Select-radius) / 2))",
    "--Button-minHeight": "var(--Select-decoratorChildHeight)",
    "--IconButton-size": "var(--Select-decoratorChildHeight)",
    "--Button-radius": "var(--Select-decoratorChildRadius)",
    "--IconButton-radius": "var(--Select-decoratorChildRadius)",
    boxSizing: "border-box",
    minWidth: 0,
    minHeight: "var(--Select-minHeight)",
    position: "relative",
    display: "flex",
    alignItems: "center",
    borderRadius: "var(--Select-radius)",
    cursor: "pointer"
  }, !variantStyle.backgroundColor && {
    backgroundColor: theme.vars.palette.background.surface
  }, ownerState.size && {
    paddingBlock: {
      sm: 2,
      md: 3,
      lg: 4
    }[ownerState.size]
  }, {
    paddingInline: `var(--Select-paddingInline)`,
    fontFamily: theme.vars.fontFamily.body,
    fontSize: theme.vars.fontSize.md
  }, ownerState.size === "sm" && {
    fontSize: theme.vars.fontSize.sm
  }, {
    "&::before": {
      boxSizing: "border-box",
      content: '""',
      display: "block",
      position: "absolute",
      pointerEvents: "none",
      top: 0,
      left: 0,
      right: 0,
      bottom: 0,
      zIndex: 1,
      borderRadius: "inherit",
      margin: "calc(var(--variant-borderWidth, 0px) * -1)"
    },
    [`&.${selectClasses_default.focusVisible}`]: {
      "--Select-indicatorColor": variantStyle == null ? void 0 : variantStyle.color,
      "&::before": {
        boxShadow: `inset 0 0 0 var(--Select-focusedThickness) var(--Select-focusedHighlight)`
      }
    },
    [`&.${selectClasses_default.disabled}`]: {
      "--Select-indicatorColor": "inherit"
    }
  }), _extends({}, variantStyle, {
    "&:hover": (_theme$variants2 = theme.variants[`${ownerState.variant}Hover`]) == null ? void 0 : _theme$variants2[ownerState.color],
    [`&.${selectClasses_default.disabled}`]: (_theme$variants3 = theme.variants[`${ownerState.variant}Disabled`]) == null ? void 0 : _theme$variants3[ownerState.color]
  })];
});
var SelectButton = styled_default("button", {
  name: "JoySelect",
  slot: "Button",
  overridesResolver: (props, styles) => styles.button
})(({
  ownerState
}) => _extends({
  border: 0,
  outline: 0,
  background: "none",
  padding: 0,
  fontSize: "inherit",
  color: "inherit",
  alignSelf: "stretch",
  display: "flex",
  alignItems: "center",
  flex: 1,
  fontFamily: "inherit",
  cursor: "pointer",
  whiteSpace: "nowrap",
  overflow: "auto"
}, (ownerState.value === null || ownerState.value === void 0) && {
  opacity: "var(--Select-placeholderOpacity)"
}));
var SelectListbox = styled_default(StyledList, {
  name: "JoySelect",
  slot: "Listbox",
  overridesResolver: (props, styles) => styles.listbox
})(({
  theme,
  ownerState
}) => {
  var _theme$variants4;
  const variantStyle = ownerState.color === "context" ? void 0 : (_theme$variants4 = theme.variants[ownerState.variant]) == null ? void 0 : _theme$variants4[ownerState.color];
  return _extends({
    "--focus-outline-offset": `calc(${theme.vars.focus.thickness} * -1)`,
    "--List-radius": theme.vars.radius.sm,
    "--ListItem-stickyBackground": (variantStyle == null ? void 0 : variantStyle.backgroundColor) || (variantStyle == null ? void 0 : variantStyle.background) || theme.vars.palette.background.popup,
    "--ListItem-stickyTop": "calc(var(--List-padding, var(--ListDivider-gap)) * -1)"
  }, scopedVariables, {
    minWidth: "max-content",
    maxHeight: "44vh",
    overflow: "auto",
    outline: 0,
    boxShadow: theme.shadow.md,
    zIndex: theme.vars.zIndex.popup
  }, !(variantStyle != null && variantStyle.backgroundColor) && {
    backgroundColor: theme.vars.palette.background.popup
  });
});
var SelectStartDecorator = styled_default("span", {
  name: "JoySelect",
  slot: "StartDecorator",
  overridesResolver: (props, styles) => styles.startDecorator
})(({
  theme,
  ownerState
}) => _extends({
  "--Button-margin": "0 0 0 calc(var(--Select-decoratorChildOffset) * -1)",
  "--IconButton-margin": "0 0 0 calc(var(--Select-decoratorChildOffset) * -1)",
  "--Icon-margin": "0 0 0 calc(var(--Select-paddingInline) / -4)",
  display: "inherit",
  alignItems: "center",
  marginInlineEnd: "var(--Select-gap)",
  color: theme.vars.palette.text.tertiary
}, ownerState.focusVisible && {
  color: "var(--Select-focusedHighlight)"
}));
var SelectEndDecorator = styled_default("span", {
  name: "JoySelect",
  slot: "EndDecorator",
  overridesResolver: (props, styles) => styles.endDecorator
})(({
  theme,
  ownerState
}) => {
  var _theme$variants5;
  const variantStyle = (_theme$variants5 = theme.variants[ownerState.variant]) == null ? void 0 : _theme$variants5[ownerState.color];
  return {
    "--Button-margin": "0 calc(var(--Select-decoratorChildOffset) * -1) 0 0",
    "--IconButton-margin": "0 calc(var(--Select-decoratorChildOffset) * -1) 0 0",
    "--Icon-margin": "0 calc(var(--Select-paddingInline) / -4) 0 0",
    display: "inherit",
    alignItems: "center",
    marginInlineStart: "var(--Select-gap)",
    color: variantStyle == null ? void 0 : variantStyle.color
  };
});
var SelectIndicator = styled_default("span", {
  name: "JoySelect",
  slot: "Indicator"
})(({
  ownerState
}) => _extends({}, ownerState.size === "sm" && {
  "--Icon-fontSize": "1.125rem"
}, ownerState.size === "md" && {
  "--Icon-fontSize": "1.25rem"
}, ownerState.size === "lg" && {
  "--Icon-fontSize": "1.5rem"
}, {
  color: "var(--Select-indicatorColor)",
  display: "inherit",
  alignItems: "center",
  marginInlineStart: "var(--Select-gap)",
  marginInlineEnd: "calc(var(--Select-paddingInline) / -4)",
  [`.${selectClasses_default.endDecorator} + &`]: {
    marginInlineStart: "calc(var(--Select-gap) / 2)"
  }
}));
var Select = React65.forwardRef(function Select2(inProps, ref) {
  var _ref2, _inProps$disabled, _ref3, _inProps$size, _formControl$color;
  const props = useThemeProps({
    props: inProps,
    name: "JoySelect"
  });
  const _ref = props, {
    action,
    autoFocus,
    children,
    defaultValue,
    defaultListboxOpen = false,
    disabled: disabledExternalProp,
    getSerializedValue = defaultFormValueProvider,
    placeholder,
    listboxId,
    listboxOpen: listboxOpenProp,
    onChange,
    onListboxOpenChange,
    onClose,
    renderValue: renderValueProp,
    value: valueProp,
    size: sizeProp = "md",
    variant = "outlined",
    color: colorProp = "neutral",
    startDecorator,
    endDecorator,
    indicator = _Unfold || (_Unfold = (0, import_jsx_runtime62.jsx)(Unfold_default, {})),
    "aria-describedby": ariaDescribedby,
    "aria-label": ariaLabel,
    "aria-labelledby": ariaLabelledby,
    id,
    name,
    slots = {},
    slotProps = {}
  } = _ref, other = _objectWithoutPropertiesLoose(_ref, _excluded48);
  const formControl = React65.useContext(FormControlContext_default);
  if (true) {
    const registerEffect = formControl == null ? void 0 : formControl.registerEffect;
    React65.useEffect(() => {
      if (registerEffect) {
        return registerEffect();
      }
      return void 0;
    }, [registerEffect]);
  }
  const disabledProp = (_ref2 = (_inProps$disabled = inProps.disabled) != null ? _inProps$disabled : formControl == null ? void 0 : formControl.disabled) != null ? _ref2 : disabledExternalProp;
  const size = (_ref3 = (_inProps$size = inProps.size) != null ? _inProps$size : formControl == null ? void 0 : formControl.size) != null ? _ref3 : sizeProp;
  const {
    getColor
  } = useColorInversion(variant);
  const color = getColor(inProps.color, formControl != null && formControl.error ? "danger" : (_formControl$color = formControl == null ? void 0 : formControl.color) != null ? _formControl$color : colorProp);
  const renderValue = renderValueProp != null ? renderValueProp : defaultRenderSingleValue;
  const [anchorEl, setAnchorEl] = React65.useState(null);
  const rootRef = React65.useRef(null);
  const buttonRef = React65.useRef(null);
  const listboxRef = React65.useRef(null);
  const handleRef = useForkRef(ref, rootRef);
  React65.useImperativeHandle(action, () => ({
    focusVisible: () => {
      var _buttonRef$current;
      (_buttonRef$current = buttonRef.current) == null ? void 0 : _buttonRef$current.focus();
    }
  }), []);
  React65.useEffect(() => {
    setAnchorEl(rootRef.current);
  }, []);
  React65.useEffect(() => {
    if (autoFocus) {
      buttonRef.current.focus();
    }
  }, [autoFocus]);
  const handleOpenChange = React65.useCallback((isOpen) => {
    onListboxOpenChange == null ? void 0 : onListboxOpenChange(isOpen);
    if (!isOpen) {
      onClose == null ? void 0 : onClose();
    }
  }, [onClose, onListboxOpenChange]);
  const {
    buttonActive,
    buttonFocusVisible,
    contextValue,
    disabled,
    dispatch,
    getButtonProps,
    getListboxProps,
    getOptionMetadata,
    open: listboxOpen,
    value
  } = useSelect_default({
    buttonRef,
    defaultOpen: defaultListboxOpen,
    defaultValue,
    disabled: disabledProp,
    listboxId,
    multiple: false,
    onChange,
    onOpenChange: handleOpenChange,
    open: listboxOpenProp,
    value: valueProp
  });
  const ownerState = _extends({}, props, {
    active: buttonActive,
    defaultListboxOpen,
    disabled,
    focusVisible: buttonFocusVisible,
    open: listboxOpen,
    renderValue,
    value,
    size,
    variant,
    color
  });
  const classes = useUtilityClasses43(ownerState);
  const externalForwardedProps = _extends({}, other, {
    slots,
    slotProps
  });
  const selectedOption = React65.useMemo(() => {
    var _getOptionMetadata;
    return (_getOptionMetadata = getOptionMetadata(value)) != null ? _getOptionMetadata : null;
  }, [getOptionMetadata, value]);
  const [SlotRoot, rootProps] = useSlot("root", {
    ref: handleRef,
    className: classes.root,
    elementType: SelectRoot,
    externalForwardedProps,
    getSlotProps: (handlers) => ({
      onMouseDown: (event) => {
        var _buttonRef$current2, _handlers$onMouseDown;
        if (!listboxOpen && !((_buttonRef$current2 = buttonRef.current) != null && _buttonRef$current2.contains(event.target)) && !event.isPropagationStopped()) {
          dispatch({
            type: SelectActionTypes.buttonClick,
            event
          });
        }
        (_handlers$onMouseDown = handlers.onMouseDown) == null ? void 0 : _handlers$onMouseDown.call(handlers, event);
      }
    }),
    ownerState
  });
  const [SlotButton, buttonProps] = useSlot("button", {
    additionalProps: {
      "aria-describedby": ariaDescribedby != null ? ariaDescribedby : formControl == null ? void 0 : formControl["aria-describedby"],
      "aria-label": ariaLabel,
      "aria-labelledby": ariaLabelledby != null ? ariaLabelledby : formControl == null ? void 0 : formControl.labelId,
      id: id != null ? id : formControl == null ? void 0 : formControl.htmlFor,
      name
    },
    className: classes.button,
    elementType: SelectButton,
    externalForwardedProps,
    getSlotProps: getButtonProps,
    ownerState
  });
  const [SlotListbox, listboxProps] = useSlot("listbox", {
    additionalProps: {
      ref: listboxRef,
      anchorEl,
      disablePortal: true,
      open: listboxOpen,
      placement: "bottom",
      keepMounted: true
    },
    className: classes.listbox,
    elementType: SelectListbox,
    externalForwardedProps,
    getSlotProps: getListboxProps,
    ownerState: _extends({}, ownerState, {
      nesting: false,
      row: false,
      wrap: false
    }),
    getSlotOwnerState: (mergedProps) => ({
      size: mergedProps.size || size,
      variant: mergedProps.variant || "outlined",
      color: mergedProps.color || "neutral",
      disableColorInversion: !mergedProps.disablePortal
    })
  });
  const [SlotStartDecorator, startDecoratorProps] = useSlot("startDecorator", {
    className: classes.startDecorator,
    elementType: SelectStartDecorator,
    externalForwardedProps,
    ownerState
  });
  const [SlotEndDecorator, endDecoratorProps] = useSlot("endDecorator", {
    className: classes.endDecorator,
    elementType: SelectEndDecorator,
    externalForwardedProps,
    ownerState
  });
  const [SlotIndicator, indicatorProps] = useSlot("indicator", {
    className: classes.indicator,
    elementType: SelectIndicator,
    externalForwardedProps,
    ownerState
  });
  const context = React65.useMemo(() => _extends({}, contextValue, {
    color
  }), [color, contextValue]);
  const modifiers = React65.useMemo(() => [...defaultModifiers, ...listboxProps.modifiers || []], [listboxProps.modifiers]);
  let result = null;
  if (anchorEl) {
    var _listboxProps$ownerSt, _props$slots;
    result = (0, import_jsx_runtime62.jsx)(SlotListbox, _extends({}, listboxProps, {
      className: clsx_m_default(listboxProps.className, ((_listboxProps$ownerSt = listboxProps.ownerState) == null ? void 0 : _listboxProps$ownerSt.color) === "context" && selectClasses_default.colorContext),
      modifiers
    }, !((_props$slots = props.slots) != null && _props$slots.listbox) && {
      as: Popper_default,
      slots: {
        root: listboxProps.as || "ul"
      }
    }, {
      children: (0, import_jsx_runtime62.jsx)(SelectProvider, {
        value: context,
        children: (0, import_jsx_runtime62.jsx)(GroupListContext_default.Provider, {
          value: "select",
          children: (0, import_jsx_runtime62.jsx)(ListProvider_default, {
            nested: true,
            children
          })
        })
      })
    }));
    if (!listboxProps.disablePortal) {
      result = (0, import_jsx_runtime62.jsx)(ColorInversion_default.Provider, {
        value: void 0,
        children: result
      });
    }
  }
  return (0, import_jsx_runtime63.jsxs)(React65.Fragment, {
    children: [(0, import_jsx_runtime63.jsxs)(SlotRoot, _extends({}, rootProps, {
      children: [startDecorator && (0, import_jsx_runtime62.jsx)(SlotStartDecorator, _extends({}, startDecoratorProps, {
        children: startDecorator
      })), (0, import_jsx_runtime62.jsx)(SlotButton, _extends({}, buttonProps, {
        children: selectedOption ? renderValue(selectedOption) : placeholder
      })), endDecorator && (0, import_jsx_runtime62.jsx)(SlotEndDecorator, _extends({}, endDecoratorProps, {
        children: endDecorator
      })), indicator && (0, import_jsx_runtime62.jsx)(SlotIndicator, _extends({}, indicatorProps, {
        children: indicator
      }))]
    })), result, name && (0, import_jsx_runtime62.jsx)("input", {
      type: "hidden",
      name,
      value: getSerializedValue(selectedOption)
    })]
  });
});
true ? Select.propTypes = {
  action: import_prop_types46.default.oneOfType([import_prop_types46.default.func, import_prop_types46.default.shape({
    current: import_prop_types46.default.shape({
      focusVisible: import_prop_types46.default.func.isRequired
    })
  })]),
  autoFocus: import_prop_types46.default.bool,
  children: import_prop_types46.default.node,
  className: import_prop_types46.default.string,
  color: import_prop_types46.default.oneOfType([import_prop_types46.default.oneOf(["danger", "info", "neutral", "primary", "success", "warning"]), import_prop_types46.default.string]),
  component: import_prop_types46.default.elementType,
  defaultListboxOpen: import_prop_types46.default.bool,
  defaultValue: import_prop_types46.default.any,
  disabled: import_prop_types46.default.bool,
  endDecorator: import_prop_types46.default.node,
  getSerializedValue: import_prop_types46.default.func,
  indicator: import_prop_types46.default.node,
  listboxId: import_prop_types46.default.string,
  listboxOpen: import_prop_types46.default.bool,
  name: import_prop_types46.default.string,
  onChange: import_prop_types46.default.func,
  onClose: import_prop_types46.default.func,
  onListboxOpenChange: import_prop_types46.default.func,
  placeholder: import_prop_types46.default.node,
  renderValue: import_prop_types46.default.func,
  size: import_prop_types46.default.oneOfType([import_prop_types46.default.oneOf(["sm", "md", "lg"]), import_prop_types46.default.string]),
  slots: import_prop_types46.default.shape({
    button: import_prop_types46.default.elementType,
    endDecorator: import_prop_types46.default.elementType,
    indicator: import_prop_types46.default.elementType,
    listbox: import_prop_types46.default.elementType,
    root: import_prop_types46.default.elementType,
    startDecorator: import_prop_types46.default.elementType
  }),
  startDecorator: import_prop_types46.default.node,
  sx: import_prop_types46.default.oneOfType([import_prop_types46.default.arrayOf(import_prop_types46.default.oneOfType([import_prop_types46.default.func, import_prop_types46.default.object, import_prop_types46.default.bool])), import_prop_types46.default.func, import_prop_types46.default.object]),
  value: import_prop_types46.default.any,
  variant: import_prop_types46.default.oneOfType([import_prop_types46.default.oneOf(["outlined", "plain", "soft", "solid"]), import_prop_types46.default.string])
} : void 0;
var Select_default = Select;

// node_modules/@mui/joy/Slider/Slider.js
init_objectWithoutPropertiesLoose();
init_extends();
var React66 = __toESM(require_react());
var import_prop_types47 = __toESM(require_prop_types());
init_clsx_m();
init_esm();
init_useSlider();
init_utils();

// node_modules/@mui/joy/Slider/sliderClasses.js
function getSliderUtilityClass(slot) {
  return generateUtilityClass2("MuiSlider", slot);
}
var sliderClasses = generateUtilityClasses2("MuiSlider", ["root", "disabled", "dragging", "focusVisible", "marked", "vertical", "trackInverted", "trackFalse", "rail", "track", "mark", "markActive", "markLabel", "thumb", "thumbStart", "thumbEnd", "valueLabel", "valueLabelOpen", "colorPrimary", "colorNeutral", "colorDanger", "colorInfo", "colorSuccess", "colorWarning", "colorContext", "variantPlain", "variantOutlined", "variantSoft", "variantSolid", "disabled", "sizeSm", "sizeMd", "sizeLg"]);
var sliderClasses_default = sliderClasses;

// node_modules/@mui/joy/Slider/Slider.js
var import_jsx_runtime64 = __toESM(require_jsx_runtime());
var import_jsx_runtime65 = __toESM(require_jsx_runtime());
var _excluded49 = ["aria-label", "aria-valuetext", "className", "classes", "disableSwap", "disabled", "defaultValue", "getAriaLabel", "getAriaValueText", "marks", "max", "min", "name", "onChange", "onChangeCommitted", "onMouseDown", "orientation", "scale", "step", "tabIndex", "track", "value", "valueLabelDisplay", "valueLabelFormat", "isRtl", "color", "size", "variant", "component", "slots", "slotProps"];
function Identity(x) {
  return x;
}
var useUtilityClasses44 = (ownerState) => {
  const {
    disabled,
    dragging,
    marked,
    orientation,
    track,
    variant,
    color,
    size
  } = ownerState;
  const slots = {
    root: ["root", disabled && "disabled", dragging && "dragging", marked && "marked", orientation === "vertical" && "vertical", track === "inverted" && "trackInverted", track === false && "trackFalse", variant && `variant${capitalize(variant)}`, color && `color${capitalize(color)}`, size && `size${capitalize(size)}`],
    rail: ["rail"],
    track: ["track"],
    thumb: ["thumb", disabled && "disabled"],
    input: ["input"],
    mark: ["mark"],
    markActive: ["markActive"],
    markLabel: ["markLabel"],
    markLabelActive: ["markLabelActive"],
    valueLabel: ["valueLabel"],
    valueLabelOpen: ["valueLabelOpen"],
    active: ["active"],
    focusVisible: ["focusVisible"]
  };
  return composeClasses(slots, getSliderUtilityClass, {});
};
var sliderColorVariables = ({
  theme,
  ownerState
}) => (data = {}) => {
  var _theme$variants;
  const styles = ((_theme$variants = theme.variants[`${ownerState.variant}${data.state || ""}`]) == null ? void 0 : _theme$variants[ownerState.color]) || {};
  return _extends({}, styles.border && {
    "--variant-borderWidth": styles["--variant-borderWidth"]
  }, {
    "--Slider-trackColor": styles.color,
    "--Slider-thumbBackground": styles.color,
    "--Slider-thumbColor": styles.backgroundColor || theme.vars.palette.background.surface,
    "--Slider-trackBackground": styles.backgroundColor || theme.vars.palette.background.surface,
    "--Slider-trackBorderColor": styles.borderColor,
    "--Slider-railBackground": theme.vars.palette.background.level2
  });
};
var SliderRoot = styled_default("span", {
  name: "JoySlider",
  slot: "Root",
  overridesResolver: (props, styles) => styles.root
})(({
  theme,
  ownerState
}) => {
  const getColorVariables = sliderColorVariables({
    theme,
    ownerState
  });
  return [_extends({
    "--variant-borderWidth": "0px",
    "--Slider-size": "max(42px, max(var(--Slider-thumbSize), var(--Slider-trackSize)))",
    "--Slider-trackRadius": "var(--Slider-size)",
    "--Slider-markBackground": theme.vars.palette.text.tertiary,
    [`& .${sliderClasses_default.markActive}`]: {
      "--Slider-markBackground": "var(--Slider-trackColor)"
    }
  }, ownerState.size === "sm" && {
    "--Slider-markSize": "2px",
    "--Slider-trackSize": "4px",
    "--Slider-thumbSize": "10px",
    "--Slider-valueLabelArrowSize": "6px"
  }, ownerState.size === "md" && {
    "--Slider-markSize": "2px",
    "--Slider-trackSize": "6px",
    "--Slider-thumbSize": "14px",
    "--Slider-valueLabelArrowSize": "8px"
  }, ownerState.size === "lg" && {
    "--Slider-markSize": "3px",
    "--Slider-trackSize": "10px",
    "--Slider-thumbSize": "20px",
    "--Slider-valueLabelArrowSize": "10px"
  }, {
    "--Slider-thumbRadius": "calc(var(--Slider-thumbSize) / 2)",
    "--Slider-thumbWidth": "var(--Slider-thumbSize)"
  }, getColorVariables(), {
    "&:hover": _extends({}, getColorVariables({
      state: "Hover"
    })),
    "&:active": _extends({}, getColorVariables({
      state: "Active"
    })),
    [`&.${sliderClasses_default.disabled}`]: _extends({
      pointerEvents: "none",
      color: theme.vars.palette.text.tertiary
    }, getColorVariables({
      state: "Disabled"
    })),
    boxSizing: "border-box",
    display: "inline-block",
    position: "relative",
    cursor: "pointer",
    touchAction: "none",
    WebkitTapHighlightColor: "transparent"
  }, ownerState.orientation === "horizontal" && {
    padding: "calc(var(--Slider-size) / 2) 0",
    width: "100%"
  }, ownerState.orientation === "vertical" && {
    padding: "0 calc(var(--Slider-size) / 2)",
    height: "100%"
  }, {
    "@media print": {
      colorAdjust: "exact"
    }
  })];
});
var SliderRail = styled_default("span", {
  name: "JoySlider",
  slot: "Rail",
  overridesResolver: (props, styles) => styles.rail
})(({
  ownerState
}) => [_extends({
  display: "block",
  position: "absolute",
  backgroundColor: ownerState.track === "inverted" ? "var(--Slider-trackBackground)" : "var(--Slider-railBackground)",
  border: ownerState.track === "inverted" ? "var(--variant-borderWidth, 0px) solid var(--Slider-trackBorderColor)" : "initial",
  borderRadius: "var(--Slider-trackRadius)"
}, ownerState.orientation === "horizontal" && {
  height: "var(--Slider-trackSize)",
  top: "50%",
  left: 0,
  right: 0,
  transform: "translateY(-50%)"
}, ownerState.orientation === "vertical" && {
  width: "var(--Slider-trackSize)",
  top: 0,
  bottom: 0,
  left: "50%",
  transform: "translateX(-50%)"
}, ownerState.track === "inverted" && {
  opacity: 1
})]);
var SliderTrack = styled_default("span", {
  name: "JoySlider",
  slot: "Track",
  overridesResolver: (props, styles) => styles.track
})(({
  ownerState
}) => {
  return [_extends({
    display: "block",
    position: "absolute",
    color: "var(--Slider-trackColor)",
    border: ownerState.track === "inverted" ? "initial" : "var(--variant-borderWidth, 0px) solid var(--Slider-trackBorderColor)",
    backgroundColor: ownerState.track === "inverted" ? "var(--Slider-railBackground)" : "var(--Slider-trackBackground)"
  }, ownerState.orientation === "horizontal" && {
    height: "var(--Slider-trackSize)",
    top: "50%",
    transform: "translateY(-50%)",
    borderRadius: "var(--Slider-trackRadius) 0 0 var(--Slider-trackRadius)"
  }, ownerState.orientation === "vertical" && {
    width: "var(--Slider-trackSize)",
    left: "50%",
    transform: "translateX(-50%)",
    borderRadius: "0 0 var(--Slider-trackRadius) var(--Slider-trackRadius)"
  }, ownerState.track === false && {
    display: "none"
  })];
});
var SliderThumb = styled_default("span", {
  name: "JoySlider",
  slot: "Thumb",
  overridesResolver: (props, styles) => styles.thumb
})(({
  ownerState,
  theme
}) => _extends({
  position: "absolute",
  boxSizing: "border-box",
  outline: 0,
  display: "flex",
  alignItems: "center",
  justifyContent: "center",
  width: "var(--Slider-thumbWidth)",
  height: "var(--Slider-thumbSize)",
  border: "var(--variant-borderWidth, 0px) solid var(--Slider-trackBorderColor)",
  borderRadius: "var(--Slider-thumbRadius)",
  boxShadow: "var(--Slider-thumbShadow)",
  color: "var(--Slider-thumbColor)",
  backgroundColor: "var(--Slider-thumbBackground)",
  [theme.focus.selector]: theme.focus.default
}, ownerState.orientation === "horizontal" && {
  top: "50%",
  transform: "translate(-50%, -50%)"
}, ownerState.orientation === "vertical" && {
  left: "50%",
  transform: "translate(-50%, 50%)"
}, {
  "&::before": {
    boxSizing: "border-box",
    content: '""',
    display: "block",
    position: "absolute",
    background: "transparent",
    top: 0,
    left: 0,
    width: "100%",
    height: "100%",
    border: "2px solid",
    borderColor: "var(--Slider-thumbColor)",
    borderRadius: "inherit"
  }
}));
var SliderMark = styled_default("span", {
  name: "JoySlider",
  slot: "Mark",
  overridesResolver: (props, styles) => styles.mark
})(({
  ownerState
}) => {
  return _extends({
    position: "absolute",
    width: "var(--Slider-markSize)",
    height: "var(--Slider-markSize)",
    borderRadius: "var(--Slider-markSize)",
    backgroundColor: "var(--Slider-markBackground)"
  }, ownerState.orientation === "horizontal" && _extends({
    top: "50%",
    transform: `translate(calc(var(--Slider-markSize) / -2), -50%)`
  }, ownerState.percent === 0 && {
    transform: `translate(min(var(--Slider-markSize), 3px), -50%)`
  }, ownerState.percent === 100 && {
    transform: `translate(calc(var(--Slider-markSize) * -1 - min(var(--Slider-markSize), 3px)), -50%)`
  }), ownerState.orientation === "vertical" && _extends({
    left: "50%",
    transform: "translate(-50%, calc(var(--Slider-markSize) / 2))"
  }, ownerState.percent === 0 && {
    transform: `translate(-50%, calc(min(var(--Slider-markSize), 3px) * -1))`
  }, ownerState.percent === 100 && {
    transform: `translate(-50%, calc(var(--Slider-markSize) * 1 + min(var(--Slider-markSize), 3px)))`
  }));
});
var SliderValueLabel = styled_default("span", {
  name: "JoySlider",
  slot: "ValueLabel",
  overridesResolver: (props, styles) => styles.valueLabel
})(({
  theme,
  ownerState
}) => _extends({}, ownerState.size === "sm" && {
  fontSize: theme.fontSize.xs,
  lineHeight: theme.lineHeight.md,
  paddingInline: "0.25rem",
  minWidth: "20px"
}, ownerState.size === "md" && {
  fontSize: theme.fontSize.sm,
  lineHeight: theme.lineHeight.md,
  paddingInline: "0.375rem",
  minWidth: "24px"
}, ownerState.size === "lg" && {
  fontSize: theme.fontSize.md,
  lineHeight: theme.lineHeight.md,
  paddingInline: "0.5rem",
  minWidth: "28px"
}, {
  zIndex: 1,
  display: "flex",
  alignItems: "center",
  justifyContent: "center",
  whiteSpace: "nowrap",
  fontFamily: theme.vars.fontFamily.body,
  fontWeight: theme.vars.fontWeight.md,
  bottom: 0,
  transformOrigin: "bottom center",
  transform: "translateY(calc((var(--Slider-thumbSize) + var(--Slider-valueLabelArrowSize)) * -1)) scale(0)",
  position: "absolute",
  backgroundColor: theme.vars.palette.background.tooltip,
  boxShadow: theme.shadow.sm,
  borderRadius: theme.vars.radius.xs,
  color: "#fff",
  "&::before": {
    display: "var(--Slider-valueLabelArrowDisplay)",
    position: "absolute",
    content: '""',
    color: theme.vars.palette.background.tooltip,
    bottom: 0,
    border: "calc(var(--Slider-valueLabelArrowSize) / 2) solid",
    borderColor: "currentColor",
    borderRightColor: "transparent",
    borderBottomColor: "transparent",
    borderLeftColor: "transparent",
    left: "50%",
    transform: "translate(-50%, 100%)",
    backgroundColor: "transparent"
  },
  [`&.${sliderClasses_default.valueLabelOpen}`]: {
    transform: "translateY(calc((var(--Slider-thumbSize) + var(--Slider-valueLabelArrowSize)) * -1)) scale(1)"
  }
}));
var SliderMarkLabel = styled_default("span", {
  name: "JoySlider",
  slot: "MarkLabel",
  overridesResolver: (props, styles) => styles.markLabel
})(({
  theme,
  ownerState
}) => _extends({
  fontFamily: theme.vars.fontFamily.body
}, ownerState.size === "sm" && {
  fontSize: theme.vars.fontSize.xs
}, ownerState.size === "md" && {
  fontSize: theme.vars.fontSize.sm
}, ownerState.size === "lg" && {
  fontSize: theme.vars.fontSize.md
}, {
  color: theme.palette.text.tertiary,
  position: "absolute",
  whiteSpace: "nowrap"
}, ownerState.orientation === "horizontal" && {
  top: "calc(50% + 4px + (max(var(--Slider-trackSize), var(--Slider-thumbSize)) / 2))",
  transform: "translateX(-50%)"
}, ownerState.orientation === "vertical" && {
  left: "calc(50% + 8px + (max(var(--Slider-trackSize), var(--Slider-thumbSize)) / 2))",
  transform: "translateY(50%)"
}));
var SliderInput = styled_default("input", {
  name: "JoySlider",
  slot: "Input",
  overridesResolver: (props, styles) => styles.input
})({});
var Slider = React66.forwardRef(function Slider2(inProps, ref) {
  const props = useThemeProps({
    props: inProps,
    name: "JoySlider"
  });
  const {
    "aria-label": ariaLabel,
    "aria-valuetext": ariaValuetext,
    className,
    classes: classesProp,
    disableSwap = false,
    disabled = false,
    defaultValue,
    getAriaLabel,
    getAriaValueText,
    marks: marksProp = false,
    max = 100,
    min = 0,
    orientation = "horizontal",
    scale = Identity,
    step = 1,
    track = "normal",
    valueLabelDisplay = "off",
    valueLabelFormat = Identity,
    isRtl = false,
    color: colorProp = "primary",
    size = "md",
    variant = "solid",
    component,
    slots = {},
    slotProps = {}
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded49);
  const {
    getColor
  } = useColorInversion("solid");
  const color = getColor(inProps.color, colorProp);
  const ownerState = _extends({}, props, {
    marks: marksProp,
    classes: classesProp,
    disabled,
    defaultValue,
    isRtl,
    max,
    min,
    orientation,
    scale,
    step,
    track,
    valueLabelDisplay,
    valueLabelFormat,
    color,
    size,
    variant
  });
  const {
    axisProps,
    getRootProps,
    getHiddenInputProps,
    getThumbProps,
    open,
    active,
    axis,
    focusedThumbIndex,
    range,
    dragging,
    marks,
    values,
    trackOffset,
    trackLeap
  } = useSlider(_extends({}, ownerState, {
    rootRef: ref
  }));
  ownerState.marked = marks.length > 0 && marks.some((mark) => mark.label);
  ownerState.dragging = dragging;
  const trackStyle = _extends({}, axisProps[axis].offset(trackOffset), axisProps[axis].leap(trackLeap));
  const classes = useUtilityClasses44(ownerState);
  const externalForwardedProps = _extends({}, other, {
    component,
    slots,
    slotProps
  });
  const [SlotRoot, rootProps] = useSlot("root", {
    ref,
    className: clsx_m_default(classes.root, className),
    elementType: SliderRoot,
    externalForwardedProps,
    getSlotProps: getRootProps,
    ownerState
  });
  const [SlotRail, railProps] = useSlot("rail", {
    className: classes.rail,
    elementType: SliderRail,
    externalForwardedProps,
    ownerState
  });
  const [SlotTrack, trackProps] = useSlot("track", {
    additionalProps: {
      style: trackStyle
    },
    className: classes.track,
    elementType: SliderTrack,
    externalForwardedProps,
    ownerState
  });
  const [SlotMark, markProps] = useSlot("mark", {
    className: classes.mark,
    elementType: SliderMark,
    externalForwardedProps,
    ownerState
  });
  const [SlotMarkLabel, markLabelProps] = useSlot("markLabel", {
    className: classes.markLabel,
    elementType: SliderMarkLabel,
    externalForwardedProps,
    ownerState,
    additionalProps: {
      "aria-hidden": true
    }
  });
  const [SlotThumb, thumbProps] = useSlot("thumb", {
    className: classes.thumb,
    elementType: SliderThumb,
    externalForwardedProps,
    getSlotProps: getThumbProps,
    ownerState
  });
  const [SlotInput, inputProps] = useSlot("input", {
    className: classes.input,
    elementType: SliderInput,
    externalForwardedProps,
    getSlotProps: getHiddenInputProps,
    ownerState
  });
  const [SlotValueLabel, valueLabelProps] = useSlot("valueLabel", {
    className: classes.valueLabel,
    elementType: SliderValueLabel,
    externalForwardedProps,
    ownerState
  });
  return (0, import_jsx_runtime65.jsxs)(SlotRoot, _extends({}, rootProps, {
    children: [(0, import_jsx_runtime64.jsx)(SlotRail, _extends({}, railProps)), (0, import_jsx_runtime64.jsx)(SlotTrack, _extends({}, trackProps)), marks.filter((mark) => mark.value >= min && mark.value <= max).map((mark, index) => {
      const percent = valueToPercent(mark.value, min, max);
      const style = axisProps[axis].offset(percent);
      let markActive;
      if (track === false) {
        markActive = values.indexOf(mark.value) !== -1;
      } else {
        markActive = track === "normal" && (range ? mark.value >= values[0] && mark.value <= values[values.length - 1] : mark.value <= values[0]) || track === "inverted" && (range ? mark.value <= values[0] || mark.value >= values[values.length - 1] : mark.value >= values[0]);
      }
      return (0, import_jsx_runtime65.jsxs)(React66.Fragment, {
        children: [(0, import_jsx_runtime64.jsx)(SlotMark, _extends({
          "data-index": index
        }, markProps, !isHostComponent(SlotMark) && {
          ownerState: _extends({}, markProps.ownerState, {
            percent
          })
        }, {
          style: _extends({}, style, markProps.style),
          className: clsx_m_default(markProps.className, markActive && classes.markActive)
        })), mark.label != null ? (0, import_jsx_runtime64.jsx)(SlotMarkLabel, _extends({
          "data-index": index
        }, markLabelProps, {
          style: _extends({}, style, markLabelProps.style),
          className: clsx_m_default(classes.markLabel, markLabelProps.className, markActive && classes.markLabelActive),
          children: mark.label
        })) : null]
      }, mark.value);
    }), values.map((value, index) => {
      const percent = valueToPercent(value, min, max);
      const style = axisProps[axis].offset(percent);
      return (0, import_jsx_runtime65.jsxs)(SlotThumb, _extends({
        "data-index": index
      }, thumbProps, {
        className: clsx_m_default(thumbProps.className, active === index && classes.active, focusedThumbIndex === index && classes.focusVisible),
        style: _extends({}, style, {
          pointerEvents: disableSwap && active !== index ? "none" : void 0
        }, thumbProps.style),
        children: [(0, import_jsx_runtime64.jsx)(SlotInput, _extends({
          "data-index": index,
          "aria-label": getAriaLabel ? getAriaLabel(index) : ariaLabel,
          "aria-valuenow": scale(value),
          "aria-valuetext": getAriaValueText ? getAriaValueText(scale(value), index) : ariaValuetext,
          value: values[index]
        }, inputProps)), valueLabelDisplay !== "off" ? (0, import_jsx_runtime64.jsx)(SlotValueLabel, _extends({}, valueLabelProps, {
          className: clsx_m_default(valueLabelProps.className, (open === index || active === index || valueLabelDisplay === "on") && classes.valueLabelOpen),
          children: typeof valueLabelFormat === "function" ? valueLabelFormat(scale(value), index) : valueLabelFormat
        })) : null]
      }), index);
    })]
  }));
});
true ? Slider.propTypes = {
  "aria-label": import_prop_types47.default.string,
  "aria-valuetext": import_prop_types47.default.string,
  children: import_prop_types47.default.node,
  classes: import_prop_types47.default.object,
  className: import_prop_types47.default.string,
  color: import_prop_types47.default.oneOfType([import_prop_types47.default.oneOf(["danger", "info", "neutral", "primary", "success", "warning"]), import_prop_types47.default.string]),
  component: import_prop_types47.default.elementType,
  defaultValue: import_prop_types47.default.oneOfType([import_prop_types47.default.arrayOf(import_prop_types47.default.number), import_prop_types47.default.number]),
  disabled: import_prop_types47.default.bool,
  disableSwap: import_prop_types47.default.bool,
  getAriaLabel: import_prop_types47.default.func,
  getAriaValueText: import_prop_types47.default.func,
  isRtl: import_prop_types47.default.bool,
  marks: import_prop_types47.default.oneOfType([import_prop_types47.default.arrayOf(import_prop_types47.default.shape({
    label: import_prop_types47.default.node,
    value: import_prop_types47.default.number.isRequired
  })), import_prop_types47.default.bool]),
  max: import_prop_types47.default.number,
  min: import_prop_types47.default.number,
  name: import_prop_types47.default.string,
  onChange: import_prop_types47.default.func,
  onChangeCommitted: import_prop_types47.default.func,
  onMouseDown: import_prop_types47.default.func,
  orientation: import_prop_types47.default.oneOf(["horizontal", "vertical"]),
  scale: import_prop_types47.default.func,
  size: import_prop_types47.default.oneOfType([import_prop_types47.default.oneOf(["sm", "md", "lg"]), import_prop_types47.default.string]),
  slotProps: import_prop_types47.default.shape({
    input: import_prop_types47.default.oneOfType([import_prop_types47.default.func, import_prop_types47.default.object]),
    mark: import_prop_types47.default.oneOfType([import_prop_types47.default.func, import_prop_types47.default.object]),
    markLabel: import_prop_types47.default.oneOfType([import_prop_types47.default.func, import_prop_types47.default.object]),
    rail: import_prop_types47.default.oneOfType([import_prop_types47.default.func, import_prop_types47.default.object]),
    root: import_prop_types47.default.oneOfType([import_prop_types47.default.func, import_prop_types47.default.object]),
    thumb: import_prop_types47.default.oneOfType([import_prop_types47.default.func, import_prop_types47.default.object]),
    track: import_prop_types47.default.oneOfType([import_prop_types47.default.func, import_prop_types47.default.object]),
    valueLabel: import_prop_types47.default.oneOfType([import_prop_types47.default.func, import_prop_types47.default.object])
  }),
  slots: import_prop_types47.default.shape({
    input: import_prop_types47.default.elementType,
    mark: import_prop_types47.default.elementType,
    markLabel: import_prop_types47.default.elementType,
    rail: import_prop_types47.default.elementType,
    root: import_prop_types47.default.elementType,
    thumb: import_prop_types47.default.elementType,
    track: import_prop_types47.default.elementType,
    valueLabel: import_prop_types47.default.elementType
  }),
  step: import_prop_types47.default.number,
  sx: import_prop_types47.default.oneOfType([import_prop_types47.default.arrayOf(import_prop_types47.default.oneOfType([import_prop_types47.default.func, import_prop_types47.default.object, import_prop_types47.default.bool])), import_prop_types47.default.func, import_prop_types47.default.object]),
  tabIndex: import_prop_types47.default.number,
  track: import_prop_types47.default.oneOf(["inverted", "normal", false]),
  value: import_prop_types47.default.oneOfType([import_prop_types47.default.arrayOf(import_prop_types47.default.number), import_prop_types47.default.number]),
  valueLabelDisplay: import_prop_types47.default.oneOf(["auto", "off", "on"]),
  valueLabelFormat: import_prop_types47.default.oneOfType([import_prop_types47.default.func, import_prop_types47.default.string]),
  variant: import_prop_types47.default.oneOfType([import_prop_types47.default.oneOf(["outlined", "plain", "soft", "solid"]), import_prop_types47.default.string])
} : void 0;
var Slider_default = Slider;

// node_modules/@mui/joy/Stack/Stack.js
init_esm2();
var import_prop_types48 = __toESM(require_prop_types());
var Stack = createStack({
  createStyledComponent: styled_default("div", {
    name: "JoyStack",
    slot: "Root",
    overridesResolver: (props, styles) => styles.root
  }),
  useThemeProps: (inProps) => useThemeProps({
    props: inProps,
    name: "JoyStack"
  })
});
true ? Stack.propTypes = {
  children: import_prop_types48.default.node,
  component: import_prop_types48.default.elementType,
  direction: import_prop_types48.default.oneOfType([import_prop_types48.default.oneOf(["column-reverse", "column", "row-reverse", "row"]), import_prop_types48.default.arrayOf(import_prop_types48.default.oneOf(["column-reverse", "column", "row-reverse", "row"])), import_prop_types48.default.object]),
  divider: import_prop_types48.default.node,
  spacing: import_prop_types48.default.oneOfType([import_prop_types48.default.arrayOf(import_prop_types48.default.oneOfType([import_prop_types48.default.number, import_prop_types48.default.string])), import_prop_types48.default.number, import_prop_types48.default.object, import_prop_types48.default.string]),
  sx: import_prop_types48.default.oneOfType([import_prop_types48.default.arrayOf(import_prop_types48.default.oneOfType([import_prop_types48.default.func, import_prop_types48.default.object, import_prop_types48.default.bool])), import_prop_types48.default.func, import_prop_types48.default.object]),
  useFlexGap: import_prop_types48.default.bool
} : void 0;
var Stack_default = Stack;

// node_modules/@mui/joy/Stack/stackClasses.js
function getStackUtilityClass(slot) {
  return generateUtilityClass2("MuiStack", slot);
}
var stackClasses = generateUtilityClasses2("MuiStack", ["root"]);
var stackClasses_default = stackClasses;

// node_modules/@mui/joy/Switch/Switch.js
init_objectWithoutPropertiesLoose();
init_extends();
var React67 = __toESM(require_react());
var import_prop_types49 = __toESM(require_prop_types());
init_esm();
init_composeClasses();
init_useSwitch();
var import_jsx_runtime66 = __toESM(require_jsx_runtime());
var import_jsx_runtime67 = __toESM(require_jsx_runtime());
var _excluded50 = ["checked", "defaultChecked", "disabled", "onBlur", "onChange", "onFocus", "onFocusVisible", "readOnly", "required", "id", "color", "variant", "size", "startDecorator", "endDecorator", "component", "slots", "slotProps"];
var useUtilityClasses45 = (ownerState) => {
  const {
    checked,
    disabled,
    focusVisible,
    readOnly,
    color,
    variant
  } = ownerState;
  const slots = {
    root: ["root", checked && "checked", disabled && "disabled", focusVisible && "focusVisible", readOnly && "readOnly", variant && `variant${capitalize(variant)}`, color && `color${capitalize(color)}`],
    thumb: ["thumb", checked && "checked"],
    track: ["track", checked && "checked"],
    action: ["action", focusVisible && "focusVisible"],
    input: ["input"],
    startDecorator: ["startDecorator"],
    endDecorator: ["endDecorator"]
  };
  return composeClasses(slots, getSwitchUtilityClass, {});
};
var switchColorVariables = ({
  theme,
  ownerState
}) => (data = {}) => {
  var _theme$variants;
  const styles = ((_theme$variants = theme.variants[`${ownerState.variant}${data.state || ""}`]) == null ? void 0 : _theme$variants[ownerState.color]) || {};
  return {
    "--Switch-trackBackground": styles.backgroundColor,
    "--Switch-trackColor": styles.color,
    "--Switch-trackBorderColor": ownerState.variant === "outlined" ? styles.borderColor : "currentColor",
    "--Switch-thumbBackground": styles.color,
    "--Switch-thumbColor": styles.backgroundColor
  };
};
var SwitchRoot = styled_default("div", {
  name: "JoySwitch",
  slot: "Root",
  overridesResolver: (props, styles) => styles.root
})(({
  theme,
  ownerState
}) => {
  var _theme$variants2, _theme$variants3;
  const getColorVariables = switchColorVariables({
    theme,
    ownerState
  });
  return _extends({
    "--variant-borderWidth": (_theme$variants2 = theme.variants[ownerState.variant]) == null ? void 0 : (_theme$variants3 = _theme$variants2[ownerState.color]) == null ? void 0 : _theme$variants3["--variant-borderWidth"],
    "--Switch-trackRadius": theme.vars.radius.lg,
    "--Switch-thumbShadow": ownerState.variant === "soft" ? "none" : "0 0 0 1px var(--Switch-trackBackground)"
  }, ownerState.size === "sm" && {
    "--Switch-trackWidth": "40px",
    "--Switch-trackHeight": "20px",
    "--Switch-thumbSize": "12px",
    "--Switch-gap": "6px",
    fontSize: theme.vars.fontSize.sm
  }, ownerState.size === "md" && {
    "--Switch-trackWidth": "48px",
    "--Switch-trackHeight": "24px",
    "--Switch-thumbSize": "16px",
    "--Switch-gap": "8px",
    fontSize: theme.vars.fontSize.md
  }, ownerState.size === "lg" && {
    "--Switch-trackWidth": "64px",
    "--Switch-trackHeight": "32px",
    "--Switch-thumbSize": "24px",
    "--Switch-gap": "12px"
  }, {
    "--unstable_paddingBlock": `max((var(--Switch-trackHeight) - 2 * var(--variant-borderWidth, 0px) - var(--Switch-thumbSize)) / 2, 0px)`,
    "--Switch-thumbRadius": `max(var(--Switch-trackRadius) - var(--unstable_paddingBlock), min(var(--unstable_paddingBlock) / 2, var(--Switch-trackRadius) / 2))`,
    "--Switch-thumbWidth": "var(--Switch-thumbSize)",
    "--Switch-thumbOffset": `max((var(--Switch-trackHeight) - var(--Switch-thumbSize)) / 2, 0px)`
  }, getColorVariables(), {
    "&:hover": _extends({}, getColorVariables({
      state: "Hover"
    })),
    [`&.${switchClasses_default.checked}`]: _extends({}, getColorVariables(), {
      "&:hover": _extends({}, getColorVariables({
        state: "Hover"
      }))
    }),
    [`&.${switchClasses_default.disabled}`]: _extends({
      pointerEvents: "none",
      color: theme.vars.palette.text.tertiary
    }, getColorVariables({
      state: "Disabled"
    })),
    display: "inline-flex",
    alignItems: "center",
    alignSelf: "center",
    fontFamily: theme.vars.fontFamily.body,
    position: "relative",
    padding: "calc((var(--Switch-thumbSize) / 2) - (var(--Switch-trackHeight) / 2)) calc(-1 * var(--Switch-thumbOffset))",
    backgroundColor: "initial",
    border: "none",
    margin: "var(--unstable_Switch-margin)"
  });
});
var SwitchAction = styled_default("div", {
  name: "JoySwitch",
  slot: "Action",
  overridesResolver: (props, styles) => styles.action
})(({
  theme
}) => ({
  borderRadius: "var(--Switch-trackRadius)",
  position: "absolute",
  top: 0,
  left: 0,
  bottom: 0,
  right: 0,
  [theme.focus.selector]: theme.focus.default
}));
var SwitchInput = styled_default("input", {
  name: "JoySwitch",
  slot: "Input",
  overridesResolver: (props, styles) => styles.input
})({
  margin: 0,
  height: "100%",
  width: "100%",
  opacity: 0,
  position: "absolute",
  cursor: "pointer"
});
var SwitchTrack = styled_default("span", {
  name: "JoySwitch",
  slot: "Track",
  overridesResolver: (props, styles) => styles.track
})(({
  theme,
  ownerState
}) => _extends({
  position: "relative",
  color: "var(--Switch-trackColor)",
  height: "var(--Switch-trackHeight)",
  width: "var(--Switch-trackWidth)",
  display: "flex",
  flexShrink: 0,
  justifyContent: "space-between",
  alignItems: "center",
  boxSizing: "border-box",
  border: "var(--variant-borderWidth, 0px) solid",
  borderColor: "var(--Switch-trackBorderColor)",
  backgroundColor: "var(--Switch-trackBackground)",
  borderRadius: "var(--Switch-trackRadius)",
  fontFamily: theme.vars.fontFamily.body
}, ownerState.size === "sm" && {
  fontSize: theme.vars.fontSize.xs
}, ownerState.size === "md" && {
  fontSize: theme.vars.fontSize.sm
}, ownerState.size === "lg" && {
  fontSize: theme.vars.fontSize.md
}));
var SwitchThumb = styled_default("span", {
  name: "JoySwitch",
  slot: "Thumb",
  overridesResolver: (props, styles) => styles.thumb
})({
  "--Icon-fontSize": "calc(var(--Switch-thumbSize) * 0.75)",
  display: "inline-flex",
  justifyContent: "center",
  alignItems: "center",
  position: "absolute",
  top: "50%",
  left: "calc(50% - var(--Switch-trackWidth) / 2 + var(--Switch-thumbWidth) / 2 + var(--Switch-thumbOffset))",
  transform: "translate(-50%, -50%)",
  width: "var(--Switch-thumbWidth)",
  height: "var(--Switch-thumbSize)",
  borderRadius: "var(--Switch-thumbRadius)",
  boxShadow: "var(--Switch-thumbShadow)",
  color: "var(--Switch-thumbColor)",
  backgroundColor: "var(--Switch-thumbBackground)",
  [`&.${switchClasses_default.checked}`]: {
    left: "calc(50% + var(--Switch-trackWidth) / 2 - var(--Switch-thumbWidth) / 2 - var(--Switch-thumbOffset))"
  }
});
var SwitchStartDecorator = styled_default("span", {
  name: "JoySwitch",
  slot: "StartDecorator",
  overridesResolver: (props, styles) => styles.startDecorator
})({
  display: "inline-flex",
  marginInlineEnd: "var(--Switch-gap)"
});
var SwitchEndDecorator = styled_default("span", {
  name: "JoySwitch",
  slot: "EndDecorator",
  overridesResolver: (props, styles) => styles.endDecorator
})({
  display: "inline-flex",
  marginInlineStart: "var(--Switch-gap)"
});
var Switch = React67.forwardRef(function Switch2(inProps, ref) {
  var _ref, _inProps$disabled, _ref2, _inProps$size, _formControl$color;
  const props = useThemeProps({
    props: inProps,
    name: "JoySwitch"
  });
  const {
    checked: checkedProp,
    defaultChecked,
    disabled: disabledExternalProp,
    onBlur,
    onChange,
    onFocus,
    onFocusVisible,
    readOnly: readOnlyProp,
    id,
    color: colorProp,
    variant = "solid",
    size: sizeProp = "md",
    startDecorator,
    endDecorator,
    component,
    slots = {},
    slotProps = {}
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded50);
  const formControl = React67.useContext(FormControlContext_default);
  if (true) {
    const registerEffect = formControl == null ? void 0 : formControl.registerEffect;
    React67.useEffect(() => {
      if (registerEffect) {
        return registerEffect();
      }
      return void 0;
    }, [registerEffect]);
  }
  const disabledProp = (_ref = (_inProps$disabled = inProps.disabled) != null ? _inProps$disabled : formControl == null ? void 0 : formControl.disabled) != null ? _ref : disabledExternalProp;
  const size = (_ref2 = (_inProps$size = inProps.size) != null ? _inProps$size : formControl == null ? void 0 : formControl.size) != null ? _ref2 : sizeProp;
  const {
    getColor
  } = useColorInversion(variant);
  const color = getColor(inProps.color, formControl != null && formControl.error ? "danger" : (_formControl$color = formControl == null ? void 0 : formControl.color) != null ? _formControl$color : colorProp);
  const useSwitchProps = {
    checked: checkedProp,
    defaultChecked,
    disabled: disabledProp,
    onBlur,
    onChange,
    onFocus,
    onFocusVisible,
    readOnly: readOnlyProp
  };
  const {
    getInputProps,
    checked,
    disabled,
    focusVisible,
    readOnly
  } = useSwitch(useSwitchProps);
  const ownerState = _extends({}, props, {
    id,
    checked,
    disabled,
    focusVisible,
    readOnly,
    color: checked ? color || "primary" : color || "neutral",
    variant,
    size
  });
  const classes = useUtilityClasses45(ownerState);
  const externalForwardedProps = _extends({}, other, {
    component,
    slots,
    slotProps
  });
  const [SlotRoot, rootProps] = useSlot("root", {
    ref,
    className: classes.root,
    elementType: SwitchRoot,
    externalForwardedProps,
    ownerState
  });
  const [SlotStartDecorator, startDecoratorProps] = useSlot("startDecorator", {
    additionalProps: {
      "aria-hidden": true
    },
    className: classes.startDecorator,
    elementType: SwitchStartDecorator,
    externalForwardedProps,
    ownerState
  });
  const [SlotEndDecorator, endDecoratorProps] = useSlot("endDecorator", {
    additionalProps: {
      "aria-hidden": true
    },
    className: classes.endDecorator,
    elementType: SwitchEndDecorator,
    externalForwardedProps,
    ownerState
  });
  const [SlotTrack, trackProps] = useSlot("track", {
    className: classes.track,
    elementType: SwitchTrack,
    externalForwardedProps,
    ownerState
  });
  const [SlotThumb, thumbProps] = useSlot("thumb", {
    className: classes.thumb,
    elementType: SwitchThumb,
    externalForwardedProps,
    ownerState
  });
  const [SlotAction, actionProps] = useSlot("action", {
    className: classes.action,
    elementType: SwitchAction,
    externalForwardedProps,
    ownerState
  });
  const [SlotInput, inputProps] = useSlot("input", {
    additionalProps: {
      id: id != null ? id : formControl == null ? void 0 : formControl.htmlFor,
      "aria-describedby": formControl == null ? void 0 : formControl["aria-describedby"]
    },
    className: classes.input,
    elementType: SwitchInput,
    externalForwardedProps,
    getSlotProps: getInputProps,
    ownerState
  });
  return (0, import_jsx_runtime67.jsxs)(SlotRoot, _extends({}, rootProps, {
    children: [startDecorator && (0, import_jsx_runtime66.jsx)(SlotStartDecorator, _extends({}, startDecoratorProps, {
      children: typeof startDecorator === "function" ? startDecorator(ownerState) : startDecorator
    })), (0, import_jsx_runtime67.jsxs)(SlotTrack, _extends({}, trackProps, {
      children: [trackProps == null ? void 0 : trackProps.children, (0, import_jsx_runtime66.jsx)(SlotThumb, _extends({}, thumbProps))]
    })), (0, import_jsx_runtime66.jsx)(SlotAction, _extends({}, actionProps, {
      children: (0, import_jsx_runtime66.jsx)(SlotInput, _extends({}, inputProps))
    })), endDecorator && (0, import_jsx_runtime66.jsx)(SlotEndDecorator, _extends({}, endDecoratorProps, {
      children: typeof endDecorator === "function" ? endDecorator(ownerState) : endDecorator
    }))]
  }));
});
true ? Switch.propTypes = {
  checked: import_prop_types49.default.bool,
  children: import_prop_types49.default.node,
  color: import_prop_types49.default.oneOfType([import_prop_types49.default.oneOf(["danger", "info", "primary", "success", "warning"]), import_prop_types49.default.string]),
  component: import_prop_types49.default.elementType,
  defaultChecked: import_prop_types49.default.bool,
  disabled: import_prop_types49.default.bool,
  endDecorator: import_prop_types49.default.oneOfType([import_prop_types49.default.node, import_prop_types49.default.func]),
  id: import_prop_types49.default.string,
  onBlur: import_prop_types49.default.func,
  onChange: import_prop_types49.default.func,
  onFocus: import_prop_types49.default.func,
  onFocusVisible: import_prop_types49.default.func,
  readOnly: import_prop_types49.default.bool,
  required: import_prop_types49.default.bool,
  size: import_prop_types49.default.oneOfType([import_prop_types49.default.oneOf(["sm", "md", "lg"]), import_prop_types49.default.string]),
  slotProps: import_prop_types49.default.shape({
    action: import_prop_types49.default.oneOfType([import_prop_types49.default.func, import_prop_types49.default.object]),
    endDecorator: import_prop_types49.default.oneOfType([import_prop_types49.default.func, import_prop_types49.default.object]),
    input: import_prop_types49.default.oneOfType([import_prop_types49.default.func, import_prop_types49.default.object]),
    root: import_prop_types49.default.oneOfType([import_prop_types49.default.func, import_prop_types49.default.object]),
    startDecorator: import_prop_types49.default.oneOfType([import_prop_types49.default.func, import_prop_types49.default.object]),
    thumb: import_prop_types49.default.oneOfType([import_prop_types49.default.func, import_prop_types49.default.object]),
    track: import_prop_types49.default.oneOfType([import_prop_types49.default.func, import_prop_types49.default.object])
  }),
  slots: import_prop_types49.default.shape({
    action: import_prop_types49.default.elementType,
    endDecorator: import_prop_types49.default.elementType,
    input: import_prop_types49.default.elementType,
    root: import_prop_types49.default.elementType,
    startDecorator: import_prop_types49.default.elementType,
    thumb: import_prop_types49.default.elementType,
    track: import_prop_types49.default.elementType
  }),
  startDecorator: import_prop_types49.default.oneOfType([import_prop_types49.default.node, import_prop_types49.default.func]),
  sx: import_prop_types49.default.oneOfType([import_prop_types49.default.arrayOf(import_prop_types49.default.oneOfType([import_prop_types49.default.func, import_prop_types49.default.object, import_prop_types49.default.bool])), import_prop_types49.default.func, import_prop_types49.default.object]),
  variant: import_prop_types49.default.oneOfType([import_prop_types49.default.oneOf(["outlined", "plain", "soft", "solid"]), import_prop_types49.default.string])
} : void 0;
var Switch_default = Switch;

// node_modules/@mui/joy/Tab/Tab.js
init_objectWithoutPropertiesLoose();
init_extends();
var React68 = __toESM(require_react());
var import_prop_types50 = __toESM(require_prop_types());
init_esm();
init_base();
init_useTab();

// node_modules/@mui/joy/Tab/tabClasses.js
function getTabUtilityClass(slot) {
  return generateUtilityClass2("MuiTab", slot);
}
var tabListClasses = generateUtilityClasses2("MuiTab", ["root", "disabled", "focusVisible", "selected", "horizontal", "vertical", "colorPrimary", "colorNeutral", "colorDanger", "colorInfo", "colorSuccess", "colorWarning", "colorContext", "variantPlain", "variantOutlined", "variantSoft", "variantSolid"]);
var tabClasses_default = tabListClasses;

// node_modules/@mui/joy/Tab/Tab.js
var import_jsx_runtime68 = __toESM(require_jsx_runtime());
var _excluded51 = ["action", "children", "value", "disabled", "onChange", "onClick", "onFocus", "component", "orientation", "variant", "color", "slots", "slotProps"];
var useUtilityClasses46 = (ownerState) => {
  const {
    selected,
    disabled,
    focusVisible,
    variant,
    color,
    orientation
  } = ownerState;
  const slots = {
    root: ["root", orientation, disabled && "disabled", focusVisible && "focusVisible", selected && "selected", variant && `variant${capitalize(variant)}`, color && `color${capitalize(color)}`]
  };
  return composeClasses(slots, getTabUtilityClass, {});
};
var TabRoot = styled_default(StyledListItemButton, {
  name: "JoyTab",
  slot: "Root",
  overridesResolver: (props, styles) => styles.root
})(({
  theme,
  ownerState
}) => {
  var _theme$variants;
  const variantStyle = (_theme$variants = theme.variants[ownerState.variant]) == null ? void 0 : _theme$variants[ownerState.color];
  return _extends({
    justifyContent: "center",
    flexGrow: 1
  }, !ownerState.row && ownerState.orientation === "horizontal" && {
    justifyContent: "flex-start"
  }, ownerState.selected && _extends({
    boxShadow: theme.shadow.sm,
    fontWeight: "initial"
  }, !(variantStyle != null && variantStyle.backgroundColor) && {
    backgroundColor: theme.vars.palette.background.surface
  }));
});
var Tab = React68.forwardRef(function Tab2(inProps, ref) {
  const props = useThemeProps({
    props: inProps,
    name: "JoyTab"
  });
  const row = React68.useContext(RowListContext_default);
  const {
    action,
    children,
    disabled = false,
    component = "button",
    orientation = "horizontal",
    variant = "plain",
    color: colorProp = "neutral",
    slots = {},
    slotProps = {}
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded51);
  const {
    getColor
  } = useColorInversion(variant);
  const color = getColor(inProps.color, colorProp);
  const tabRef = React68.useRef();
  const handleRef = useForkRef(tabRef, ref);
  const {
    active,
    focusVisible,
    setFocusVisible,
    selected,
    getRootProps
  } = useTab_default(_extends({}, props, {
    rootRef: handleRef
  }));
  React68.useImperativeHandle(action, () => ({
    focusVisible: () => {
      setFocusVisible(true);
      tabRef.current.focus();
    }
  }), [setFocusVisible]);
  const ownerState = _extends({}, props, {
    orientation,
    row,
    active,
    focusVisible,
    disabled,
    selected,
    variant,
    color
  });
  const classes = useUtilityClasses46(ownerState);
  const externalForwardedProps = _extends({}, other, {
    component,
    slots,
    slotProps
  });
  const [SlotRoot, rootProps] = useSlot("root", {
    ref,
    elementType: TabRoot,
    getSlotProps: getRootProps,
    externalForwardedProps,
    ownerState,
    className: classes.root
  });
  return (0, import_jsx_runtime68.jsx)(ListItemButtonOrientationContext_default.Provider, {
    value: orientation,
    children: (0, import_jsx_runtime68.jsx)(SlotRoot, _extends({}, rootProps, {
      children
    }))
  });
});
true ? Tab.propTypes = {
  action: import_prop_types50.default.oneOfType([import_prop_types50.default.func, import_prop_types50.default.shape({
    current: import_prop_types50.default.shape({
      focusVisible: import_prop_types50.default.func.isRequired
    })
  })]),
  children: import_prop_types50.default.node,
  color: import_prop_types50.default.oneOfType([import_prop_types50.default.oneOf(["danger", "info", "neutral", "primary", "success", "warning"]), import_prop_types50.default.string]),
  component: import_prop_types50.default.elementType,
  disabled: import_prop_types50.default.bool,
  onChange: import_prop_types50.default.func,
  onClick: import_prop_types50.default.func,
  onFocus: import_prop_types50.default.func,
  orientation: import_prop_types50.default.oneOf(["horizontal", "vertical"]),
  slotProps: import_prop_types50.default.shape({
    root: import_prop_types50.default.oneOfType([import_prop_types50.default.func, import_prop_types50.default.object])
  }),
  slots: import_prop_types50.default.shape({
    root: import_prop_types50.default.elementType
  }),
  sx: import_prop_types50.default.oneOfType([import_prop_types50.default.arrayOf(import_prop_types50.default.oneOfType([import_prop_types50.default.func, import_prop_types50.default.object, import_prop_types50.default.bool])), import_prop_types50.default.func, import_prop_types50.default.object]),
  value: import_prop_types50.default.oneOfType([import_prop_types50.default.number, import_prop_types50.default.string]),
  variant: import_prop_types50.default.oneOfType([import_prop_types50.default.oneOf(["outlined", "plain", "soft", "solid"]), import_prop_types50.default.string])
} : void 0;
var Tab_default = Tab;

// node_modules/@mui/joy/Table/Table.js
init_objectWithoutPropertiesLoose();
init_extends();
var React69 = __toESM(require_react());
init_clsx_m();
var import_prop_types51 = __toESM(require_prop_types());
init_esm();
init_base();

// node_modules/@mui/joy/Table/tableClasses.js
function getTableUtilityClass(slot) {
  return generateUtilityClass2("JoyTable", slot);
}
var tableClasses = generateUtilityClasses2("JoyTable", ["root", "colorPrimary", "colorNeutral", "colorDanger", "colorInfo", "colorSuccess", "colorWarning", "colorContext", "variantPlain", "variantOutlined", "variantSoft", "variantSolid", "sizeSm", "sizeMd", "sizeLg", "stickyHeader", "noWrap", "hoverRow", "borderAxisNone", "borderAxisX", "borderAxisXBetween", "borderAxisY", "borderAxisYBetween", "borderAxisBoth", "borderAxisBothBetween"]);
var tableClasses_default = tableClasses;

// node_modules/@mui/joy/Table/Table.js
var import_jsx_runtime69 = __toESM(require_jsx_runtime());
var _excluded52 = ["className", "component", "children", "borderAxis", "hoverRow", "noWrap", "size", "variant", "color", "stripe", "stickyHeader", "slots", "slotProps"];
var useUtilityClasses47 = (ownerState) => {
  const {
    size,
    variant,
    color,
    borderAxis,
    stickyHeader,
    noWrap,
    hoverRow
  } = ownerState;
  const slots = {
    root: ["root", stickyHeader && "stickyHeader", noWrap && "noWrap", hoverRow && "hoverRow", borderAxis && `borderAxis${capitalize(borderAxis)}`, variant && `variant${capitalize(variant)}`, color && `color${capitalize(color)}`, size && `size${capitalize(size)}`]
  };
  return composeClasses(slots, getTableUtilityClass, {});
};
var tableSelector = {
  getColumnExceptFirst() {
    return "& tr > *:not(:first-of-type), & tr > th + td, & tr > td + th";
  },
  getCell() {
    return "& th, & td";
  },
  getHeadCell() {
    return "& th";
  },
  getHeaderCell() {
    return "& thead th";
  },
  getHeaderCellOfRow(row) {
    return `& thead tr:nth-of-type(${row}) th`;
  },
  getBottomHeaderCell() {
    return "& thead th:not([colspan])";
  },
  getHeaderNestedFirstColumn() {
    return "& thead tr:not(:first-of-type) th:not([colspan]):first-of-type";
  },
  getDataCell() {
    return "& td";
  },
  getDataCellExceptLastRow() {
    return "& tr:not(:last-of-type) > td";
  },
  getBodyCellExceptLastRow() {
    return `${this.getDataCellExceptLastRow()}, & tr:not(:last-of-type) > th[scope="row"]`;
  },
  getBodyCellOfRow(row) {
    if (typeof row === "number" && row < 0) {
      return `& tbody tr:nth-last-of-type(${Math.abs(row)}) td, & tbody tr:nth-last-of-type(${Math.abs(row)}) th[scope="row"]`;
    }
    return `& tbody tr:nth-of-type(${row}) td, & tbody tr:nth-of-type(${row}) th[scope="row"]`;
  },
  getBodyRow(row) {
    if (row === void 0) {
      return `& tbody tr`;
    }
    return `& tbody tr:nth-of-type(${row})`;
  },
  getFooterCell() {
    return "& tfoot th, & tfoot td";
  }
};
var TableRoot = styled_default("table", {
  name: "JoyTable",
  slot: "Root",
  overridesResolver: (props, styles) => styles.root
})(({
  theme,
  ownerState
}) => {
  var _theme$variants, _variantStyle$borderC, _theme$variants2, _ownerState$borderAxi, _ownerState$borderAxi2, _ownerState$borderAxi3, _ownerState$borderAxi4;
  const variantStyle = (_theme$variants = theme.variants[ownerState.variant]) == null ? void 0 : _theme$variants[ownerState.color];
  return [_extends({
    "--Table-headerUnderlineThickness": "2px",
    "--TableCell-borderColor": (_variantStyle$borderC = variantStyle == null ? void 0 : variantStyle.borderColor) != null ? _variantStyle$borderC : theme.vars.palette.divider,
    "--TableCell-headBackground": `var(--Sheet-background, ${theme.vars.palette.background.surface})`
  }, ownerState.size === "sm" && {
    "--unstable_TableCell-height": "var(--TableCell-height, 32px)",
    "--TableCell-paddingX": "0.25rem",
    "--TableCell-paddingY": "0.25rem",
    fontSize: theme.vars.fontSize.xs
  }, ownerState.size === "md" && {
    "--unstable_TableCell-height": "var(--TableCell-height, 40px)",
    "--TableCell-paddingX": "0.5rem",
    "--TableCell-paddingY": "0.375rem",
    fontSize: theme.vars.fontSize.sm
  }, ownerState.size === "lg" && {
    "--unstable_TableCell-height": "var(--TableCell-height, 48px)",
    "--TableCell-paddingX": "0.75rem",
    "--TableCell-paddingY": "0.5rem",
    fontSize: theme.vars.fontSize.md
  }, {
    tableLayout: "fixed",
    width: "100%",
    borderSpacing: "0px",
    borderCollapse: "separate",
    color: theme.vars.palette.text.primary
  }, (_theme$variants2 = theme.variants[ownerState.variant]) == null ? void 0 : _theme$variants2[ownerState.color], {
    "& caption": {
      color: theme.vars.palette.text.tertiary,
      padding: "calc(2 * var(--TableCell-paddingY)) var(--TableCell-paddingX)"
    },
    [tableSelector.getDataCell()]: _extends({
      padding: "var(--TableCell-paddingY) var(--TableCell-paddingX)",
      height: "var(--unstable_TableCell-height)",
      borderColor: "var(--TableCell-borderColor)",
      backgroundColor: "var(--TableCell-dataBackground)"
    }, ownerState.noWrap && {
      textOverflow: "ellipsis",
      whiteSpace: "nowrap",
      overflow: "hidden"
    }),
    [tableSelector.getHeadCell()]: {
      textAlign: "left",
      padding: "var(--TableCell-paddingY) var(--TableCell-paddingX)",
      backgroundColor: "var(--TableCell-headBackground)",
      height: "var(--unstable_TableCell-height)",
      fontWeight: theme.vars.fontWeight.lg,
      borderColor: "var(--TableCell-borderColor)",
      color: theme.vars.palette.text.secondary,
      textOverflow: "ellipsis",
      whiteSpace: "nowrap",
      overflow: "hidden"
    },
    [tableSelector.getHeaderCell()]: {
      verticalAlign: "bottom",
      "&:first-of-type": {
        borderTopLeftRadius: "var(--TableCell-cornerRadius, var(--unstable_actionRadius))"
      },
      "&:last-of-type": {
        borderTopRightRadius: "var(--TableCell-cornerRadius, var(--unstable_actionRadius))"
      }
    },
    "& tfoot tr > *": {
      backgroundColor: `var(--TableCell-footBackground, ${theme.vars.palette.background.level1})`,
      "&:first-of-type": {
        borderBottomLeftRadius: "var(--TableCell-cornerRadius, var(--unstable_actionRadius))"
      },
      "&:last-of-type": {
        borderBottomRightRadius: "var(--TableCell-cornerRadius, var(--unstable_actionRadius))"
      }
    }
  }), (((_ownerState$borderAxi = ownerState.borderAxis) == null ? void 0 : _ownerState$borderAxi.startsWith("x")) || ((_ownerState$borderAxi2 = ownerState.borderAxis) == null ? void 0 : _ownerState$borderAxi2.startsWith("both"))) && {
    [tableSelector.getHeaderCell()]: {
      borderBottomWidth: 1,
      borderBottomStyle: "solid"
    },
    [tableSelector.getBottomHeaderCell()]: {
      borderBottomWidth: "var(--Table-headerUnderlineThickness)",
      borderBottomStyle: "solid"
    },
    [tableSelector.getBodyCellExceptLastRow()]: {
      borderBottomWidth: 1,
      borderBottomStyle: "solid"
    },
    [tableSelector.getFooterCell()]: {
      borderTopWidth: 1,
      borderTopStyle: "solid"
    }
  }, (((_ownerState$borderAxi3 = ownerState.borderAxis) == null ? void 0 : _ownerState$borderAxi3.startsWith("y")) || ((_ownerState$borderAxi4 = ownerState.borderAxis) == null ? void 0 : _ownerState$borderAxi4.startsWith("both"))) && {
    [`${tableSelector.getColumnExceptFirst()}, ${tableSelector.getHeaderNestedFirstColumn()}`]: {
      borderLeftWidth: 1,
      borderLeftStyle: "solid"
    }
  }, (ownerState.borderAxis === "x" || ownerState.borderAxis === "both") && {
    [tableSelector.getHeaderCellOfRow(1)]: {
      borderTopWidth: 1,
      borderTopStyle: "solid"
    },
    [tableSelector.getBodyCellOfRow(-1)]: {
      borderBottomWidth: 1,
      borderBottomStyle: "solid"
    },
    [tableSelector.getFooterCell()]: {
      borderBottomWidth: 1,
      borderBottomStyle: "solid"
    }
  }, (ownerState.borderAxis === "y" || ownerState.borderAxis === "both") && {
    "& tr > *:first-of-type": {
      borderLeftWidth: 1,
      borderLeftStyle: "solid"
    },
    "& tr > *:last-of-type:not(:first-of-type)": {
      borderRightWidth: 1,
      borderRightStyle: "solid"
    }
  }, ownerState.stripe && {
    [tableSelector.getBodyRow(ownerState.stripe)]: {
      background: `var(--TableRow-stripeBackground, ${theme.vars.palette.background.level1})`,
      color: theme.vars.palette.text.primary
    }
  }, ownerState.hoverRow && {
    [tableSelector.getBodyRow()]: {
      "&:hover": {
        background: `var(--TableRow-hoverBackground, ${theme.vars.palette.background.level2})`
      }
    }
  }, ownerState.stickyHeader && {
    [tableSelector.getHeadCell()]: {
      position: "sticky",
      top: 0
    },
    [tableSelector.getHeaderCell()]: {
      zIndex: theme.vars.zIndex.table
    },
    [tableSelector.getHeaderCellOfRow(2)]: {
      top: "var(--unstable_TableCell-height)"
    }
  }];
});
var Table = React69.forwardRef(function Table2(inProps, ref) {
  const props = useThemeProps({
    props: inProps,
    name: "JoyTable"
  });
  const {
    className,
    component,
    children,
    borderAxis = "xBetween",
    hoverRow = false,
    noWrap = false,
    size = "md",
    variant = "plain",
    color: colorProp = "neutral",
    stripe,
    stickyHeader = false,
    slots = {},
    slotProps = {}
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded52);
  const {
    getColor
  } = useColorInversion(variant);
  const color = getColor(inProps.color, colorProp);
  const ownerState = _extends({}, props, {
    borderAxis,
    hoverRow,
    noWrap,
    component,
    size,
    color,
    variant,
    stripe,
    stickyHeader
  });
  const classes = useUtilityClasses47(ownerState);
  const externalForwardedProps = _extends({}, other, {
    component,
    slots,
    slotProps
  });
  const [SlotRoot, rootProps] = useSlot("root", {
    ref,
    className: clsx_m_default(classes.root, className),
    elementType: TableRoot,
    externalForwardedProps,
    ownerState
  });
  return (0, import_jsx_runtime69.jsx)(TypographyInheritContext.Provider, {
    value: true,
    children: (0, import_jsx_runtime69.jsx)(SlotRoot, _extends({}, rootProps, {
      children
    }))
  });
});
true ? Table.propTypes = {
  borderAxis: import_prop_types51.default.oneOfType([import_prop_types51.default.oneOf(["both", "bothBetween", "none", "x", "xBetween", "y", "yBetween"]), import_prop_types51.default.string]),
  children: import_prop_types51.default.node,
  className: import_prop_types51.default.string,
  color: import_prop_types51.default.oneOfType([import_prop_types51.default.oneOf(["danger", "info", "neutral", "primary", "success", "warning"]), import_prop_types51.default.string]),
  component: import_prop_types51.default.elementType,
  hoverRow: import_prop_types51.default.bool,
  noWrap: import_prop_types51.default.bool,
  size: import_prop_types51.default.oneOfType([import_prop_types51.default.oneOf(["sm", "md", "lg"]), import_prop_types51.default.string]),
  slotProps: import_prop_types51.default.shape({
    root: import_prop_types51.default.oneOfType([import_prop_types51.default.func, import_prop_types51.default.object])
  }),
  slots: import_prop_types51.default.shape({
    root: import_prop_types51.default.elementType
  }),
  stickyHeader: import_prop_types51.default.bool,
  stripe: import_prop_types51.default.oneOfType([import_prop_types51.default.oneOf(["odd", "even"]), import_prop_types51.default.string]),
  sx: import_prop_types51.default.oneOfType([import_prop_types51.default.arrayOf(import_prop_types51.default.oneOfType([import_prop_types51.default.func, import_prop_types51.default.object, import_prop_types51.default.bool])), import_prop_types51.default.func, import_prop_types51.default.object]),
  variant: import_prop_types51.default.oneOfType([import_prop_types51.default.oneOf(["outlined", "plain", "soft", "solid"]), import_prop_types51.default.string])
} : void 0;
var Table_default = Table;

// node_modules/@mui/joy/TabList/TabList.js
init_objectWithoutPropertiesLoose();
init_extends();
var React71 = __toESM(require_react());
var import_prop_types52 = __toESM(require_prop_types());
init_esm();
init_base();
init_useTabsList();

// node_modules/@mui/joy/Tabs/SizeTabsContext.js
var React70 = __toESM(require_react());
var SizeTabsContext = React70.createContext("md");
var SizeTabsContext_default = SizeTabsContext;

// node_modules/@mui/joy/TabList/tabListClasses.js
function getTabListUtilityClass(slot) {
  return generateUtilityClass2("MuiTabList", slot);
}
var tabListClasses2 = generateUtilityClasses2("MuiTabList", ["root", "colorPrimary", "colorNeutral", "colorDanger", "colorInfo", "colorSuccess", "colorWarning", "colorContext", "variantPlain", "variantOutlined", "variantSoft", "variantSolid", "sizeSm", "sizeMd", "sizeLg"]);
var tabListClasses_default = tabListClasses2;

// node_modules/@mui/joy/TabList/TabList.js
var import_jsx_runtime70 = __toESM(require_jsx_runtime());
var _excluded53 = ["component", "children", "variant", "color", "size", "slots", "slotProps"];
var useUtilityClasses48 = (ownerState) => {
  const {
    orientation,
    size,
    variant,
    color
  } = ownerState;
  const slots = {
    root: ["root", orientation, variant && `variant${capitalize(variant)}`, color && `color${capitalize(color)}`, size && `size${capitalize(size)}`]
  };
  return composeClasses(slots, getTabListUtilityClass, {});
};
var TabListRoot = styled_default(StyledList, {
  name: "JoyTabList",
  slot: "Root",
  overridesResolver: (props, styles) => styles.root
})(({
  theme
}) => _extends({
  flexGrow: "initial",
  "--List-radius": theme.vars.radius.md,
  "--List-gap": "var(--Tabs-gap)",
  "--List-padding": "var(--Tabs-gap)",
  "--ListDivider-gap": "0px"
}, scopedVariables));
var TabList = React71.forwardRef(function TabList2(inProps, ref) {
  const props = useThemeProps({
    props: inProps,
    name: "JoyTabList"
  });
  const tabsSize = React71.useContext(SizeTabsContext_default);
  const {
    component = "div",
    children,
    variant = "soft",
    color: colorProp = "neutral",
    size: sizeProp,
    slots = {},
    slotProps = {}
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded53);
  const {
    getColor
  } = useColorInversion(variant);
  const color = getColor(inProps.color, colorProp);
  const {
    isRtl,
    orientation,
    getRootProps,
    contextValue
  } = useTabsList_default({
    rootRef: ref
  });
  const size = sizeProp != null ? sizeProp : tabsSize;
  const ownerState = _extends({}, props, {
    isRtl,
    orientation,
    variant,
    color,
    size,
    nesting: false
  });
  const classes = useUtilityClasses48(ownerState);
  const externalForwardedProps = _extends({}, other, {
    component,
    slots,
    slotProps
  });
  const [SlotRoot, rootProps] = useSlot("root", {
    ref,
    elementType: TabListRoot,
    getSlotProps: getRootProps,
    externalForwardedProps,
    ownerState,
    className: classes.root
  });
  return (0, import_jsx_runtime70.jsx)(SlotRoot, _extends({}, rootProps, {
    children: (0, import_jsx_runtime70.jsx)(TabsListProvider, {
      value: contextValue,
      children: (0, import_jsx_runtime70.jsx)(ListProvider_default, {
        row: orientation === "horizontal",
        nested: true,
        children
      })
    })
  }));
});
true ? TabList.propTypes = {
  children: import_prop_types52.default.node,
  color: import_prop_types52.default.oneOfType([import_prop_types52.default.oneOf(["danger", "info", "neutral", "primary", "success", "warning"]), import_prop_types52.default.string]),
  component: import_prop_types52.default.elementType,
  size: import_prop_types52.default.oneOfType([import_prop_types52.default.oneOf(["sm", "md", "lg"]), import_prop_types52.default.string]),
  slotProps: import_prop_types52.default.shape({
    root: import_prop_types52.default.oneOfType([import_prop_types52.default.func, import_prop_types52.default.object])
  }),
  slots: import_prop_types52.default.shape({
    root: import_prop_types52.default.elementType
  }),
  sx: import_prop_types52.default.oneOfType([import_prop_types52.default.arrayOf(import_prop_types52.default.oneOfType([import_prop_types52.default.func, import_prop_types52.default.object, import_prop_types52.default.bool])), import_prop_types52.default.func, import_prop_types52.default.object]),
  variant: import_prop_types52.default.oneOfType([import_prop_types52.default.oneOf(["outlined", "plain", "soft", "solid"]), import_prop_types52.default.string])
} : void 0;
var TabList_default = TabList;

// node_modules/@mui/joy/TabPanel/TabPanel.js
init_objectWithoutPropertiesLoose();
init_extends();
var React72 = __toESM(require_react());
var import_prop_types53 = __toESM(require_prop_types());
init_esm();
init_base();
init_useTabPanel();
init_Tabs();

// node_modules/@mui/joy/TabPanel/tabPanelClasses.js
function getTabPanelUtilityClass(slot) {
  return generateUtilityClass2("MuiTabPanel", slot);
}
var tabListClasses3 = generateUtilityClasses2("MuiTabPanel", ["root", "hidden", "sizeSm", "sizeMd", "sizeLg", "horizontal", "vertical"]);
var tabPanelClasses_default = tabListClasses3;

// node_modules/@mui/joy/TabPanel/TabPanel.js
var import_jsx_runtime71 = __toESM(require_jsx_runtime());
var _excluded54 = ["children", "value", "component", "size", "slots", "slotProps"];
var useUtilityClasses49 = (ownerState) => {
  const {
    hidden,
    size,
    orientation
  } = ownerState;
  const slots = {
    root: ["root", hidden && "hidden", size && `size${capitalize(size)}`, orientation]
  };
  return composeClasses(slots, getTabPanelUtilityClass, {});
};
var TabPanelRoot = styled_default("div", {
  name: "JoyTabPanel",
  slot: "Root",
  overridesResolver: (props, styles) => styles.root
})(({
  theme,
  ownerState
}) => _extends({
  display: ownerState.hidden ? "none" : "initial"
}, ownerState.orientation === "horizontal" && {
  paddingBlockStart: "var(--Tabs-gap)"
}, ownerState.orientation === "vertical" && {
  paddingInlineStart: "var(--Tabs-gap)"
}, ownerState.size === "sm" && {
  fontSize: theme.vars.fontSize.sm
}, ownerState.size === "md" && {
  fontSize: theme.vars.fontSize.md
}, ownerState.size === "lg" && {
  fontSize: theme.vars.fontSize.lg
}, {
  flexGrow: 1,
  fontFamily: theme.vars.fontFamily.body
}));
var TabPanel = React72.forwardRef(function TabPanel2(inProps, ref) {
  const props = useThemeProps({
    props: inProps,
    name: "JoyTabPanel"
  });
  const {
    orientation
  } = useTabsContext() || {
    orientation: "horizontal"
  };
  const tabsSize = React72.useContext(SizeTabsContext_default);
  const {
    children,
    value = 0,
    component,
    size: sizeProp,
    slots = {},
    slotProps = {}
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded54);
  const {
    hidden,
    getRootProps
  } = useTabPanel_default(_extends({}, props, {
    value
  }));
  const size = sizeProp != null ? sizeProp : tabsSize;
  const ownerState = _extends({}, props, {
    orientation,
    hidden,
    size
  });
  const classes = useUtilityClasses49(ownerState);
  const externalForwardedProps = _extends({}, other, {
    component,
    slots,
    slotProps
  });
  const [SlotRoot, rootProps] = useSlot("root", {
    ref,
    elementType: TabPanelRoot,
    getSlotProps: getRootProps,
    externalForwardedProps,
    additionalProps: {
      role: "tabpanel",
      ref,
      as: component
    },
    ownerState,
    className: classes.root
  });
  return (0, import_jsx_runtime71.jsx)(SlotRoot, _extends({}, rootProps, {
    children: !hidden && children
  }));
});
true ? TabPanel.propTypes = {
  children: import_prop_types53.default.node,
  component: import_prop_types53.default.elementType,
  size: import_prop_types53.default.oneOfType([import_prop_types53.default.oneOf(["sm", "md", "lg"]), import_prop_types53.default.string]),
  slotProps: import_prop_types53.default.shape({
    root: import_prop_types53.default.oneOfType([import_prop_types53.default.func, import_prop_types53.default.object])
  }),
  slots: import_prop_types53.default.shape({
    root: import_prop_types53.default.elementType
  }),
  sx: import_prop_types53.default.oneOfType([import_prop_types53.default.arrayOf(import_prop_types53.default.oneOfType([import_prop_types53.default.func, import_prop_types53.default.object, import_prop_types53.default.bool])), import_prop_types53.default.func, import_prop_types53.default.object]),
  value: import_prop_types53.default.oneOfType([import_prop_types53.default.number, import_prop_types53.default.string])
} : void 0;
var TabPanel_default = TabPanel;

// node_modules/@mui/joy/Tabs/Tabs.js
init_objectWithoutPropertiesLoose();
init_extends();
var React73 = __toESM(require_react());
var import_prop_types54 = __toESM(require_prop_types());
init_esm();
init_base();
init_useTabs();

// node_modules/@mui/joy/Tabs/tabsClasses.js
function getTabsUtilityClass(slot) {
  return generateUtilityClass2("MuiTabs", slot);
}
var tabListClasses4 = generateUtilityClasses2("MuiTabs", ["root", "horizontal", "vertical", "colorPrimary", "colorNeutral", "colorDanger", "colorInfo", "colorSuccess", "colorWarning", "colorContext", "variantPlain", "variantOutlined", "variantSoft", "variantSolid", "sizeSm", "sizeMd", "sizeLg"]);
var tabsClasses_default = tabListClasses4;

// node_modules/@mui/joy/Tabs/Tabs.js
var import_jsx_runtime72 = __toESM(require_jsx_runtime());
var _excluded55 = ["children", "value", "defaultValue", "orientation", "direction", "component", "onChange", "selectionFollowsFocus", "variant", "color", "size", "slots", "slotProps"];
var useUtilityClasses50 = (ownerState) => {
  const {
    orientation,
    variant,
    color,
    size
  } = ownerState;
  const slots = {
    root: ["root", orientation, variant && `variant${capitalize(variant)}`, color && `color${capitalize(color)}`, size && `size${capitalize(size)}`]
  };
  return composeClasses(slots, getTabsUtilityClass, {});
};
var TabsRoot = styled_default(SheetRoot, {
  name: "JoyTabs",
  slot: "Root",
  overridesResolver: (props, styles) => styles.root
})(({
  ownerState
}) => _extends({}, ownerState.size === "sm" && {
  "--Tabs-gap": "3px"
}, ownerState.size === "md" && {
  "--Tabs-gap": "4px"
}, ownerState.size === "lg" && {
  "--Tabs-gap": "0.5rem"
}, {
  display: "flex",
  flexDirection: "column"
}, ownerState.orientation === "vertical" && {
  flexDirection: "row",
  alignItems: "flex-start"
}));
var Tabs = React73.forwardRef(function Tabs2(inProps, ref) {
  const props = useThemeProps({
    props: inProps,
    name: "JoyTabs"
  });
  const {
    children,
    value: valueProp,
    defaultValue: defaultValueProp,
    orientation = "horizontal",
    direction = "ltr",
    component,
    variant = "plain",
    color: colorProp = "neutral",
    size = "md",
    slots = {},
    slotProps = {}
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded55);
  const {
    getColor
  } = useColorInversion(variant);
  const color = getColor(inProps.color, colorProp);
  const defaultValue = defaultValueProp || (valueProp === void 0 ? 0 : void 0);
  const {
    contextValue
  } = useTabs_default(_extends({}, props, {
    orientation,
    defaultValue
  }));
  const ownerState = _extends({}, props, {
    orientation,
    direction,
    variant,
    color,
    size
  });
  const classes = useUtilityClasses50(ownerState);
  const externalForwardedProps = _extends({}, other, {
    component,
    slots,
    slotProps
  });
  const [SlotRoot, rootProps] = useSlot("root", {
    ref,
    elementType: TabsRoot,
    externalForwardedProps,
    additionalProps: {
      ref,
      as: component
    },
    ownerState,
    className: classes.root
  });
  return (0, import_jsx_runtime72.jsx)(SlotRoot, _extends({}, rootProps, {
    children: (0, import_jsx_runtime72.jsx)(TabsProvider, {
      value: contextValue,
      children: (0, import_jsx_runtime72.jsx)(SizeTabsContext_default.Provider, {
        value: size,
        children
      })
    })
  }));
});
true ? Tabs.propTypes = {
  children: import_prop_types54.default.node,
  color: import_prop_types54.default.oneOfType([import_prop_types54.default.oneOf(["danger", "info", "neutral", "primary", "success", "warning"]), import_prop_types54.default.string]),
  component: import_prop_types54.default.elementType,
  defaultValue: import_prop_types54.default.oneOfType([import_prop_types54.default.number, import_prop_types54.default.string]),
  direction: import_prop_types54.default.oneOf(["ltr", "rtl"]),
  onChange: import_prop_types54.default.func,
  orientation: import_prop_types54.default.oneOf(["horizontal", "vertical"]),
  selectionFollowsFocus: import_prop_types54.default.bool,
  size: import_prop_types54.default.oneOfType([import_prop_types54.default.oneOf(["sm", "md", "lg"]), import_prop_types54.default.string]),
  slotProps: import_prop_types54.default.shape({
    root: import_prop_types54.default.oneOfType([import_prop_types54.default.func, import_prop_types54.default.object])
  }),
  slots: import_prop_types54.default.shape({
    root: import_prop_types54.default.elementType
  }),
  sx: import_prop_types54.default.oneOfType([import_prop_types54.default.arrayOf(import_prop_types54.default.oneOfType([import_prop_types54.default.func, import_prop_types54.default.object, import_prop_types54.default.bool])), import_prop_types54.default.func, import_prop_types54.default.object]),
  value: import_prop_types54.default.oneOfType([import_prop_types54.default.number, import_prop_types54.default.string]),
  variant: import_prop_types54.default.oneOfType([import_prop_types54.default.oneOf(["outlined", "plain", "soft", "solid"]), import_prop_types54.default.string])
} : void 0;
var Tabs_default = Tabs;

// node_modules/@mui/joy/Textarea/Textarea.js
init_objectWithoutPropertiesLoose();
init_extends();
var React74 = __toESM(require_react());
var import_prop_types55 = __toESM(require_prop_types());
init_esm();
init_composeClasses();
init_TextareaAutosize();

// node_modules/@mui/joy/Textarea/textareaClasses.js
function getTextareaUtilityClass(slot) {
  return generateUtilityClass2("MuiTextarea", slot);
}
var textareaClasses = generateUtilityClasses2("MuiTextarea", ["root", "textarea", "startDecorator", "endDecorator", "formControl", "disabled", "error", "focused", "colorPrimary", "colorNeutral", "colorDanger", "colorInfo", "colorSuccess", "colorWarning", "colorContext", "sizeSm", "sizeMd", "sizeLg", "variantPlain", "variantOutlined", "variantSoft"]);
var textareaClasses_default = textareaClasses;

// node_modules/@mui/joy/Textarea/Textarea.js
var import_jsx_runtime73 = __toESM(require_jsx_runtime());
var import_jsx_runtime74 = __toESM(require_jsx_runtime());
var _excluded56 = ["propsToForward", "rootStateClasses", "inputStateClasses", "getRootProps", "getInputProps", "formControl", "focused", "error", "disabled", "size", "color", "variant", "startDecorator", "endDecorator", "minRows", "maxRows", "component", "slots", "slotProps"];
var useUtilityClasses51 = (ownerState) => {
  const {
    disabled,
    variant,
    color,
    size
  } = ownerState;
  const slots = {
    root: ["root", disabled && "disabled", variant && `variant${capitalize(variant)}`, color && `color${capitalize(color)}`, size && `size${capitalize(size)}`],
    textarea: ["textarea"],
    startDecorator: ["startDecorator"],
    endDecorator: ["endDecorator"]
  };
  return composeClasses(slots, getTextareaUtilityClass, {});
};
var TextareaRoot = styled_default("div", {
  name: "JoyTextarea",
  slot: "Root",
  overridesResolver: (props, styles) => styles.root
})(({
  theme,
  ownerState
}) => {
  var _theme$variants, _theme$vars$palette, _variantStyle$backgro, _theme$variants2, _theme$variants3;
  const variantStyle = (_theme$variants = theme.variants[`${ownerState.variant}`]) == null ? void 0 : _theme$variants[ownerState.color];
  return [_extends({
    "--Textarea-radius": theme.vars.radius.sm,
    "--Textarea-gap": "0.5rem",
    "--Textarea-placeholderColor": "inherit",
    "--Textarea-placeholderOpacity": 0.5,
    "--Textarea-focusedThickness": theme.vars.focus.thickness
  }, ownerState.color === "context" ? {
    "--Textarea-focusedHighlight": theme.vars.palette.focusVisible
  } : {
    "--Textarea-focusedHighlight": (_theme$vars$palette = theme.vars.palette[ownerState.color === "neutral" ? "primary" : ownerState.color]) == null ? void 0 : _theme$vars$palette[500]
  }, ownerState.size === "sm" && {
    "--Textarea-minHeight": "2rem",
    "--Textarea-paddingBlock": "calc(0.5rem - var(--variant-borderWidth, 0px))",
    "--Textarea-paddingInline": "0.5rem",
    "--Textarea-decoratorChildHeight": "min(1.5rem, var(--Textarea-minHeight))",
    "--Icon-fontSize": "1.25rem"
  }, ownerState.size === "md" && {
    "--Textarea-minHeight": "2.5rem",
    "--Textarea-paddingBlock": "calc(0.5rem - var(--variant-borderWidth, 0px))",
    "--Textarea-paddingInline": "0.75rem",
    "--Textarea-decoratorChildHeight": "min(2rem, var(--Textarea-minHeight))",
    "--Icon-fontSize": "1.5rem"
  }, ownerState.size === "lg" && {
    "--Textarea-minHeight": "3rem",
    "--Textarea-paddingBlock": "calc(0.75rem - var(--variant-borderWidth, 0px))",
    "--Textarea-paddingInline": "1rem",
    "--Textarea-gap": "0.75rem",
    "--Textarea-decoratorChildHeight": "min(2.375rem, var(--Textarea-minHeight))",
    "--Icon-fontSize": "1.75rem"
  }, {
    "--_Textarea-paddingBlock": "max((var(--Textarea-minHeight) - 2 * var(--variant-borderWidth, 0px) - var(--Textarea-decoratorChildHeight)) / 2, 0px)",
    "--Textarea-decoratorChildRadius": "max(var(--Textarea-radius) - var(--variant-borderWidth, 0px) - var(--_Textarea-paddingBlock), min(var(--_Textarea-paddingBlock) + var(--variant-borderWidth, 0px), var(--Textarea-radius) / 2))",
    "--Button-minHeight": "var(--Textarea-decoratorChildHeight)",
    "--IconButton-size": "var(--Textarea-decoratorChildHeight)",
    "--Button-radius": "var(--Textarea-decoratorChildRadius)",
    "--IconButton-radius": "var(--Textarea-decoratorChildRadius)",
    boxSizing: "border-box",
    minWidth: 0,
    minHeight: "var(--Textarea-minHeight)",
    cursor: "text",
    position: "relative",
    display: "flex",
    flexDirection: "column",
    paddingInlineStart: `var(--Textarea-paddingInline)`,
    paddingBlock: "var(--Textarea-paddingBlock)",
    borderRadius: "var(--Textarea-radius)",
    fontFamily: theme.vars.fontFamily.body,
    fontSize: theme.vars.fontSize.md,
    lineHeight: theme.vars.lineHeight.md
  }, ownerState.size === "sm" && {
    fontSize: theme.vars.fontSize.sm,
    lineHeight: theme.vars.lineHeight.sm
  }, {
    "&:before": {
      boxSizing: "border-box",
      content: '""',
      display: "block",
      position: "absolute",
      pointerEvents: "none",
      top: 0,
      left: 0,
      right: 0,
      bottom: 0,
      zIndex: 1,
      borderRadius: "inherit",
      margin: "calc(var(--variant-borderWidth, 0px) * -1)"
    }
  }), _extends({}, variantStyle, {
    backgroundColor: (_variantStyle$backgro = variantStyle == null ? void 0 : variantStyle.backgroundColor) != null ? _variantStyle$backgro : theme.vars.palette.background.surface,
    [`&:hover:not(.${textareaClasses_default.focused})`]: _extends({}, (_theme$variants2 = theme.variants[`${ownerState.variant}Hover`]) == null ? void 0 : _theme$variants2[ownerState.color], {
      backgroundColor: null,
      cursor: "text"
    }),
    [`&.${textareaClasses_default.disabled}`]: (_theme$variants3 = theme.variants[`${ownerState.variant}Disabled`]) == null ? void 0 : _theme$variants3[ownerState.color],
    [`&.${textareaClasses_default.focused}`]: {
      "&:before": {
        boxShadow: `inset 0 0 0 var(--Textarea-focusedThickness) var(--Textarea-focusedHighlight)`
      }
    }
  })];
});
var TextareaInput = styled_default(TextareaAutosize_default, {
  name: "JoyTextarea",
  slot: "Textarea",
  overridesResolver: (props, styles) => styles.textarea
})({
  resize: "none",
  border: "none",
  minWidth: 0,
  outline: 0,
  padding: 0,
  paddingInlineEnd: `var(--Textarea-paddingInline)`,
  flex: "auto",
  alignSelf: "stretch",
  color: "inherit",
  backgroundColor: "transparent",
  fontFamily: "inherit",
  fontSize: "inherit",
  fontStyle: "inherit",
  fontWeight: "inherit",
  lineHeight: "inherit",
  "&:-webkit-autofill": {
    WebkitBackgroundClip: "text",
    WebkitTextFillColor: "currentColor"
  },
  "&::-webkit-input-placeholder": {
    color: "var(--Textarea-placeholderColor)",
    opacity: "var(--Textarea-placeholderOpacity)"
  },
  "&::-moz-placeholder": {
    color: "var(--Textarea-placeholderColor)",
    opacity: "var(--Textarea-placeholderOpacity)"
  },
  "&:-ms-input-placeholder": {
    color: "var(--Textarea-placeholderColor)",
    opacity: "var(--Textarea-placeholderOpacity)"
  },
  "&::-ms-input-placeholder": {
    color: "var(--Textarea-placeholderColor)",
    opacity: "var(--Textarea-placeholderOpacity)"
  }
});
var TextareaStartDecorator = styled_default("div", {
  name: "JoyTextarea",
  slot: "StartDecorator",
  overridesResolver: (props, styles) => styles.startDecorator
})(({
  theme
}) => ({
  display: "flex",
  marginInlineStart: "calc(var(--Textarea-paddingBlock) - var(--Textarea-paddingInline))",
  marginInlineEnd: "var(--Textarea-paddingBlock)",
  marginBlockEnd: "var(--Textarea-gap)",
  color: theme.vars.palette.text.tertiary,
  cursor: "initial"
}));
var TextareaEndDecorator = styled_default("div", {
  name: "JoyTextarea",
  slot: "EndDecorator",
  overridesResolver: (props, styles) => styles.endDecorator
})(({
  theme
}) => ({
  display: "flex",
  marginInlineStart: "calc(var(--Textarea-paddingBlock) - var(--Textarea-paddingInline))",
  marginInlineEnd: "var(--Textarea-paddingBlock)",
  marginBlockStart: "var(--Textarea-gap)",
  color: theme.vars.palette.text.tertiary,
  cursor: "initial"
}));
var Textarea = React74.forwardRef(function Textarea2(inProps, ref) {
  var _ref, _inProps$disabled, _ref2, _inProps$error, _ref3, _inProps$size, _formControl$color;
  const props = useThemeProps({
    props: inProps,
    name: "JoyTextarea"
  });
  const _useForwardedInput = useForwardedInput(props, textareaClasses_default), {
    propsToForward,
    rootStateClasses,
    inputStateClasses,
    getRootProps,
    getInputProps,
    formControl,
    focused,
    error: errorProp = false,
    disabled: disabledProp = false,
    size: sizeProp = "md",
    color: colorProp = "neutral",
    variant = "outlined",
    startDecorator,
    endDecorator,
    minRows,
    maxRows,
    component,
    slots = {},
    slotProps = {}
  } = _useForwardedInput, other = _objectWithoutPropertiesLoose(_useForwardedInput, _excluded56);
  if (true) {
    const registerEffect = formControl == null ? void 0 : formControl.registerEffect;
    React74.useEffect(() => {
      if (registerEffect) {
        return registerEffect();
      }
      return void 0;
    }, [registerEffect]);
  }
  const disabled = (_ref = (_inProps$disabled = inProps.disabled) != null ? _inProps$disabled : formControl == null ? void 0 : formControl.disabled) != null ? _ref : disabledProp;
  const error = (_ref2 = (_inProps$error = inProps.error) != null ? _inProps$error : formControl == null ? void 0 : formControl.error) != null ? _ref2 : errorProp;
  const size = (_ref3 = (_inProps$size = inProps.size) != null ? _inProps$size : formControl == null ? void 0 : formControl.size) != null ? _ref3 : sizeProp;
  const {
    getColor
  } = useColorInversion(variant);
  const color = getColor(inProps.color, error ? "danger" : (_formControl$color = formControl == null ? void 0 : formControl.color) != null ? _formControl$color : colorProp);
  const ownerState = _extends({}, props, {
    color,
    disabled,
    error,
    focused,
    size,
    variant
  });
  const classes = useUtilityClasses51(ownerState);
  const externalForwardedProps = _extends({}, other, {
    component,
    slots,
    slotProps
  });
  const [SlotRoot, rootProps] = useSlot("root", {
    ref,
    className: [classes.root, rootStateClasses],
    elementType: TextareaRoot,
    externalForwardedProps,
    getSlotProps: getRootProps,
    ownerState
  });
  const [SlotTextarea, textareaProps] = useSlot("textarea", {
    additionalProps: {
      id: formControl == null ? void 0 : formControl.htmlFor,
      "aria-describedby": formControl == null ? void 0 : formControl["aria-describedby"]
    },
    className: [classes.textarea, inputStateClasses],
    elementType: TextareaInput,
    internalForwardedProps: _extends({}, propsToForward, {
      minRows,
      maxRows
    }),
    externalForwardedProps,
    getSlotProps: getInputProps,
    ownerState
  });
  const [SlotStartDecorator, startDecoratorProps] = useSlot("startDecorator", {
    className: classes.startDecorator,
    elementType: TextareaStartDecorator,
    externalForwardedProps,
    ownerState
  });
  const [SlotEndDecorator, endDecoratorProps] = useSlot("endDecorator", {
    className: classes.endDecorator,
    elementType: TextareaEndDecorator,
    externalForwardedProps,
    ownerState
  });
  return (0, import_jsx_runtime74.jsxs)(SlotRoot, _extends({}, rootProps, {
    children: [startDecorator && (0, import_jsx_runtime73.jsx)(SlotStartDecorator, _extends({}, startDecoratorProps, {
      children: startDecorator
    })), (0, import_jsx_runtime73.jsx)(SlotTextarea, _extends({}, textareaProps)), endDecorator && (0, import_jsx_runtime73.jsx)(SlotEndDecorator, _extends({}, endDecoratorProps, {
      children: endDecorator
    }))]
  }));
});
true ? Textarea.propTypes = {
  children: import_prop_types55.default.node,
  color: import_prop_types55.default.oneOfType([import_prop_types55.default.oneOf(["danger", "info", "neutral", "primary", "success", "warning"]), import_prop_types55.default.string]),
  disabled: import_prop_types55.default.bool,
  endDecorator: import_prop_types55.default.node,
  error: import_prop_types55.default.bool,
  maxRows: import_prop_types55.default.oneOfType([import_prop_types55.default.number, import_prop_types55.default.string]),
  minRows: import_prop_types55.default.oneOfType([import_prop_types55.default.number, import_prop_types55.default.string]),
  size: import_prop_types55.default.oneOfType([import_prop_types55.default.oneOf(["sm", "md", "lg"]), import_prop_types55.default.string]),
  startDecorator: import_prop_types55.default.node,
  sx: import_prop_types55.default.oneOfType([import_prop_types55.default.arrayOf(import_prop_types55.default.oneOfType([import_prop_types55.default.func, import_prop_types55.default.object, import_prop_types55.default.bool])), import_prop_types55.default.func, import_prop_types55.default.object]),
  variant: import_prop_types55.default.oneOfType([import_prop_types55.default.oneOf(["outlined", "plain", "soft", "solid"]), import_prop_types55.default.string])
} : void 0;
var Textarea_default = Textarea;

// node_modules/@mui/joy/TextField/TextField.js
var TextField_default = function DeletedTextField() {
  throw new Error(["MUI: `TextField` component has been removed in favor of Input composition.", "", "To migrate, run `npx @mui/codemod v5.0.0/joy-text-field-to-input <path>`.", "For the codemod detail, visit https://github.com/mui/material-ui/blob/master/packages/mui-codemod/README.md#joy-text-field-to-input\n\nTo learn more why it has been removed, visit the RFC https://github.com/mui/material-ui/issues/34176"].join("\n"));
};

// node_modules/@mui/joy/Tooltip/Tooltip.js
init_objectWithoutPropertiesLoose();
init_extends();
var React75 = __toESM(require_react());
var import_prop_types56 = __toESM(require_prop_types());
init_clsx_m();
init_esm();
init_base();

// node_modules/@mui/joy/Tooltip/tooltipClasses.js
function getTooltipUtilityClass(slot) {
  return generateUtilityClass2("MuiTooltip", slot);
}
var tooltipClasses = generateUtilityClasses2("MuiTooltip", ["root", "tooltipArrow", "arrow", "touch", "placementLeft", "placementRight", "placementTop", "placementBottom", "colorPrimary", "colorDanger", "colorInfo", "colorNeutral", "colorSuccess", "colorWarning", "colorContext", "sizeSm", "sizeMd", "sizeLg", "variantPlain", "variantOutlined", "variantSoft", "variantSolid"]);
var tooltipClasses_default = tooltipClasses;

// node_modules/@mui/joy/Tooltip/Tooltip.js
var import_jsx_runtime75 = __toESM(require_jsx_runtime());
var import_jsx_runtime76 = __toESM(require_jsx_runtime());
var _excluded57 = ["children", "className", "component", "arrow", "describeChild", "disableFocusListener", "disableHoverListener", "disableInteractive", "disableTouchListener", "enterDelay", "enterNextDelay", "enterTouchDelay", "followCursor", "id", "leaveDelay", "leaveTouchDelay", "onClose", "onOpen", "open", "disablePortal", "direction", "keepMounted", "modifiers", "placement", "title", "color", "variant", "size", "slots", "slotProps"];
var useUtilityClasses52 = (ownerState) => {
  const {
    arrow,
    variant,
    color,
    size,
    placement,
    touch
  } = ownerState;
  const slots = {
    root: ["root", arrow && "tooltipArrow", touch && "touch", size && `size${capitalize(size)}`, color && `color${capitalize(color)}`, variant && `variant${capitalize(variant)}`, `tooltipPlacement${capitalize(placement.split("-")[0])}`],
    arrow: ["arrow"]
  };
  return composeClasses(slots, getTooltipUtilityClass, {});
};
var TooltipRoot = styled_default("div", {
  name: "JoyTooltip",
  slot: "Root",
  overridesResolver: (props, styles) => styles.root
})(({
  ownerState,
  theme
}) => {
  var _theme$variants, _ownerState$placement, _ownerState$placement2;
  const variantStyle = (_theme$variants = theme.variants[ownerState.variant]) == null ? void 0 : _theme$variants[ownerState.color];
  return _extends({}, ownerState.size === "sm" && {
    "--Icon-fontSize": "1rem",
    "--Tooltip-arrowSize": "8px",
    padding: theme.spacing(0.5, 0.625),
    fontSize: theme.vars.fontSize.xs
  }, ownerState.size === "md" && {
    "--Icon-fontSize": "1.125rem",
    "--Tooltip-arrowSize": "10px",
    padding: theme.spacing(0.625, 0.75),
    fontSize: theme.vars.fontSize.sm
  }, ownerState.size === "lg" && {
    "--Icon-fontSize": "1.25rem",
    "--Tooltip-arrowSize": "12px",
    padding: theme.spacing(0.75, 1),
    fontSize: theme.vars.fontSize.md
  }, {
    zIndex: theme.vars.zIndex.tooltip,
    pointerEvents: "none",
    borderRadius: theme.vars.radius.xs,
    boxShadow: theme.shadow.sm,
    fontFamily: theme.vars.fontFamily.body,
    fontWeight: theme.vars.fontWeight.md,
    lineHeight: theme.vars.lineHeight.sm,
    wordWrap: "break-word",
    position: "relative"
  }, !ownerState.disableInteractive && {
    pointerEvents: "auto"
  }, !ownerState.open && {
    pointerEvents: "none"
  }, variantStyle, !variantStyle.backgroundColor && {
    backgroundColor: theme.vars.palette.background.surface
  }, {
    "&::before": {
      content: '""',
      display: "block",
      position: "absolute",
      width: (_ownerState$placement = ownerState.placement) != null && _ownerState$placement.match(/(top|bottom)/) ? "100%" : "calc(10px + var(--variant-borderWidth, 0px))",
      height: (_ownerState$placement2 = ownerState.placement) != null && _ownerState$placement2.match(/(top|bottom)/) ? "calc(10px + var(--variant-borderWidth, 0px))" : "100%"
    },
    '&[data-popper-placement*="bottom"]::before': {
      top: 0,
      left: 0,
      transform: "translateY(-100%)"
    },
    '&[data-popper-placement*="left"]::before': {
      top: 0,
      right: 0,
      transform: "translateX(100%)"
    },
    '&[data-popper-placement*="right"]::before': {
      top: 0,
      left: 0,
      transform: "translateX(-100%)"
    },
    '&[data-popper-placement*="top"]::before': {
      bottom: 0,
      left: 0,
      transform: "translateY(100%)"
    }
  });
});
var TooltipArrow = styled_default("span", {
  name: "JoyTooltip",
  slot: "Arrow",
  overridesResolver: (props, styles) => styles.arrow
})(({
  theme,
  ownerState
}) => {
  var _theme$variants2, _variantStyle$backgro, _variantStyle$backgro2;
  const variantStyle = (_theme$variants2 = theme.variants[ownerState.variant]) == null ? void 0 : _theme$variants2[ownerState.color];
  return {
    "--unstable_Tooltip-arrowRotation": 0,
    width: "var(--Tooltip-arrowSize)",
    height: "var(--Tooltip-arrowSize)",
    boxSizing: "border-box",
    "&:before": {
      content: '""',
      display: "block",
      position: "absolute",
      width: 0,
      height: 0,
      border: "calc(var(--Tooltip-arrowSize) / 2) solid",
      borderLeftColor: "transparent",
      borderBottomColor: "transparent",
      borderTopColor: (_variantStyle$backgro = variantStyle == null ? void 0 : variantStyle.backgroundColor) != null ? _variantStyle$backgro : theme.vars.palette.background.surface,
      borderRightColor: (_variantStyle$backgro2 = variantStyle == null ? void 0 : variantStyle.backgroundColor) != null ? _variantStyle$backgro2 : theme.vars.palette.background.surface,
      borderRadius: `0px 2px 0px 0px`,
      boxShadow: `var(--variant-borderWidth, 0px) calc(-1 * var(--variant-borderWidth, 0px)) 0px 0px ${variantStyle.borderColor}`,
      transformOrigin: "center center",
      transform: "rotate(calc(-45deg + 90deg * var(--unstable_Tooltip-arrowRotation)))"
    },
    '[data-popper-placement*="bottom"] &': {
      top: "calc(0.5px + var(--Tooltip-arrowSize) * -1 / 2)"
    },
    '[data-popper-placement*="top"] &': {
      "--unstable_Tooltip-arrowRotation": 2,
      bottom: "calc(0.5px + var(--Tooltip-arrowSize) * -1 / 2)"
    },
    '[data-popper-placement*="left"] &': {
      "--unstable_Tooltip-arrowRotation": 1,
      right: "calc(0.5px + var(--Tooltip-arrowSize) * -1 / 2)"
    },
    '[data-popper-placement*="right"] &': {
      "--unstable_Tooltip-arrowRotation": 3,
      left: "calc(0.5px + var(--Tooltip-arrowSize) * -1 / 2)"
    }
  };
});
var hystersisOpen = false;
var hystersisTimer = null;
var cursorPosition = {
  x: 0,
  y: 0
};
function composeMouseEventHandler(handler, eventHandler) {
  return (event) => {
    if (eventHandler) {
      eventHandler(event);
    }
    handler(event);
  };
}
function composeFocusEventHandler(handler, eventHandler) {
  return (event) => {
    if (eventHandler) {
      eventHandler(event);
    }
    handler(event);
  };
}
var Tooltip = React75.forwardRef(function Tooltip2(inProps, ref) {
  var _props$slots;
  const props = useThemeProps({
    props: inProps,
    name: "JoyTooltip"
  });
  const {
    children,
    className,
    component,
    arrow = false,
    describeChild = false,
    disableFocusListener = false,
    disableHoverListener = false,
    disableInteractive: disableInteractiveProp = false,
    disableTouchListener = false,
    enterDelay = 100,
    enterNextDelay = 0,
    enterTouchDelay = 700,
    followCursor = false,
    id: idProp,
    leaveDelay = 0,
    leaveTouchDelay = 1500,
    onClose,
    onOpen,
    open: openProp,
    disablePortal,
    direction,
    keepMounted,
    modifiers: modifiersProp,
    placement = "bottom",
    title,
    color: colorProp = "neutral",
    variant = "solid",
    size = "md",
    slots = {},
    slotProps = {}
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded57);
  const {
    getColor
  } = useColorInversion(variant);
  const color = disablePortal ? getColor(inProps.color, colorProp) : colorProp;
  const [childNode, setChildNode] = React75.useState();
  const [arrowRef, setArrowRef] = React75.useState(null);
  const ignoreNonTouchEvents = React75.useRef(false);
  const disableInteractive = disableInteractiveProp || followCursor;
  const closeTimer = React75.useRef();
  const enterTimer = React75.useRef();
  const leaveTimer = React75.useRef();
  const touchTimer = React75.useRef();
  const [openState, setOpenState] = useControlled({
    controlled: openProp,
    default: false,
    name: "Tooltip",
    state: "open"
  });
  let open = openState;
  const id = useId(idProp);
  const prevUserSelect = React75.useRef();
  const stopTouchInteraction = React75.useCallback(() => {
    if (prevUserSelect.current !== void 0) {
      document.body.style.WebkitUserSelect = prevUserSelect.current;
      prevUserSelect.current = void 0;
    }
    clearTimeout(touchTimer.current);
  }, []);
  React75.useEffect(() => {
    return () => {
      clearTimeout(closeTimer.current);
      clearTimeout(enterTimer.current);
      clearTimeout(leaveTimer.current);
      stopTouchInteraction();
    };
  }, [stopTouchInteraction]);
  const handleOpen = (event) => {
    if (hystersisTimer) {
      clearTimeout(hystersisTimer);
    }
    hystersisOpen = true;
    setOpenState(true);
    if (onOpen && !open) {
      onOpen(event);
    }
  };
  const handleClose = useEventCallback((event) => {
    if (hystersisTimer) {
      clearTimeout(hystersisTimer);
    }
    hystersisTimer = setTimeout(() => {
      hystersisOpen = false;
    }, 800 + leaveDelay);
    setOpenState(false);
    if (onClose && open) {
      onClose(event);
    }
    clearTimeout(closeTimer.current);
    closeTimer.current = setTimeout(() => {
      ignoreNonTouchEvents.current = false;
    }, 150);
  });
  const handleEnter = (event) => {
    if (ignoreNonTouchEvents.current && event.type !== "touchstart") {
      return;
    }
    if (childNode) {
      childNode.removeAttribute("title");
    }
    clearTimeout(enterTimer.current);
    clearTimeout(leaveTimer.current);
    if (enterDelay || hystersisOpen && enterNextDelay) {
      enterTimer.current = setTimeout(() => {
        handleOpen(event);
      }, hystersisOpen ? enterNextDelay : enterDelay);
    } else {
      handleOpen(event);
    }
  };
  const handleLeave = (event) => {
    clearTimeout(enterTimer.current);
    clearTimeout(leaveTimer.current);
    leaveTimer.current = setTimeout(() => {
      handleClose(event);
    }, leaveDelay);
  };
  const {
    isFocusVisibleRef,
    onBlur: handleBlurVisible,
    onFocus: handleFocusVisible,
    ref: focusVisibleRef
  } = useIsFocusVisible();
  const [, setChildIsFocusVisible] = React75.useState(false);
  const handleBlur = (event) => {
    handleBlurVisible(event);
    if (isFocusVisibleRef.current === false) {
      setChildIsFocusVisible(false);
      handleLeave(event);
    }
  };
  const handleFocus = (event) => {
    if (!childNode) {
      setChildNode(event.currentTarget);
    }
    handleFocusVisible(event);
    if (isFocusVisibleRef.current === true) {
      setChildIsFocusVisible(true);
      handleEnter(event);
    }
  };
  const detectTouchStart = (event) => {
    ignoreNonTouchEvents.current = true;
    const childrenProps2 = children.props;
    if (childrenProps2.onTouchStart) {
      childrenProps2.onTouchStart(event);
    }
  };
  const handleMouseOver = handleEnter;
  const handleMouseLeave = handleLeave;
  const handleTouchStart = (event) => {
    detectTouchStart(event);
    clearTimeout(leaveTimer.current);
    clearTimeout(closeTimer.current);
    stopTouchInteraction();
    prevUserSelect.current = document.body.style.WebkitUserSelect;
    document.body.style.WebkitUserSelect = "none";
    touchTimer.current = setTimeout(() => {
      document.body.style.WebkitUserSelect = prevUserSelect.current;
      handleEnter(event);
    }, enterTouchDelay);
  };
  const handleTouchEnd = (event) => {
    if (children.props.onTouchEnd) {
      children.props.onTouchEnd(event);
    }
    stopTouchInteraction();
    clearTimeout(leaveTimer.current);
    leaveTimer.current = setTimeout(() => {
      handleClose(event);
    }, leaveTouchDelay);
  };
  React75.useEffect(() => {
    if (!open) {
      return void 0;
    }
    function handleKeyDown(nativeEvent) {
      if (nativeEvent.key === "Escape" || nativeEvent.key === "Esc") {
        handleClose(nativeEvent);
      }
    }
    document.addEventListener("keydown", handleKeyDown);
    return () => {
      document.removeEventListener("keydown", handleKeyDown);
    };
  }, [handleClose, open]);
  const handleUseRef = useForkRef(setChildNode, ref);
  const handleFocusRef = useForkRef(focusVisibleRef, handleUseRef);
  const handleRef = useForkRef(children.ref, handleFocusRef);
  if (typeof title !== "number" && !title) {
    open = false;
  }
  const popperRef = React75.useRef(null);
  const handleMouseMove = (event) => {
    const childrenProps2 = children.props;
    if (childrenProps2.onMouseMove) {
      childrenProps2.onMouseMove(event);
    }
    cursorPosition = {
      x: event.clientX,
      y: event.clientY
    };
    if (popperRef.current) {
      popperRef.current.update();
    }
  };
  const nameOrDescProps = {};
  const titleIsString = typeof title === "string";
  if (describeChild) {
    nameOrDescProps.title = !open && titleIsString && !disableHoverListener ? title : null;
    nameOrDescProps["aria-describedby"] = open ? id : null;
  } else {
    nameOrDescProps["aria-label"] = titleIsString ? title : null;
    nameOrDescProps["aria-labelledby"] = open && !titleIsString ? id : null;
  }
  const childrenProps = _extends({}, nameOrDescProps, other, {
    component
  }, children.props, {
    className: clsx_m_default(className, children.props.className),
    onTouchStart: detectTouchStart,
    ref: handleRef
  }, followCursor ? {
    onMouseMove: handleMouseMove
  } : {});
  const interactiveWrapperListeners = {};
  if (!disableTouchListener) {
    childrenProps.onTouchStart = handleTouchStart;
    childrenProps.onTouchEnd = handleTouchEnd;
  }
  if (!disableHoverListener) {
    childrenProps.onMouseOver = composeMouseEventHandler(handleMouseOver, childrenProps.onMouseOver);
    childrenProps.onMouseLeave = composeMouseEventHandler(handleMouseLeave, childrenProps.onMouseLeave);
    if (!disableInteractive) {
      interactiveWrapperListeners.onMouseOver = handleMouseOver;
      interactiveWrapperListeners.onMouseLeave = handleMouseLeave;
    }
  }
  if (!disableFocusListener) {
    childrenProps.onFocus = composeFocusEventHandler(handleFocus, childrenProps.onFocus);
    childrenProps.onBlur = composeFocusEventHandler(handleBlur, childrenProps.onBlur);
    if (!disableInteractive) {
      interactiveWrapperListeners.onFocus = handleFocus;
      interactiveWrapperListeners.onBlur = handleBlur;
    }
  }
  const ownerState = _extends({}, props, {
    arrow,
    disableInteractive,
    placement,
    touch: ignoreNonTouchEvents.current,
    color,
    variant,
    size
  });
  const classes = useUtilityClasses52(ownerState);
  const externalForwardedProps = _extends({}, other, {
    component,
    slots,
    slotProps
  });
  const modifiers = React75.useMemo(() => [{
    name: "arrow",
    enabled: Boolean(arrowRef),
    options: {
      element: arrowRef,
      padding: 6
    }
  }, {
    name: "offset",
    options: {
      offset: [0, 10]
    }
  }, ...modifiersProp || []], [arrowRef, modifiersProp]);
  const [SlotRoot, rootProps] = useSlot("root", {
    additionalProps: _extends({
      id,
      popperRef,
      placement,
      anchorEl: followCursor ? {
        getBoundingClientRect: () => ({
          top: cursorPosition.y,
          left: cursorPosition.x,
          right: cursorPosition.x,
          bottom: cursorPosition.y,
          width: 0,
          height: 0
        })
      } : childNode,
      open: childNode ? open : false,
      disablePortal,
      keepMounted,
      direction,
      modifiers
    }, interactiveWrapperListeners),
    ref: null,
    className: classes.root,
    elementType: TooltipRoot,
    externalForwardedProps,
    ownerState
  });
  const [SlotArrow, arrowProps] = useSlot("arrow", {
    ref: setArrowRef,
    className: classes.arrow,
    elementType: TooltipArrow,
    externalForwardedProps,
    ownerState
  });
  const result = (0, import_jsx_runtime76.jsxs)(SlotRoot, _extends({}, rootProps, !((_props$slots = props.slots) != null && _props$slots.root) && {
    as: Popper_default,
    slots: {
      root: component || "div"
    }
  }, {
    children: [title, arrow ? (0, import_jsx_runtime75.jsx)(SlotArrow, _extends({}, arrowProps)) : null]
  }));
  return (0, import_jsx_runtime76.jsxs)(React75.Fragment, {
    children: [React75.isValidElement(children) && React75.cloneElement(children, childrenProps), disablePortal ? result : (0, import_jsx_runtime75.jsx)(ColorInversion_default.Provider, {
      value: void 0,
      children: result
    })]
  });
});
true ? Tooltip.propTypes = {
  arrow: import_prop_types56.default.bool,
  children: import_prop_types56.default.element.isRequired,
  className: import_prop_types56.default.string,
  color: import_prop_types56.default.oneOf(["danger", "info", "neutral", "primary", "success", "warning"]),
  component: import_prop_types56.default.elementType,
  describeChild: import_prop_types56.default.bool,
  direction: import_prop_types56.default.oneOf(["ltr", "rtl"]),
  disableFocusListener: import_prop_types56.default.bool,
  disableHoverListener: import_prop_types56.default.bool,
  disableInteractive: import_prop_types56.default.bool,
  disablePortal: import_prop_types56.default.bool,
  disableTouchListener: import_prop_types56.default.bool,
  enterDelay: import_prop_types56.default.number,
  enterNextDelay: import_prop_types56.default.number,
  enterTouchDelay: import_prop_types56.default.number,
  followCursor: import_prop_types56.default.bool,
  id: import_prop_types56.default.string,
  keepMounted: import_prop_types56.default.bool,
  leaveDelay: import_prop_types56.default.number,
  leaveTouchDelay: import_prop_types56.default.number,
  modifiers: import_prop_types56.default.arrayOf(import_prop_types56.default.shape({
    data: import_prop_types56.default.object,
    effect: import_prop_types56.default.func,
    enabled: import_prop_types56.default.bool,
    fn: import_prop_types56.default.func,
    name: import_prop_types56.default.any,
    options: import_prop_types56.default.object,
    phase: import_prop_types56.default.oneOf(["afterMain", "afterRead", "afterWrite", "beforeMain", "beforeRead", "beforeWrite", "main", "read", "write"]),
    requires: import_prop_types56.default.arrayOf(import_prop_types56.default.string),
    requiresIfExists: import_prop_types56.default.arrayOf(import_prop_types56.default.string)
  })),
  onClose: import_prop_types56.default.func,
  onOpen: import_prop_types56.default.func,
  open: import_prop_types56.default.bool,
  placement: import_prop_types56.default.oneOf(["bottom-end", "bottom-start", "bottom", "left-end", "left-start", "left", "right-end", "right-start", "right", "top-end", "top-start", "top"]),
  size: import_prop_types56.default.oneOf(["sm", "md", "lg"]),
  slotProps: import_prop_types56.default.shape({
    arrow: import_prop_types56.default.oneOfType([import_prop_types56.default.func, import_prop_types56.default.object]),
    root: import_prop_types56.default.oneOfType([import_prop_types56.default.func, import_prop_types56.default.object])
  }),
  slots: import_prop_types56.default.shape({
    arrow: import_prop_types56.default.elementType,
    root: import_prop_types56.default.elementType
  }),
  sx: import_prop_types56.default.oneOfType([import_prop_types56.default.arrayOf(import_prop_types56.default.oneOfType([import_prop_types56.default.func, import_prop_types56.default.object, import_prop_types56.default.bool])), import_prop_types56.default.func, import_prop_types56.default.object]),
  title: import_prop_types56.default.node,
  variant: import_prop_types56.default.oneOf(["outlined", "plain", "soft", "solid"])
} : void 0;
var Tooltip_default = Tooltip;
export {
  Alert_default as Alert,
  AspectRatio_default as AspectRatio,
  Autocomplete_default as Autocomplete,
  AutocompleteListbox_default as AutocompleteListbox,
  AutocompleteOption_default as AutocompleteOption,
  Avatar_default as Avatar,
  AvatarGroup_default as AvatarGroup,
  Badge_default as Badge,
  Box_default as Box,
  Breadcrumbs_default as Breadcrumbs,
  Button_default as Button,
  Card_default as Card,
  CardContent_default as CardContent,
  CardCover_default as CardCover,
  CardOverflow_default as CardOverflow,
  Checkbox_default as Checkbox,
  Chip_default as Chip,
  ChipDelete_default as ChipDelete,
  CircularProgress_default as CircularProgress,
  ColorInversionProvider,
  Container_default as Container,
  CssBaseline_default as CssBaseline,
  CssVarsProvider,
  Divider_default as Divider,
  FormControl_default as FormControl,
  FormHelperText_default as FormHelperText,
  FormLabel_default as FormLabel,
  GlobalStyles_default2 as GlobalStyles,
  Grid_default as Grid,
  IconButton_default as IconButton,
  Input_default as Input,
  LinearProgress_default as LinearProgress,
  Link_default as Link,
  List_default as List,
  ListDivider_default as ListDivider,
  ListItem_default as ListItem,
  ListItemButton_default as ListItemButton,
  ListItemContent_default as ListItemContent,
  ListItemDecorator_default as ListItemDecorator,
  ListSubheader_default as ListSubheader,
  Menu_default as Menu,
  MenuItem_default as MenuItem,
  MenuList_default as MenuList,
  Modal_default as Modal,
  ModalClose_default as ModalClose,
  ModalDialog_default as ModalDialog,
  ModalOverflow_default as ModalOverflow,
  Option_default as Option,
  Radio_default as Radio,
  RadioGroup_default as RadioGroup,
  ScopedCssBaseline_default as ScopedCssBaseline,
  Select_default as Select,
  Sheet_default as Sheet,
  Slider_default as Slider,
  Stack_default as Stack,
  StyledEngineProvider,
  SvgIcon_default as SvgIcon,
  Switch_default as Switch,
  identifier_default as THEME_ID,
  Tab_default as Tab,
  TabList_default as TabList,
  TabPanel_default as TabPanel,
  Table_default as Table,
  Tabs_default as Tabs,
  TextField_default as TextField,
  Textarea_default as Textarea,
  ThemeProvider,
  Tooltip_default as Tooltip,
  Typography_default as Typography,
  alertClasses_default as alertClasses,
  aspectRatioClasses_default as aspectRatioClasses,
  autocompleteClasses_default as autocompleteClasses,
  autocompleteListboxClasses_default as autocompleteListboxClasses,
  autocompleteOptionClasses_default as autocompleteOptionClasses,
  avatarClasses_default as avatarClasses,
  avatarGroupClasses_default as avatarGroupClasses,
  badgeClasses_default as badgeClasses,
  breadcrumbsClasses_default as breadcrumbsClasses,
  buttonClasses_default as buttonClasses,
  cardClasses_default as cardClasses,
  cardContentClasses_default as cardContentClasses,
  cardCoverClasses_default as cardCoverClasses,
  cardOverflowClasses_default as cardOverflowClasses,
  checkboxClasses_default as checkboxClasses,
  chipClasses_default as chipClasses,
  chipDeleteClasses_default as chipDeleteClasses,
  circularProgressClasses_default as circularProgressClasses,
  colors_default as colors,
  containerClasses_default as containerClasses,
  createFilterOptions,
  createGetCssVar,
  dividerClasses_default as dividerClasses,
  extendTheme,
  formControlClasses_default as formControlClasses,
  formHelperTextClasses_default as formHelperTextClasses,
  formLabelClasses_default as formLabelClasses,
  getAlertUtilityClass,
  getAspectRatioUtilityClass,
  getAutocompleteListboxUtilityClass,
  getAutocompleteOptionUtilityClass,
  getAutocompleteUtilityClass,
  getAvatarGroupUtilityClass,
  getAvatarUtilityClass,
  getBadgeUtilityClass,
  getBreadcrumbsUtilityClass,
  getButtonUtilityClass,
  getCardContentUtilityClass,
  getCardCoverUtilityClass,
  getCardOverflowUtilityClass,
  getCardUtilityClass,
  getCheckboxUtilityClass,
  getChipDeleteUtilityClass,
  getChipUtilityClass,
  getCircularProgressUtilityClass,
  getContainerUtilityClass,
  getDividerUtilityClass,
  getFormControlUtilityClass,
  getFormHelperTextUtilityClass,
  getFormLabelUtilityClass,
  getGridUtilityClass,
  getIconButtonUtilityClass,
  getInitColorSchemeScript,
  getInputUtilityClass,
  getLinearProgressUtilityClass,
  getLinkUtilityClass,
  getListDividerUtilityClass,
  getListItemButtonUtilityClass,
  getListItemContentUtilityClass,
  getListItemDecoratorUtilityClass,
  getListItemUtilityClass,
  getListSubheaderUtilityClass,
  getListUtilityClass,
  getMenuItemUtilityClass,
  getMenuListUtilityClass,
  getMenuUtilityClass,
  getModalCloseUtilityClass,
  getModalDialogUtilityClass,
  getModalOverflowUtilityClass,
  getModalUtilityClass,
  getOptionUtilityClass,
  getRadioGroupUtilityClass,
  getRadioUtilityClass,
  getScopedCssBaselineUtilityClass,
  getSelectUtilityClass,
  getSheetUtilityClass,
  getSliderUtilityClass,
  getStackUtilityClass,
  getSvgIconUtilityClass,
  getSwitchUtilityClass,
  getTabListUtilityClass,
  getTabPanelUtilityClass,
  getTabUtilityClass,
  getTableUtilityClass,
  getTabsUtilityClass,
  getTextareaUtilityClass,
  getTooltipUtilityClass,
  getTypographyUtilityClass,
  gridClasses_default as gridClasses,
  iconButtonClasses_default as iconButtonClasses,
  inputClasses_default as inputClasses,
  linearProgressClasses_default as linearProgressClasses,
  linkClasses_default as linkClasses,
  listClasses_default as listClasses,
  listDividerClasses_default as listDividerClasses,
  listItemButtonClasses_default as listItemButtonClasses,
  listItemClasses_default as listItemClasses,
  listItemContentClasses_default as listItemContentClasses,
  listItemDecoratorClasses_default as listItemDecoratorClasses,
  listSubheaderClasses_default as listSubheaderClasses,
  menuClasses_default as menuClasses,
  menuItemClasses_default as menuItemClasses,
  menuListClasses_default as menuListClasses,
  modalClasses_default as modalClasses,
  modalCloseClasses_default as modalCloseClasses,
  modalDialogClasses_default as modalDialogClasses,
  modalOverflowClasses_default as modalOverflowClasses,
  optionClasses_default as optionClasses,
  radioClasses_default as radioClasses,
  radioGroupClasses_default as radioGroupClasses,
  scopedCssBaselineClasses_default as scopedCssBaselineClasses,
  selectClasses_default as selectClasses,
  sheetClasses_default as sheetClasses,
  shouldSkipGeneratingVar,
  sliderClasses_default as sliderClasses,
  stackClasses_default as stackClasses,
  styled_default as styled,
  svgIconClasses_default as svgIconClasses,
  switchClasses_default as switchClasses,
  tabClasses_default as tabClasses,
  tabListClasses_default as tabListClasses,
  tabPanelClasses_default as tabPanelClasses,
  tableClasses_default as tableClasses,
  tabsClasses_default as tabsClasses,
  textareaClasses_default as textareaClasses,
  tooltipClasses_default as tooltipClasses,
  typographyClasses_default as typographyClasses,
  useColorInversion,
  useColorScheme,
  useTheme,
  useThemeProps
};
/**
 * @mui/joy v5.0.0-alpha.79
 *
 * @license MIT
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
//# sourceMappingURL=@mui_joy.js.map
